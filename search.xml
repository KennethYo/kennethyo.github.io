<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Mac Android Studio 使用离线文档]]></title>
      <url>http://www.kennethyo.me/2017/08/30/untitled-1504078195930/</url>
      <content type="html"><![CDATA[<ul>
<li><p>打开<code>~/Library/Preferences/AndroidStudio2.3/options</code>目录;</p>
</li>
<li><p>打开<code>jdk.table.xml</code>文件;</p>
</li>
<li><p>搜索<code>http://developer.android.com/reference/</code>;</p>
</li>
<li><p>替换国服地址<code>https://developer.android.google.cn/reference</code>, 或者替换为本地地址<code>file://$USER_HOME$/Library/Android/sdk/docs/reference</code>,这里我用的是 Studio 自带的 Android SDK, 当然也可以指向其他的SDK, 如果没有<code>docs</code>请在如下图片所在设置页面下载.</p>
</li>
</ul>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fj1s76ht1lj31kw0nnqfc.jpg" alt></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Studio </tag>
            
            <tag> Android Studio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式学习笔记]]></title>
      <url>http://www.kennethyo.me/2017/08/20/untitled-1503165543552/</url>
      <content type="html"><![CDATA[<blockquote>
<p>基于<a href="#toc_24">学习资料</a>的笔记。</p>
</blockquote>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>一组字母和符号组成的文本，用来在文本中找出满足需要得文本。<br><code>regex</code>是<code>regular expression</code>的缩写。</p>
<h1 id="基本匹配"><a href="#基本匹配" class="headerlink" title="基本匹配"></a>基本匹配</h1><p>直接配具体文本，大小写敏感。<br>匹配<code>kenneth</code>:<br><code>kenneth</code> =&gt; <strong>kenneth</strong> yo</p>
<h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><table>
<thead>
<tr>
<th style="text-align:center">元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">.</td>
<td>句号匹配任意单个字符除了换行符.</td>
</tr>
<tr>
<td style="text-align:center">[ ]</td>
<td>字符种类. 匹配方括号内的任意字符.</td>
</tr>
<tr>
<td style="text-align:center">[^ ]</td>
<td>否定的字符种类. 匹配除了方括号里的任意字符</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td>匹配&gt;=0个重复的在*号之前的字符.</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td>匹配&gt;=1个重复的+号前的字符.</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td>标记?之前的字符为可选.</td>
</tr>
<tr>
<td style="text-align:center">{n,m}</td>
<td>匹配num个中括号之前的字符 (n &lt;= num &lt;= m).</td>
</tr>
<tr>
<td style="text-align:center">(xyz)</td>
<td>字符集, 匹配与 xyz 完全相等的字符串.</td>
</tr>
<tr>
<td style="text-align:center">&#124;</td>
<td>或运算符,匹配符号前或后的字符.</td>
</tr>
<tr>
<td style="text-align:center">&#92;</td>
<td>转义字符,用于匹配一些保留的字符 <code>[ ] ( ) { } . * + ? ^ $ \ &#124;</code></td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td>从开始行开始匹配.</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td>从末端开始匹配.</td>
</tr>
</tbody>
</table>
<h2 id="点运算符"><a href="#点运算符" class="headerlink" title="点运算符."></a>点运算符<code>.</code></h2><p>匹配任意字符，但不匹配换行符。<br><code>.ar</code> =&gt; The <strong>car</strong> <strong>par</strong>ked in the <strong>gar</strong>age.</p>
<h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集[]"></a>字符集<code>[]</code></h2><p>连字符<code>-</code>指定范围，括号里面<code>.</code>就是表示<code>.</code>。<br><code>[Tt]he</code> =&gt; <strong>The</strong> car parked in <strong>the</strong> garage.</p>
<h2 id="否定字符集"><a href="#否定字符集" class="headerlink" title="否定字符集[^]"></a>否定字符集<code>[^]</code></h2><p>和字符集相反，匹配不为括号内的字符。<br><code>[^c]ar</code> =&gt; The car <strong>par</strong>ked in the <strong>gar</strong>age.</p>
<h2 id="重复次数-号"><a href="#重复次数-号" class="headerlink" title="重复次数*号"></a>重复次数<code>*</code>号</h2><p>匹配<code>*</code>之前的字符出现大于等于0次。<br><code>[a-z]*</code> =&gt; T<strong>he car parked in the garage</strong>.<br><code>\s*cat\s*</code> =&gt; The fat <strong>cat</strong> sat on the con<strong>cat</strong>enation.</p>
<h2 id="重复次数-号-1"><a href="#重复次数-号-1" class="headerlink" title="重复次数+号"></a>重复次数<code>+</code>号</h2><p>匹配<code>*</code>之前的字符出现大于等于1次。<br><code>c.+t</code> =&gt; The fat <strong>cat sat on the mat</strong>.</p>
<h2 id="重复次数-号-2"><a href="#重复次数-号-2" class="headerlink" title="重复次数?号"></a>重复次数<code>?</code>号</h2><p>匹配<code>*</code>之前的字符出现0次或1次。<br><code>[T]?he</code> =&gt; <strong>The</strong> car is parked in t<strong>he</strong> garage.</p>
<h2 id="号"><a href="#号" class="headerlink" title="{}号"></a><code>{}</code>号</h2><p>匹配之前的字符或字符组出现的次数。<br><code>{2,3}</code>，表示2到3位，逗号后没有数字，表示至少2位。<br>一个数字代表固定次数，例如<code>{3}</code>。<br><code>[0-9]{2,}</code> =&gt; The number was 9.<strong>9997</strong> but we rounded it off to <strong>10</strong>.0.</p>
<h2 id="特征标群"><a href="#特征标群" class="headerlink" title="(...)特征标群"></a><code>(...)</code>特征标群</h2><p><code>(ab)*</code> 匹配连续出现 0 或更多个 <code>ab</code>。<br> <code>()</code>中用或字符<code>|</code> 表示或. 例如,<code>(c|g|p)ar</code> 匹配 car 或 gar 或 par.</p>
<h2 id="或运算符"><a href="#或运算符" class="headerlink" title="|或运算符"></a><code>|</code>或运算符</h2><p>或运算。如上例。</p>
<h2 id="转码特殊字符"><a href="#转码特殊字符" class="headerlink" title="转码特殊字符"></a>转码特殊字符</h2><p>反斜线 <code>\</code>， 用于指定 { } [ ] / \ + * . $ ^ | ? 这些特殊字符。<br>例如要匹配<code>.</code>，需要写成<code>\.</code>。</p>
<h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><p>匹配指定开头或结尾的字符串就要使用到锚点。 <code>^</code> 指定开头，<code>$</code> 指定结尾。</p>
<h1 id="简写字符集"><a href="#简写字符集" class="headerlink" title="简写字符集"></a>简写字符集</h1><table>
<thead>
<tr>
<th style="text-align:center">简写</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">.</td>
<td>除换行符外的所有字符</td>
</tr>
<tr>
<td style="text-align:center">\w</td>
<td>匹配所有字母数字, 等同于 <code>[a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td style="text-align:center">\W</td>
<td>匹配所有非字母数字, 即符号, 等同于: <code>[^\w]</code></td>
</tr>
<tr>
<td style="text-align:center">\d</td>
<td>匹配数字: <code>[0-9]</code></td>
</tr>
<tr>
<td style="text-align:center">\D</td>
<td>匹配非数字: <code>[^\d]</code></td>
</tr>
<tr>
<td style="text-align:center">\s</td>
<td>匹配所有空格字符, 等同于: <code>[\t\n\f\r\p{Z}]</code></td>
</tr>
<tr>
<td style="text-align:center">\S</td>
<td>匹配所有非空格字符: <code>[^\s]</code></td>
</tr>
<tr>
<td style="text-align:center">\f</td>
<td>匹配一个换页符</td>
</tr>
<tr>
<td style="text-align:center">\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td style="text-align:center">\r</td>
<td>匹配一个回车符</td>
</tr>
<tr>
<td style="text-align:center">\t</td>
<td>匹配一个制表符</td>
</tr>
<tr>
<td style="text-align:center">\v</td>
<td>匹配一个垂直制表符</td>
</tr>
<tr>
<td style="text-align:center">\p</td>
<td>匹配 CR/LF (等同于 <code>\r\n</code>)，用来匹配 DOS 行终止符</td>
</tr>
</tbody>
</table>
<h1 id="前后关联约束（前后预查）"><a href="#前后关联约束（前后预查）" class="headerlink" title="前后关联约束（前后预查）"></a>前后关联约束（前后预查）</h1><table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">?=</td>
<td>前置约束-存在</td>
</tr>
<tr>
<td style="text-align:center">?!</td>
<td>前置约束-排除</td>
</tr>
<tr>
<td style="text-align:center">?&lt;=</td>
<td>后置约束-存在</td>
</tr>
<tr>
<td style="text-align:center">?&lt;!</td>
<td>后置约束-排除</td>
</tr>
</tbody>
</table>
<h2 id="前置约束-存在"><a href="#前置约束-存在" class="headerlink" title="?=前置约束-存在"></a><code>?=</code>前置约束-存在</h2><p><code>?=...</code> 前置约束(存在)，表示第一部分表达式必须跟在 <code>?=...</code>定义的表达式之后。<br>前置约束的内容写在括号中的等号后面、。 例如， 表达式<code>[T|t]he(?=\sfat)</code>匹配<code>The</code>和<code>the</code>, 在括号中我们又定义了前置约束(存在) <code>(?=\sfat)</code> ,即<code>The</code>和<code>the</code>后面紧跟着 <code>(空格)fat`</code>。<br><code>[T|t]he(?=\sfat)</code> =&gt; <strong>The</strong> fat cat sat on the mat.</p>
<h2 id="前置约束-排除"><a href="#前置约束-排除" class="headerlink" title="?!...前置约束-排除"></a><code>?!...</code>前置约束-排除</h2><p><code>[T|t]he(?!\sfat)</code> =&gt; The fat cat sat on <strong>the</strong> mat.</p>
<h2 id="lt-后置约束-存在"><a href="#lt-后置约束-存在" class="headerlink" title="?&lt;=...后置约束-存在"></a><code>?&lt;=...</code>后置约束-存在</h2><p><code>(?&lt;=[T|t]he\s)(fat|mat)</code> =&gt; The <strong>fat</strong> cat sat on the <strong>mat</strong>.</p>
<h2 id="lt-后置约束-排除"><a href="#lt-后置约束-排除" class="headerlink" title="?&lt;!...后置约束-排除"></a><code>?&lt;!...</code>后置约束-排除</h2><p><code>(?&lt;![T|t]he\s)(cat)</code> =&gt; The cat sat on <strong>cat</strong>.</p>
<h1 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h1><p>修改表达式的搜索结果。可以任意组合。<br>|标志|描述|<br>|:—-:|—-|<br>|i|忽略大小写.|<br>|g|全局搜索.|<br>|m|多行的: 锚点元字符 <code>^</code> <code>$</code> 工作范围在每行的起始.|</p>
<h2 id="忽略大小写"><a href="#忽略大小写" class="headerlink" title="忽略大小写"></a>忽略大小写</h2><p><code>/The/gi</code>全局忽略大小写<code>the</code>。<br><code>/The/gi</code> =&gt; <strong>The</strong> fat cat sat on <strong>the</strong> mat.</p>
<h2 id="全局搜索"><a href="#全局搜索" class="headerlink" title="全局搜索"></a>全局搜索</h2><p><code>/.(at)/g</code> =&gt; The <strong>fat</strong> <strong>cat</strong> <strong>sat</strong> on the <strong>mat</strong>.</p>
<h2 id="多行修饰符"><a href="#多行修饰符" class="headerlink" title="多行修饰符"></a>多行修饰符</h2><p>像之前介绍的 <code>(^,$)</code> 用于检查格式是否是在待检测字符串的开头或结尾。 但我们如果想要它在每行的开头和结尾生效，我们需要用到多行修饰符 <code>m</code>。<br><code>/.at(.)?$/</code> =&gt; The fat<br>                cat sat<br>                on the <strong>mat.</strong><br><code>/.at(.)?$/gm</code> =&gt; The <strong>fat</strong><br>                  cat <strong>sat</strong><br>                  on the <strong>mat.</strong></p>
<h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><ul>
<li><a href="https://github.com/zeeshanu/learn-regex/blob/master/README-cn.md" target="_blank" rel="noopener">Learn Regex The Easy Way</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Regex </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex </tag>
            
            <tag> Regex </tag>
            
            <tag> 正则表达式 </tag>
            
            <tag> regular expression </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[adb logcat 指北]]></title>
      <url>http://www.kennethyo.me/2017/08/02/untitled-1501674058670/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Nexus 5, Android 6.0.1, API 23</p>
</blockquote>
<p><code>Log</code>类，相信开发 Android 的同学都不陌生，正如其名，<code>Log</code>类提供了打印日志功能，方便我们在开发调试过程中输出调试信息，输出如下：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fi4ax7awudj312s04qmyv.jpg" alt></p>
<p>有大神觉得这样的输出信息不够多，不够美观，不够强大，于是就有了 <a href="https://github.com/orhanobut/logger" target="_blank" rel="noopener">logger</a>、<a href="https://github.com/JakeWharton/hugo" target="_blank" rel="noopener">hugo</a>、<a href="https://github.com/JakeWharton/timber" target="_blank" rel="noopener">timber</a>等 log 工具类。</p>
<p>虽然有这些强大的工具来使用，但是你离开了 IDE  还会看 log 吗？下面我们来介绍 <code>adb logcat</code>的使用。</p>
<h1 id="adb-logcat"><a href="#adb-logcat" class="headerlink" title="adb logcat"></a>adb logcat</h1><p><code>adb</code>全名叫做<code>Android Debug Bridge</code>，也就是 Android 调试桥。是 Android SDK 提供的一个 DEBUG 工具，在 <code>platform-tools</code>目录下。</p>
<p><code>logcat</code>是Android系统提供的一个命令行工具，用于输出 log 日志。</p>
<p><code>adb</code>和<code>logcat</code>就组成了远程调试输出 log 的工具。😓</p>
<p>把 SDK 的<code>platform-tools</code>配置到了环境变量当中，在任意位置都可以调用<code>adb</code>指令，当然也可以每次都进入到目录下进行调用…</p>
<p>调用<code>logcat</code>指令有两种方式，一种是前面说的，直接<code>adb logcat</code>，另一种是<code>adb shell</code>进入手机的 shell 面板，然后在调用<code>logcat</code>。下面我都会使用<code>adb logcat</code>这种方式进行演示。</p>
<h1 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h1><p><code>logcat</code>的语法格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logcat [options] [filterspecs]</span><br></pre></td></tr></table></figure></p>
<h1 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h1><table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-s</td>
<td style="text-align:left">设置过滤器</td>
</tr>
<tr>
<td style="text-align:left">-v format</td>
<td style="text-align:left">设置日志打印格式</td>
</tr>
<tr>
<td style="text-align:left">-f filename</td>
<td style="text-align:left">日志输出到指定文件</td>
</tr>
<tr>
<td style="text-align:left">-r kbytes</td>
<td style="text-align:left">每 kbytes 输出日志，与-f一起使用</td>
</tr>
<tr>
<td style="text-align:left">-n count</td>
<td style="text-align:left">设置日志最大数目</td>
</tr>
<tr>
<td style="text-align:left">-b buffer</td>
<td style="text-align:left">加载日志缓冲区</td>
</tr>
<tr>
<td style="text-align:left">-D</td>
<td style="text-align:left">在不同的缓冲区日志之间添加分割线</td>
</tr>
<tr>
<td style="text-align:left">-c</td>
<td style="text-align:left">清除缓冲区并退出</td>
</tr>
<tr>
<td style="text-align:left">-d</td>
<td style="text-align:left">打印缓冲区的log，并退出</td>
</tr>
<tr>
<td style="text-align:left">-g</td>
<td style="text-align:left">打印环形缓冲区大小</td>
</tr>
<tr>
<td style="text-align:left">-G size</td>
<td style="text-align:left">设置环形缓冲区大小</td>
</tr>
<tr>
<td style="text-align:left">-t count</td>
<td style="text-align:left">打印最近 count 行日志，包含 -d 命令</td>
</tr>
<tr>
<td style="text-align:left">-t time</td>
<td style="text-align:left">打印最近从 time 开始的日志，包含 -d 命令，时间格式 MM-DD hh:mm:ss.mmm</td>
</tr>
<tr>
<td style="text-align:left">-T count</td>
<td style="text-align:left">打印最近 count 行日志，不包含 -d 命令</td>
</tr>
<tr>
<td style="text-align:left">-T time</td>
<td style="text-align:left">打印最近从 time 开始的日志，不包含 -d 命令，时间格式 MM-DD hh:mm:ss.mmm</td>
</tr>
<tr>
<td style="text-align:left">-L</td>
<td style="text-align:left">打印上次启动之前的日志</td>
</tr>
<tr>
<td style="text-align:left">-B</td>
<td style="text-align:left">输出二进制日志</td>
</tr>
<tr>
<td style="text-align:left">-S</td>
<td style="text-align:left">输出统计</td>
</tr>
<tr>
<td style="text-align:left">-P list.</td>
<td style="text-align:left">设置 log 黑白名单</td>
</tr>
<tr>
<td style="text-align:left">-p</td>
<td style="text-align:left">获取 log 黑白名单</td>
</tr>
</tbody>
</table>
<h1 id="s"><a href="#s" class="headerlink" title="-s"></a>-s</h1><p>设置默认过滤器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -s &lt;tag&gt;[:priority]</span><br></pre></td></tr></table></figure></p>
<p><code>tag</code>：对应 log 的 tag。值<code>*</code>代表全部，如果只有<code>*</code>，等于<code>*:D</code>，如果仅有<code>&lt;tag&gt;</code>，等于<code>&lt;tag&gt;:V</code>。</p>
<p><code>priority</code>：优先级，从低到高分别是V，D，I，W，E，F，S。V，全部输出。S，全部输出。</p>
<p>例1，只输出 tag 为 test 的 log：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -s test</span><br><span class="line"><span class="meta">#</span>或者</span><br><span class="line">adb logcat -s test:V</span><br></pre></td></tr></table></figure></p>
<p>例2，只输出优先级大于 W 的日志：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -s *:W</span><br></pre></td></tr></table></figure></p>
<p>例3，输出 tag 为 test 的 E 级别 和 tag 为 test1 的 W 级别日志：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -s test:E test1:W</span><br></pre></td></tr></table></figure></p>
<h1 id="v"><a href="#v" class="headerlink" title="-v"></a>-v</h1><p>设置日志打印格式。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -v &lt;format&gt;</span><br></pre></td></tr></table></figure></p>
<p>format 共有 brief、color、long、printable、process、raw、tag、thread、threadtime、time、usec 格式，默认 threadtime。</p>
<p>各种输出格式如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>Java 代码</span><br><span class="line"><span class="meta">#</span>private final static String TAG_0 = "sth0";</span><br><span class="line"><span class="meta">#</span>Log.v(TAG_0, "0 Send a verbose log message");</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>命令</span><br><span class="line"><span class="meta">#</span> adb logcat -v &lt;format&gt; -s sth0:W</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>brief</span><br><span class="line">W/sth0    ( 1065): 0 Send a warn log message</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>color 其实在 Terminal 里面是有颜色的</span><br><span class="line">08-02 09:38:42.094  1065  1065 W sth0    : 0 Send a warn log message</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>long</span><br><span class="line">[ 08-02 09:38:42.094  1065: 1065 W/sth0     ]</span><br><span class="line">0 Send a warn log message</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>printable</span><br><span class="line">08-02 09:38:42.094  1065  1065 W sth0    : 0 Send a warn log message</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>process</span><br><span class="line">W( 1065) 0 Send a warn log message  (sth0)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>raw</span><br><span class="line">0 Send a warn log message</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>tag</span><br><span class="line">W/sth0    : 0 Send a warn log message</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>thread</span><br><span class="line">W( 1065: 1065) 0 Send a warn log message</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>threadtime</span><br><span class="line">08-02 09:38:42.094  1065  1065 W sth0    : 0 Send a warn log message</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>time</span><br><span class="line">08-02 09:38:42.094 W/sth0    ( 1065): 0 Send a warn log message</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>usec</span><br><span class="line">08-02 09:38:42.094771  1065  1065 W sth0    : 0 Send a warn log message</span><br></pre></td></tr></table></figure></p>
<h1 id="f"><a href="#f" class="headerlink" title="-f"></a>-f</h1><p>输出log到指定文件。<code>&lt;filename&gt;</code>是手机内的文件，并不是调试用的电脑。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -f &lt;filename&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="r"><a href="#r" class="headerlink" title="-r"></a>-r</h1><p>设置每<code>&lt;kbytes&gt;</code>时输出日志，需要和<code>-f</code>一起使用。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -f &lt;filenam&gt; -r &lt;kbytes&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="n"><a href="#n" class="headerlink" title="-n"></a>-n</h1><p>设置日志每次最大输出<code>&lt;count&gt;</code>行，需要和<code>-f</code>一起使用。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -f &lt;filenam&gt; -n &lt;count&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="b"><a href="#b" class="headerlink" title="-b"></a>-b</h1><p>加载日志缓冲区，<code>&lt;buffer&gt;</code>的值有<code>main</code>，<code>system</code>，<code>radio</code>，<code>events</code>，<code>crash</code>，<code>all</code>。默认<code>main</code>，<code>system</code>，<code>crash</code>。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -b &lt;buffer&gt;</span><br></pre></td></tr></table></figure></p>
<p>例，加载<code>radio</code>，<code>events</code>：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -b radio -b events</span><br></pre></td></tr></table></figure></p>
<h1 id="D"><a href="#D" class="headerlink" title="-D"></a>-D</h1><p>在不同的缓冲区日志之间添加分割线。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -D</span><br></pre></td></tr></table></figure></p>
<h1 id="c"><a href="#c" class="headerlink" title="-c"></a>-c</h1><p>清除缓冲区日志，并退出。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -c</span><br></pre></td></tr></table></figure></p>
<h1 id="d"><a href="#d" class="headerlink" title="-d"></a>-d</h1><p>打印缓冲区日志，并退出。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -d</span><br></pre></td></tr></table></figure></p>
<h1 id="g"><a href="#g" class="headerlink" title="-g"></a>-g</h1><p>打印缓冲区大小。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -g</span><br></pre></td></tr></table></figure></p>
<h1 id="G"><a href="#G" class="headerlink" title="-G"></a>-G</h1><p>设置缓冲区大小。<code>&lt;size&gt;</code>，以<code>K</code>结尾，单位 kb，以<code>M</code>结尾，单位 MB。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -G &lt;size&gt;</span><br></pre></td></tr></table></figure></p>
<p>例：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -G 100K</span><br></pre></td></tr></table></figure></p>
<h1 id="t"><a href="#t" class="headerlink" title="-t"></a>-t</h1><p>包含 <code>-d</code> 功能，也就是打印后退出。<br>打印最近<code>&lt;size&gt;</code>行日志。<br>打印从<code>&#39;&lt;time&gt;&#39;</code>时间开始的日志。时间格式<code>MM-DD hh:mm:ss.mmm</code>。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -t &lt;size&gt;</span><br><span class="line">adb logcat -t '&lt;time&gt;'</span><br></pre></td></tr></table></figure></p>
<p>例1，打印最近1000行日志，并且过滤出 tag 为 sth0 的日志：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -t 1000 -s sth0:V</span><br></pre></td></tr></table></figure></p>
<p>例2，打印 08-02 17:51:20.145  开始的日志<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -t '08-02 17:51:20.145'</span><br></pre></td></tr></table></figure></p>
<h1 id="T"><a href="#T" class="headerlink" title="-T"></a>-T</h1><p>不包含 <code>-d</code> 功能，也就是打印后不退出，会持续输出。<br>打印最近<code>&lt;size&gt;</code>行日志。<br>打印从<code>&#39;&lt;time&gt;&#39;</code>时间开始的日志。时间格式<code>MM-DD hh:mm:ss.mmm</code>。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -T &lt;size&gt;</span><br><span class="line">adb logcat -T '&lt;time&gt;'</span><br></pre></td></tr></table></figure></p>
<p>例1，打印最近1000行日志，并且过滤出 tag 为 sth0 的日志：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -T 1000 -s sth0:V</span><br></pre></td></tr></table></figure></p>
<p>例2，打印 08-02 17:51:20.145  开始的日志<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -T '08-02 17:51:20.145'</span><br></pre></td></tr></table></figure></p>
<h1 id="L"><a href="#L" class="headerlink" title="-L"></a>-L</h1><p>打印最后一次重启之前的日志。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -L</span><br></pre></td></tr></table></figure></p>
<h1 id="B"><a href="#B" class="headerlink" title="-B"></a>-B</h1><p>输出日志的二进制格式。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -B</span><br></pre></td></tr></table></figure></p>
<h1 id="S"><a href="#S" class="headerlink" title="-S"></a>-S</h1><p>输出统计信息。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -S</span><br></pre></td></tr></table></figure></p>
<h1 id="P"><a href="#P" class="headerlink" title="-P"></a>-P</h1><p>设置黑白名单。可以对 <code>UID</code>，<code>PID</code>设置，也可以<code>UID/PID</code>一起设置。设置黑名单，前缀<code>~</code>。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -P '&lt;list&gt;...'</span><br></pre></td></tr></table></figure></p>
<p>例1，对<code>UID</code> 520881设置。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat - P '520881'</span><br></pre></td></tr></table></figure></p>
<p>例2，对<code>PID</code> 520881 设置黑名单。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -P '~/520881'</span><br></pre></td></tr></table></figure></p>
<p>例3，对<code>UID</code> 520881，对<code>PID</code> 78883，对 <code>UID/PID</code> 52189/8883 设置黑名单。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -P `~520881 ~/78883 ~52189/8883'</span><br></pre></td></tr></table></figure></p>
<h1 id="p"><a href="#p" class="headerlink" title="-p"></a>-p</h1><p>查看黑白名单。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -p</span><br></pre></td></tr></table></figure></p>
<h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><p>利用 shell 重定向输出日志到指定文件。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>输出sth0:V到桌面1.log文件</span><br><span class="line">adb logcat -s sth0:V &gt;~/Desktop/1.log</span><br></pre></td></tr></table></figure></p>
<p>利用 <code>grep</code> 过滤日志。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 过滤日志包含 verbose 的日志</span><br><span class="line">adb logcat | grep verbose </span><br><span class="line"><span class="meta">#</span> 过滤日志包含 verbose 的日志，忽略大小写</span><br><span class="line">adb logcat | grep -i verbose</span><br><span class="line"><span class="meta">#</span> 过滤符合正则表达式 sth. 的日志</span><br><span class="line">adb logcat | grep -e sth.</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> log </tag>
            
            <tag> logcat </tag>
            
            <tag> adb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 的复制和粘贴功能]]></title>
      <url>http://www.kennethyo.me/2017/07/30/untitled-1501415073699/</url>
      <content type="html"><![CDATA[<p>Android 复制和粘贴功能，需要调用系统服务<code>ClipboardManager</code>来实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClipboardManager mClipboardManager = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);</span><br></pre></td></tr></table></figure></p>
<p>复制功能，首先要构造一个<code>ClipData</code>对象，并且把要复制的数据和 MIME type 赋值给<code>ClipData</code>，然后在把<code>ClipData</code>传入<code>mClipboardManager.setPrimaryClip()</code>方法，此时，我们完成了一个复制。</p>
<p>粘贴功能，调用<code>mClipboardManager.hasPrimaryClip()</code>来判断粘贴板是否有数据，然后通过<code>mClipboardManager.getPrimaryClipDescription().hasMimeType()</code>判断当前粘贴板的数据 MIME type是不是APP支持的，如果是APP支持的，获取数据<code>mClipboardManager.getPrimaryClip()</code>。</p>
<p>下面就文本，URI，Intent的复制粘贴，分别提供一个demo。</p>
<h1 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h1><p>复制：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个参数，是描述复制的内容，也可以和内容一样。</span></span><br><span class="line">ClipData clipData = ClipData.newPlainText(<span class="string">"copy from demo"</span>, mEtCopy.getText());</span><br><span class="line">mClipboardManager.setPrimaryClip(clipData);</span><br></pre></td></tr></table></figure></p>
<p>粘贴：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 粘贴板有数据，并且是文本</span></span><br><span class="line"><span class="keyword">if</span> (mClipboardManager.hasPrimaryClip()</span><br><span class="line">        &amp;&amp; mClipboardManager.getPrimaryClipDescription().hasMimeType(ClipDescription.MIMETYPE_TEXT_PLAIN)) &#123;</span><br><span class="line">    ClipData.Item item = mClipboardManager.getPrimaryClip().getItemAt(<span class="number">0</span>);</span><br><span class="line">    CharSequence text = item.getText();</span><br><span class="line">    <span class="keyword">if</span> (text == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mEtPaste.setText(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="URI-复制"><a href="#URI-复制" class="headerlink" title="URI 复制"></a>URI 复制</h1><p>复制：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Uri uri = Uri.parse(uriStr);</span><br><span class="line">ClipData clipData = ClipData.newUri(getContentResolver(), <span class="string">"copy from demo"</span>, uri);</span><br><span class="line">mClipboardManager.setPrimaryClip(clipData);</span><br></pre></td></tr></table></figure></p>
<p>粘贴：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mClipboardManager.hasPrimaryClip()</span><br><span class="line">        &amp;&amp; mClipboardManager.getPrimaryClipDescription().hasMimeType(ClipDescription.MIMETYPE_TEXT_URILIST)) &#123;</span><br><span class="line">    ClipData.Item item = mClipboardManager.getPrimaryClip().getItemAt(<span class="number">0</span>);</span><br><span class="line">    Uri uri = item.getUri();</span><br><span class="line">    <span class="keyword">if</span> (uri == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mTvScheme.setText(uri.getScheme());</span><br><span class="line">    mTvUri.setText(uri.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Intent-复制"><a href="#Intent-复制" class="headerlink" title="Intent 复制"></a>Intent 复制</h1><p>复制：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, TextActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">ClipData clipData = ClipData.newIntent(<span class="string">"copy from demo"</span>, intent);</span><br><span class="line">mClipboardManager.setPrimaryClip(clipData);</span><br></pre></td></tr></table></figure></p>
<p>粘贴：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mClipboardManager.hasPrimaryClip()</span><br><span class="line">        &amp;&amp; mClipboardManager.getPrimaryClipDescription().hasMimeType(ClipDescription.MIMETYPE_TEXT_INTENT)) &#123;</span><br><span class="line">    ClipData.Item item = mClipboardManager.getPrimaryClip().getItemAt(<span class="number">0</span>);</span><br><span class="line">    Intent intent = item.getIntent();</span><br><span class="line">    <span class="keyword">if</span> (intent == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>复制粘贴功能的API并不难理解，如果想了解更多的功能，可以看<a href="https://developer.android.google.cn/guide/topics/text/copy-paste.html" target="_blank" rel="noopener">官方API指南</a>。<br><a href="https://github.com/KennethYo/CopyAndPasteDemo" target="_blank" rel="noopener">Demo地址</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> copy </tag>
            
            <tag> paste </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[把编译信息放在 Launch Icon 上]]></title>
      <url>http://www.kennethyo.me/2017/04/05/untitled-1491391624769/</url>
      <content type="html"><![CDATA[<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fec0ms62mnj3053052wew.jpg" alt="enter image description here|center"><br>首先上一张效果吧！这是我们CI集成测试包后 icon。在icon上分别显示了版本号、build 时间、git id。</p>
<p>如何实现的呢？看下面。</p>
<p>首先，我们要有 <code>ghostscript</code> 和 <code>imagemagick</code> 两个环境。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ghostscript</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install imagemagick</span><br></pre></td></tr></table></figure>
<p>其次，在编译 apk 之前，执行下面的 shell，就会主动替换为新icon。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line">#引入环境变量</span><br><span class="line">export PATH=$PATH:/usr/local/bin</span><br><span class="line">#读取版本name</span><br><span class="line">source $WORKSPACE/gradle.properties</span><br><span class="line">shortVersion=$&#123;VERSION_NAME&#125;</span><br><span class="line">#编译时间</span><br><span class="line">createDate=`date +%m%d_%H:%M`</span><br><span class="line">#获取git id</span><br><span class="line">commit=`git rev-parse --short HEAD`</span><br><span class="line">bundleVersion=`git rev-list HEAD | wc -l | awk &apos;&#123;print $1&#125;&apos;`</span><br><span class="line">#获取icon路径数组</span><br><span class="line">resPath=&quot;$WORKSPACE/android-autoEasy/src/main/res&quot;</span><br><span class="line"></span><br><span class="line">mdpiPath=&quot;$&#123;resPath&#125;/drawable-mdpi/icon.png&quot;</span><br><span class="line">hdpiPath=&quot;$&#123;resPath&#125;/drawable-hdpi/icon.png&quot;</span><br><span class="line">xhdpiPath=&quot;$&#123;resPath&#125;/drawable-xhdpi/icon.png&quot;</span><br><span class="line">xxhdpiPath=&quot;$&#123;resPath&#125;/drawable-xxhdpi/icon.png&quot;</span><br><span class="line">iconPaths=($&#123;mdpiPath&#125; $&#123;hdpiPath&#125; $&#123;xhdpiPath&#125; $&#123;xxhdpiPath&#125;)</span><br><span class="line"></span><br><span class="line">echo</span><br><span class="line">echo &quot;*********************************************&quot;</span><br><span class="line">echo &quot;* $&#123;shortVersion&#125;_$&#123;bundleVersion&#125;_$&#123;commit&#125;&quot;</span><br><span class="line">echo &quot;*********************************************&quot;</span><br><span class="line">echo</span><br><span class="line">#把信息写到icon上</span><br><span class="line">function processIcon() &#123;</span><br><span class="line">    pngPath=$1</span><br><span class="line"></span><br><span class="line">    echo</span><br><span class="line">    echo &quot;*********************************************&quot;</span><br><span class="line">    echo &quot;* start ---&gt; $&#123;pngPath&#125;&quot;</span><br><span class="line">    echo &quot;*********************************************&quot;</span><br><span class="line">    echo</span><br><span class="line"></span><br><span class="line">    echo &quot;from -&gt; $&#123;pngPath&#125;&quot;</span><br><span class="line"></span><br><span class="line">    if [[ ! -f $&#123;pngPath&#125; ]]; then</span><br><span class="line">    echo &quot;can&apos;t find $&#123;pngPath&#125; &quot;</span><br><span class="line">    return;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    target_path=$&#123;pngPath&#125;</span><br><span class="line"></span><br><span class="line">    echo &quot;to -&gt; $&#123;target_path&#125;&quot;</span><br><span class="line"></span><br><span class="line">    width=`identify -format %w $&#123;pngPath&#125;`</span><br><span class="line">    echo &quot;width = $width&quot;</span><br><span class="line"></span><br><span class="line">    string=$&quot;\n&quot;</span><br><span class="line">    `echo convert -background &apos;#0008&apos; -fill white -gravity center -size $&#123;width&#125;x$&#123;width&#125; \</span><br><span class="line">    caption:&quot;$&#123;shortVersion&#125;$&#123;string&#125;$&#123;createDate&#125;$&#123;string&#125;$&#123;commit&#125;&quot; \</span><br><span class="line">    $&#123;pngPath&#125; +swap -gravity south -composite $&#123;target_path&#125;`</span><br><span class="line"></span><br><span class="line">    echo &quot;name = $&#123;shortVersion&#125;$&#123;string&#125;$&#123;createDate&#125;$&#123;string&#125;$&#123;commit&#125;&quot;</span><br><span class="line"></span><br><span class="line">    echo</span><br><span class="line">    echo &quot;*********************************************&quot;</span><br><span class="line">    echo &quot;* end &lt;--- $&#123;pngPath&#125;&quot;</span><br><span class="line">    echo &quot;*********************************************&quot;</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#判断是否已经安装了必须工具 imagemagick ghostscript</span><br><span class="line">echo `brew ls` |grep -q &quot;imagemagick&quot;</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    echo &quot;imagemagick installed &quot;</span><br><span class="line"></span><br><span class="line">    echo `brew ls` |grep -q &quot;ghostscript&quot;</span><br><span class="line">    if [ $? -eq 0 ]; then</span><br><span class="line">        echo &quot;ghostscript installed &quot;</span><br><span class="line"></span><br><span class="line">        for paths in $&#123;iconPaths[@]&#125;</span><br><span class="line">        do</span><br><span class="line">            processIcon $&#123;paths&#125;</span><br><span class="line">        done</span><br><span class="line"></span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line">echo</span><br><span class="line">echo &quot;*********************************************&quot;</span><br><span class="line">echo &quot;* run script end&quot;</span><br><span class="line">echo &quot;*********************************************&quot;</span><br><span class="line">echo</span><br></pre></td></tr></table></figure></p>
<p>最后，就是编译 apk 啦！</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git-flow 学习总结]]></title>
      <url>http://www.kennethyo.me/2017/03/06/untitled-1488794629968/</url>
      <content type="html"><![CDATA[<p>git 作为现在最为主流的版本管理工具，优点有很多，其中最为显著的一点就是分支管理。</p>
<p>作为一款优秀的版本管理工具，我在日常开发中也在使用，固定分支有两个，分别是 <code>master</code> 和 <code>develop</code> ，日常开发和测试都是针对 <code>develop</code>进行，这造成一个问题就是，每当上线版本发现bug的时候，<code>develop</code> 分支已经有下个版本正在开发的代码，从 tag 创建出来的分支合并到<br><code>master</code> 后，难以合并到 <code>develop</code> 。</p>
<p>基于上面的问题，上网搜索了 git 的工作流，其中讲的最多的就是 <code>git flow</code> ，下面就将 <code>git flow</code> 的学习结果总结如下。</p>
<h1 id="发图镇楼"><a href="#发图镇楼" class="headerlink" title="发图镇楼"></a>发图镇楼</h1><p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fdd9shg2uoj30yg1cpn9p.jpg" alt="enter image description here|center"></p>
<h1 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h1><p>主分支：<br><code>master</code>  发布到线上的代码应该和这个分支一致。<br><code>develop</code> 日常开发分支，其他分支基本围绕这个分支。</p>
<p>临时性分支：<br><code>feature/*</code> 新功能研发分支，从 <code>develop</code> 创建，研发完成，合并到 <code>develop</code>。<br><code>release/*</code> 预发布分支，从 <code>develop</code> 创建，进行测试，并修复 bugs。最终会合并到 <code>develop</code> 和 <code>master</code>分支。<br><code>hotfix/*</code>  紧急修复分支，从 <code>master</code> 创建，最终会合并到 <code>develop</code> 和 <code>master</code>分支。</p>
<h1 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h1><p>tag 永远只在 <code>master</code> 分支创建。</p>
<p><code>release/*</code> 分支合并到 <code>master</code> 之后，推送 <code>master</code> 到远端，然后创建 <code>tag</code> , 推送 <code>tag</code>到远端。<br><code>hotfix/*</code> 分支合并到 <code>master</code> 之后，推送 <code>master</code> 到远端，然后创建 <code>tag</code> , 推送 <code>tag</code>到远端。</p>
<h1 id="操作流"><a href="#操作流" class="headerlink" title="操作流"></a>操作流</h1><p>我们根据上面的理论，进行一次完整操作。</p>
<h2 id="创建-develop-分支"><a href="#创建-develop-分支" class="headerlink" title="创建 develop 分支"></a>创建 develop 分支</h2><p>新仓库默认是 <code>master</code> 分支，<code>master</code> 分支只作为发布版本，日常开发都要基于开发分支 <code>develop</code>。从 <code>master</code> 分支创建 <code>develop</code> 分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b develop master</span><br></pre></td></tr></table></figure></p>
<p>推送 <code>develop</code>分支，到远端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin develop</span><br></pre></td></tr></table></figure></p>
<h2 id="v0-1-0-开始开发"><a href="#v0-1-0-开始开发" class="headerlink" title="v0.1.0 开始开发"></a>v0.1.0 开始开发</h2><p>现在来开发第一个版本 <code>v0.1.0</code>，首先从 <code>develop</code> 创建分支 <code>feature/v0.1.0</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature/v0.1.0 develop</span><br></pre></td></tr></table></figure></p>
<p>推送到远端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin feature/v0.1.0</span><br></pre></td></tr></table></figure></p>
<p>各种 <code>v0.1.0</code>版本功能代码的提交…<br>…….</p>
<h2 id="v0-1-0-完成开发"><a href="#v0-1-0-完成开发" class="headerlink" title="v0.1.0 完成开发"></a>v0.1.0 完成开发</h2><p>开发完成后，将 <code>feature/v0.1.0</code> 合并到 <code>develop</code>  分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff feature/v0.1.0</span><br></pre></td></tr></table></figure></p>
<p><code>--no-ff</code> 参数的意思是不进行快速合并，<code>merge</code>命令默认会进行“快进式合并（fast-farward merge）”，直接将 <code>develop</code> 指向 <code>feature/v0.1.0</code>，这里使用<a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a>在<a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="noopener">Git分支管理策略</a>中的图片。<br><img src="https://ww2.sinaimg.cn/large/006tKfTcly1fdcxolq5hvj30dw0gu759.jpg" alt="Alt text|center|300x0"><br>加上<code>--no-ff</code> 参数后，合并的时候会生成一个新节点。可以保证版本演进的清晰。<br><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fdcxrpvc6lj306y0k63yz.jpg" alt="enter image description here|center|0x300"><br>推送到远端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin develop</span><br></pre></td></tr></table></figure></p>
<p>删除 <code>feature/v0.1.0</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -b feature/v0.1.0</span><br></pre></td></tr></table></figure></p>
<h2 id="预发布"><a href="#预发布" class="headerlink" title="预发布"></a>预发布</h2><p>开发完成之后，要进行测试，fix bugs。创建预发布分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b release/v0.1.0 develop</span><br><span class="line">git push origin release/v0.1.0</span><br></pre></td></tr></table></figure></p>
<p>各种测试，各种蹂躏，各种 fix bugs ……</p>
<h2 id="发布版本"><a href="#发布版本" class="headerlink" title="发布版本"></a>发布版本</h2><p>经过测试和修复，终于要上线了，合并 <code>release/v0.1.0</code> 到 <code>master</code> 和 <code>develop</code>：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#合并到master</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge -<span class="literal">-no</span><span class="literal">-ff</span> release/v0.<span class="number">1.0</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="comment">#打上tag</span></span><br><span class="line">git tag <span class="literal">-a</span> v0.<span class="number">1.0</span> <span class="literal">-m</span> <span class="string">"publish v0.1.0"</span></span><br><span class="line">git push origin v0.<span class="number">1.0</span></span><br><span class="line"><span class="comment">#合并到develop</span></span><br><span class="line">git checkout develop</span><br><span class="line">git merge -<span class="literal">-no</span><span class="literal">-ff</span> release/v0.<span class="number">1.0</span></span><br><span class="line">git push origin develop</span><br><span class="line"><span class="comment">#删除 release/v0.1.0</span></span><br><span class="line">git branch <span class="literal">-d</span> release/v0.<span class="number">1.0</span></span><br></pre></td></tr></table></figure></p>
<h2 id="出-bug-了"><a href="#出-bug-了" class="headerlink" title="出 bug 了"></a>出 bug 了</h2><p>代码上线之后，出 bug 是谁都不愿意看到的，但是难免会出的嘛。下面我们进行修复，下面我们从 <code>master</code> 创建 <code>hotfix/v0.1.0</code> 分支，进行修复工作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hotfix/v0.1.0 master</span><br><span class="line">git push origin hotfix/v0.1.0</span><br></pre></td></tr></table></figure></p>
<p>修复完成之后合并到 <code>master</code> 和 <code>develop</code> 分支：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#合并到master</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge -<span class="literal">-no</span><span class="literal">-ff</span> hotfix/v0.<span class="number">1.0</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="comment">#打上tag</span></span><br><span class="line">git tag <span class="literal">-a</span> v0.<span class="number">1.1</span> <span class="literal">-m</span> <span class="string">"publish v0.1.1"</span></span><br><span class="line">git push origin v0.<span class="number">1.1</span></span><br><span class="line"><span class="comment">#合并到develop</span></span><br><span class="line">git checkout develop</span><br><span class="line">git merge -<span class="literal">-no</span><span class="literal">-ff</span> hotfix/v0.<span class="number">1.0</span></span><br><span class="line">git push origin develop</span><br><span class="line"><span class="comment">#删除 hotfix/v0.1.0</span></span><br><span class="line">git branch <span class="literal">-d</span> hotfix/v0.<span class="number">1.0</span></span><br></pre></td></tr></table></figure></p>
<h1 id="利与弊"><a href="#利与弊" class="headerlink" title="利与弊"></a>利与弊</h1><p>各个分支，各司其职，清晰可控。</p>
<p>经常切换分支，容易进行误操作（在不对应的分支上进行提交，细心能够解决）。</p>
<h1 id="Git-flow-工具"><a href="#Git-flow-工具" class="headerlink" title="Git-flow 工具"></a>Git-flow 工具</h1><p>由 <code>git flow</code> 提出者 <a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">Vincent Driessen</a>开发的 <code>git flow</code>工具。</p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a><a href="http://github.com/mxcl/homebrew" target="_blank" rel="noopener">Homebrew</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git-flow</span><br></pre></td></tr></table></figure>
<h3 id="MacPorts"><a href="#MacPorts" class="headerlink" title="MacPorts"></a><a href="https://www.macports.org/" target="_blank" rel="noopener">MacPorts</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">port install git-flow</span><br></pre></td></tr></table></figure>
<h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a><a href="https://zh.wikipedia.org/wiki/Wget" target="_blank" rel="noopener">wget</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -q -O - https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh | sudo bash</span><br></pre></td></tr></table></figure>
<h3 id="cURL"><a href="#cURL" class="headerlink" title="cURL"></a><a href="https://zh.wikipedia.org/zh-cn/CURL" target="_blank" rel="noopener">cURL</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https://raw.github.com/nvie/gitflow/develop/contrib/gitflow-installer.sh</span><br><span class="line">sudo bash gitflow-installer.sh</span><br></pre></td></tr></table></figure>
<h2 id="操作流-1"><a href="#操作流-1" class="headerlink" title="操作流"></a>操作流</h2><p>在项目根目录初始化 <code>git flow</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow init</span><br></pre></td></tr></table></figure></p>
<p>会出现如下的一系列问题，都是设置各个分支前缀，直接回车默认值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Which branch should be used for bringing forth production releases?</span><br><span class="line">   - master</span><br><span class="line">Branch name for production releases: [master]</span><br><span class="line">Branch name for &quot;next release&quot; development: [develop]</span><br><span class="line"></span><br><span class="line">How to name your supporting branch prefixes?</span><br><span class="line">Feature branches? [feature/]</span><br><span class="line">Release branches? [release/]</span><br><span class="line">Hotfix branches? [hotfix/]</span><br><span class="line">Support branches? [support/]</span><br><span class="line">Version tag prefix? []</span><br></pre></td></tr></table></figure></p>
<p>初始化完成之后，当前分支会变成 <code>develop</code> 分支。</p>
<h3 id="v0-1-0-开始开发-1"><a href="#v0-1-0-开始开发-1" class="headerlink" title="v0.1.0 开始开发"></a>v0.1.0 开始开发</h3><p>输入如下命令，会从 <code>develop</code> 分支创建出 <code>feature/v0.1.0</code> 分支。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature start v0.1.0</span><br></pre></td></tr></table></figure></p>
<p>推送分支到远端：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git flow feature publish v0.<span class="number">1.0</span></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">git push origin feature/v0.<span class="number">1.0</span></span><br></pre></td></tr></table></figure></p>
<h3 id="v0-1-0-完成开发-1"><a href="#v0-1-0-完成开发-1" class="headerlink" title="v0.1.0 完成开发"></a>v0.1.0 完成开发</h3><p>输入如下命令，会把 <code>feature/v0.1.0</code> 分支合并到 <code>develop</code> 分支，并删除 <code>feature/v0.1.0</code>分支。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature finish v0.1.0</span><br></pre></td></tr></table></figure></p>
<h3 id="预发布-1"><a href="#预发布-1" class="headerlink" title="预发布"></a>预发布</h3><p>输入如下命令，会从 <code>develop</code> 分支创建出 <code>release/v0.1.0</code> 分支：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git flow release start v0.<span class="number">1.0</span></span><br><span class="line"><span class="comment">#推送到远端</span></span><br><span class="line">git flow release publish v0.<span class="number">1.0</span></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">git push origin release/v0.<span class="number">1.0</span></span><br></pre></td></tr></table></figure></p>
<h3 id="发布版本-1"><a href="#发布版本-1" class="headerlink" title="发布版本"></a>发布版本</h3><p>输入如下命令，会把 <code>release/v0.1.0</code> 分支合并到 <code>develop</code> 分支和 <code>master</code> 分支，并删除 <code>release/v0.1.0</code>分支。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow release finish v0.1.0</span><br></pre></td></tr></table></figure></p>
<h3 id="出-bug-了-1"><a href="#出-bug-了-1" class="headerlink" title="出 bug 了"></a>出 bug 了</h3><p>输入如下命令，会从 <code>master</code> 创建 <code>hotfix/v0.1.1</code> 分支。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow hotfix start v0.1.1</span><br></pre></td></tr></table></figure></p>
<p>修复完成，输入如下命令，会合分别合并到 <code>master</code> 和 <code>develop</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow hotfix finish v0.1.1</span><br></pre></td></tr></table></figure></p>
<h1 id="抄袭文献"><a href="#抄袭文献" class="headerlink" title="抄袭文献"></a>抄袭文献</h1><p>1，<a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html" target="_blank" rel="noopener">Git 工作流程</a><br>2，<a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="noopener">Git分支管理策略</a><br>3，<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">A successful Git branching model</a><br>4，<a href="https://github.com/nvie/gitflow" target="_blank" rel="noopener">gitflow</a><br>5，<a href="http://stormzhang.com/git/2014/01/29/git-flow/" target="_blank" rel="noopener">使用GIT FLOW管理开发流程</a><br>6，<a href="https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow" target="_blank" rel="noopener">git-flow 的工作流程</a></p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> git-flow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Travis 和 CircleCI 配置文件]]></title>
      <url>http://www.kennethyo.me/2016/11/08/untitled-1478588050831/</url>
      <content type="html"><![CDATA[<blockquote>
<p>以下都用 <a href="https://github.com/KennethYo/BrakeLight" target="_blank" rel="noopener"><code>BrakeLight</code></a> 项目举例。</p>
</blockquote>
<p>#<a href="https://circleci.com/" target="_blank" rel="noopener">Circleci</a><br>在项目目录中创建 <code>circle.yml</code> 文件，内容如下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">machine:</span></span><br><span class="line">  <span class="symbol">java:</span></span><br><span class="line">      <span class="symbol">version:</span> oraclejdk8</span><br><span class="line"></span><br><span class="line"><span class="symbol">dependencies:</span></span><br><span class="line">  <span class="symbol">pre:</span></span><br><span class="line">    - <span class="keyword">if</span> [ ! -d <span class="string">"/usr/local/android-sdk-linux/platforms/android-24"</span> ]; <span class="keyword">then</span> echo y <span class="params">| android update sdk --no-ui --all --filter "android-24"; fi</span></span><br><span class="line"><span class="params">    - <span class="keyword">if</span> [ ! -d "/usr/local/android-sdk-linux/build-tools/24.0.2" ]; <span class="keyword">then</span> echo y |</span> android update sdk --no-ui --all --filter <span class="string">"build-tools-24.0.2"</span>; fi</span><br><span class="line">    - <span class="keyword">if</span> [ ! -d <span class="string">"/usr/local/android_sdk/extras/android/m2repository/com/android/support/support-core-utils/24.2.1"</span> ]; <span class="keyword">then</span> echo y <span class="params">| android update sdk --no-ui --all --filter "extra-android-m2repository"; fi</span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params">test:</span></span><br><span class="line"><span class="params">  override:</span></span><br><span class="line"><span class="params">    - ./gradlew assembleRelease</span></span><br></pre></td></tr></table></figure></p>
<p>#<a href="https://travis-ci.org" target="_blank" rel="noopener">Travis</a><br>在项目目录中创建 <code>.travis.yml</code> 文件，内容如下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sudo:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">language:</span> android</span><br><span class="line"></span><br><span class="line"><span class="symbol">jdk:</span></span><br><span class="line">  - oraclejdk8</span><br><span class="line"></span><br><span class="line"><span class="symbol">android:</span></span><br><span class="line">  <span class="symbol">components:</span></span><br><span class="line">    - platform-tools</span><br><span class="line">    - tools</span><br><span class="line">    - build-tools-<span class="number">24.0</span>.<span class="number">2</span></span><br><span class="line">    - android-<span class="number">24</span></span><br><span class="line">    - extra-android-m2repository</span><br><span class="line">    - extra-android-support</span><br></pre></td></tr></table></figure></p>
<p>#其实还有<a href="https://app.shippable.com" target="_blank" rel="noopener">Shippable</a><br>国内访问速度比较慢，Android 支持的不好，放弃了。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自建私有 Maven 仓库]]></title>
      <url>http://www.kennethyo.me/2016/09/01/untitled-1472722428873/</url>
      <content type="html"><![CDATA[<p>项目组从2015年上半年全面切换到 AndroidStudio 进行开发，随着这1年多业务逻辑和代码逻辑的增长，导致项目  LibraryModule 由最初的3个增长到如今的8个。</p>
<p>代码量的增加必然导致编译的变慢，AndroidStudio 在编译项目时会先编译 LibraryModule 生成 aar 包，之后这些 aar 包会和 APPModule 进行集成编译，最终生成 APK。这个编译过程，第一次在5.0及以上手机安装，经常会出现6分钟以上的编译时间，5.0以下手机也有3分钟左右的编译时间，这些时间严重影响了工作效率！</p>
<p>考虑到 LibraryModule 是长期不会修改的代码，如果发布成 aar 加入到项目里，就可以节省下每次 Module 编译的时间。</p>
<p>如果能够像 compile 第三方 Library 那样引用我们的 Library ，岂不是又降低 Module 的耦合，又单独对 Library 增加了版本控制。第三方 Library  基本都是把 aar 发布到中央 Maven 对外提供引用，而我们的 Library 作为公司的商业项目，是不可能发布到中央 Maven 对外提供引用的，这就要求我们需要有自己的 Maven 服务。</p>
<p>私有 Maven 还会产生另一个好处，就是代理中央 Maven 仓库。例如，我们新加入了一个第三方库，导致每个人的 IDE 都需要从中央 Maven pull 库，而中国 GFW 的存在，导致中央 Maven 极其不稳定，经常 time out ，有了代理 Maven，只要代理 maven pull 一次库，每个人就不必从中央 Maven pull库了。</p>
<p>这里我们是用 Docker 作为容器，在里面搭建的 Sonatype Nexus 私有 Maven 仓库。使用 Docker 的好处是可以把环境独立出来不会和服务器其他服务产生冲突，卸载也简单。</p>
<h1 id="安装-Docker-并运行-Nexus"><a href="#安装-Docker-并运行-Nexus" class="headerlink" title="安装 Docker 并运行 Nexus"></a>安装 Docker 并运行 Nexus</h1><p>1，下载 并安装 Docker，<a href="https://www.docker.com/products/docker#/mac" target="_blank" rel="noopener">传送门</a></p>
<p>2，在 Terminal 中输入<code>docker -v</code>，如果显示版本号，说明安装后环境是没有问题的，如下是我显示的版本号：<br><code>Docker version 1.12.0, build 8eab29e</code></p>
<p>3，在 Terminal 输入<code>docker pull sonatype/nexus</code>进行下载 nexus 镜像。<br>下载过程中，会显示下载进度。如果比较慢或者超时，请在 Docker 里设置 mirror。如下图，我配置了灵雀加速和阿里云加速。</p>
<p><img src="http://ww1.sinaimg.cn/large/72f96cbajw1f7e4dnn8xcj20l40u60w6.jpg" alt="这里写图片描述"><br>灵雀加速：<a href="http://houchaohann.m.alauda.cn" target="_blank" rel="noopener">http://houchaohann.m.alauda.cn</a><br>阿里云加速：<a href="https://3wky8dz8.mirror.aliyuncs.com" target="_blank" rel="noopener">https://3wky8dz8.mirror.aliyuncs.com</a> </p>
<p>下载成功后显示如下图：<br><img src="http://ww4.sinaimg.cn/large/72f96cbajw1f7e4gjbjvbj20g306kjs1.jpg" alt></p>
<p>4，在 Terminal 中输入<code>docker run -d -p 8081:8081 --name  yiche sonatype/nexus:oss</code>来创建一个名叫 yiche 的容器，占用端口8081。</p>
<p><img src="http://ww3.sinaimg.cn/large/72f96cbajw1f7e4kafrkcj20lw01bdg3.jpg" alt="这里写图片描述"></p>
<p>5，在 Terminal 中输入<code>docker ps -a</code>查看容器</p>
<p><img src="http://ww1.sinaimg.cn/large/72f96cbajw1f7e4quvlv0j20q401sglu.jpg" alt="这里写图片描述"></p>
<p>6，浏览器里输入<a href="http://localhost:8081/" target="_blank" rel="noopener">http://localhost:8081/</a>，如果显示如下界面，证明 Nexus 搭建成功。</p>
<p><img src="http://ww4.sinaimg.cn/large/72f96cbajw1f7e4x3tmhej21kw0zkk21.jpg" alt="这里写图片描述"></p>
<p>7，一些常用指令：<br><code>docker start yiche</code>开始运行yiche 容器<br><code>docker restart yiche</code>c运 重新行yiche容器<br><code>docker stop yiche</code>停止运行yiche容器<br><code>docker rm yiche</code>删除yiche容器</p>
<h1 id="Nexus-使用"><a href="#Nexus-使用" class="headerlink" title="Nexus 使用"></a>Nexus 使用</h1><p>点击右上角<code>login</code>登录，默认账户<code>admin</code>，默认密码<code>admin123</code> 。</p>
<p>点击左侧栏目的<code>Repositories</code>，显示Nexus 默认已经有的仓库，如下图：</p>
<p><img src="http://ww1.sinaimg.cn/large/72f96cbajw1f7e5tldqexj21kw0zkwrs.jpg" alt="这里写图片描述"></p>
<h2 id="创建一个私有仓库"><a href="#创建一个私有仓库" class="headerlink" title="创建一个私有仓库"></a>创建一个私有仓库</h2><p>1，点击<code>add</code>，选择<code>Hosted Repository</code></p>
<p>2，在下方输入<code>Repository ID</code>和<code>Repository Name</code>，这里我分别输入的是<code>demo</code>和<code>Demo</code>，这里可以换成你自己的。</p>
<p>3，部署策略<code>Deployment Policy</code>选择为<code>Allow Redeploy</code>允许重新部署。</p>
<p>4，点击<code>save</code>保存，在上方列表中就会显示完成的仓库信息，最后一列<code>Repository Path</code>就是仓库的地址。</p>
<p>如下图：<br><img src="http://ww1.sinaimg.cn/large/72f96cbajw1f7e625xn92j21kw0zkdsb.jpg" alt="这里写图片描述"></p>
<p>注：如果在<code>Repository Policy</code>选择<code>snapshot</code>，仓库就是快照版仓库。</p>
<h2 id="代理仓库"><a href="#代理仓库" class="headerlink" title="代理仓库"></a>代理仓库</h2><p>这里我是代理的 jcenter，因为这是 Android  Studio 的默认仓库。</p>
<p>1，点击<code>add</code>，选择<code>Proxy Repository</code></p>
<p>2，在下方输入<code>Repository ID</code>和<code>Repository Name</code>，这里我分别输入的是<code>jcenter</code>和<code>Jcenter</code>，因为代理的就是 jcenter 哈。</p>
<p>3，在<code>Remote Storage Location</code>输入代理仓库的仓库地址<code>http://jcenter.bintray.com/</code>。</p>
<p>4，点击<code>save</code>保存，在上方列表中就会显示完成的仓库信息，最后一列<code>Repository Path</code>就是仓库的地址。</p>
<p>如下图：<br><img src="http://ww3.sinaimg.cn/large/72f96cbajw1f7e6iqpczrj21kw0zktlr.jpg" alt="这里写图片描述"></p>
<p>其实在我们项目里并没有新创建一个仓库，而是直接用的默认<code>Release</code>和<code>Snapshot</code>。</p>
<p><img src="http://ww2.sinaimg.cn/large/72f96cbajw1f7e6n006u5j21ji02sgn0.jpg" alt="这里写图片描述"></p>
<h1 id="Android-Studio-中上传-Library-Module-到私有-maven"><a href="#Android-Studio-中上传-Library-Module-到私有-maven" class="headerlink" title="Android Studio 中上传 Library Module 到私有 maven"></a>Android Studio 中上传 Library Module 到私有 maven</h1><h2 id="上传到-Maven"><a href="#上传到-Maven" class="headerlink" title="上传到 Maven"></a>上传到 Maven</h2><p>因为，Module比较多，我在项目根目录里写了一个 gradle 文件<code>gradle_mvn_push.gradle</code>来上传。代码如下：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'maven'</span></span><br><span class="line"><span class="comment">//release 地址</span></span><br><span class="line"><span class="keyword">def</span> RELEASE_REPOSITORY_URL = <span class="string">"http://192.168.4.53:32770/content/repositories/releases/"</span></span><br><span class="line"><span class="comment">//snapshots 地址</span></span><br><span class="line"><span class="keyword">def</span> SNAPSHOT_REPOSITORY_URL = <span class="string">"http://192.168.4.53:32770/content/repositories/snapshots/"</span></span><br><span class="line"><span class="comment">//判断 VERSION_NAME 如果以`-SHAPSHOT`结尾,则上传地址为 snapshot 地址</span></span><br><span class="line"><span class="keyword">def</span> REPOSITORY_URL = VERSION_NAME.endsWith(<span class="string">"-SNAPSHOT"</span>) ? SNAPSHOT_REPOSITORY_URL : RELEASE_REPOSITORY_URL;</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"groupId = %s\t\nartifactId = %s\t\nversion = %s\t\nrepository = %s\t\n"</span>, GROUP, POM_ARTIFACT_ID, VERSION_NAME, REPOSITORY_URL)</span><br><span class="line"></span><br><span class="line">afterEvaluate &#123; project -&gt;</span><br><span class="line">    uploadArchives &#123;</span><br><span class="line">        repositories.mavenDeployer &#123;</span><br><span class="line">            pom.groupId = GROUP</span><br><span class="line">            pom.artifactId = POM_ARTIFACT_ID</span><br><span class="line">            pom.version = VERSION_NAME</span><br><span class="line">            repository(<span class="string">url:</span> REPOSITORY_URL) &#123;</span><br><span class="line">                authentication(<span class="string">userName:</span> NEXUS_USERNAME, <span class="string">password:</span> NEXUS_PASSWORD)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    task androidSourcesJar(<span class="string">type:</span> Jar) &#123;</span><br><span class="line">        classifier = <span class="string">'sources'</span></span><br><span class="line">        from android.sourceSets.main.java.sourceFiles</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    artifacts &#123;</span><br><span class="line">        archives androidSourcesJar</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在你要上传 module 的<code>build.gradle</code> 文件引入。<br>如下图是我们换肤 Module 的 <code>build.gradle</code>：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.library'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion Integer.valueOf(COMPILE_SDK_VERSION)</span><br><span class="line">    buildToolsVersion BUILD_TOOLS_VERSION</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion MIN_SDK_VERSION</span><br><span class="line">        targetSdkVersion TARGET_SDK_VERSION</span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br><span class="line">    compile SUPPORT_APPCOMPAT_V7</span><br><span class="line">    compile SUPPORT_CARDVIEW_V7</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ext.GROUP=<span class="string">"com.yiche"</span></span><br><span class="line">ext.VERSION_NAME=<span class="string">"1.1.0-SNAPSHOT"</span></span><br><span class="line">ext.POM_ARTIFACT_ID=<span class="string">"changeskin"</span></span><br><span class="line"></span><br><span class="line">apply <span class="string">from:</span> <span class="string">"$&#123;project.rootDir&#125;/gradle_mvn_push.gradle"</span></span><br></pre></td></tr></table></figure></p>
<p>这里请关注下面的代码，<code>GROUP</code>，<code>VERSION_NAME</code>，<code>POM_ARTIFACT_ID</code>和最后一行引入我们前面写的<code>gradle_mvn_push.gradle</code>。</p>
<p><code>GROUP</code>一般代表了你的组织名称，例如我的<code>com.yiche</code><br><code>POM_ARTIFACT_ID</code>Library 的简称。<br><code>VERSION_NAME</code>版本号，如果有<code>-SNAPSHOT</code>表示是快照版。</p>
<p>上面这三个也就组成了我们平常看见的引依赖 <code>com.yiche:changeskin:1.1.0-SNAPSHOT</code></p>
<h2 id="引用私有-Maven"><a href="#引用私有-Maven" class="headerlink" title="引用私有 Maven"></a>引用私有 Maven</h2><p>下面就直接上一段代码吧，这是项目根目录的<code>build.gradle</code>里面修改了 maven 仓库的地址。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.1.3'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line"></span><br><span class="line">    repositories &#123;</span><br><span class="line"><span class="comment">//        jcenter()</span></span><br><span class="line">        <span class="comment">// 私有 release 地址</span></span><br><span class="line">        maven&#123;</span><br><span class="line">            url <span class="string">"http://192.168.4.53:32770/content/repositories/releases/"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 私有 snapshot 地址</span></span><br><span class="line">        maven&#123;</span><br><span class="line">            url <span class="string">"http://192.168.4.53:32770/content/repositories/snapshots/"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//jcenter 代理</span></span><br><span class="line">        maven&#123;</span><br><span class="line">            url <span class="string">"http://192.168.4.53:32770/content/repositories/jcenter/"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// maven 代理</span></span><br><span class="line">        maven&#123;</span><br><span class="line">            url <span class="string">"http://192.168.4.53:32770/content/repositories/central/"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(<span class="string">type:</span> Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好的，到这里就算结束了，后面这部分写的比较少，有问题留言啦。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nexus </tag>
            
            <tag> maven </tag>
            
            <tag> jcenter </tag>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TextUtils方法介绍]]></title>
      <url>http://www.kennethyo.me/2016/07/06/2016-07-06/</url>
      <content type="html"><![CDATA[<p>把一个<code>List&lt;String&gt;</code>输出成<code>a,b,c</code>这种形式，我们项目里面提供了一个这样的工具类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static String getString(List&lt;String&gt; list) &#123;</span><br><span class="line">        if (CollectionsWrapper.isEmpty(list)) return null;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        int size = list.size();</span><br><span class="line">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">            sb.append(list.get(i));</span><br><span class="line"></span><br><span class="line">            if (i != size - 1) &#123;</span><br><span class="line">                sb.append(&quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>方法肯定是多种多样的，但是<code>Android SDK</code>在<code>TextUtils</code>里面就有提供了一个方法<code>join</code>，可以达到效果。</p>
<p>平常我开发用<code>TextUtils</code>中最多的方法分别是<code>isEmpty</code>和<code>equals</code>。其他方法了解并不多，或者不了解，下面我们开始介绍一下<code>TextUtils</code>中的方法（注：方法重载只介绍一种，隐藏和私有方法没有介绍）：</p>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>Demo 地址：<a href="https://github.com/KennethYo/TextUtilsDemo" target="_blank" rel="noopener">传送门</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private String mWords1 = &quot;这句话很长很长，真的很长很长，长的不得了，长的不要不要的，长...长长...chang...chang................&quot;;</span><br><span class="line">private String mWords2 = &quot;Andy, Bob, Charles, David, Andy, Bob, Charles, David, Andy, Bob, Charles, David, Andy, Bob, Charles, David, Andy, Bob, Charles, David&quot;;</span><br><span class="line">//把“很长”设置为红色背景</span><br><span class="line">mSpanny1 = new Spanny(mWords1).findAndSpan(&quot;很长&quot;, new Spanny.GetSpan() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object getSpan() &#123;</span><br><span class="line">                return new BackgroundColorSpan(Color.RED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">//把“Bob”设置为红色背景</span><br><span class="line">mSpanny2 = new Spanny(mWords2).findAndSpan(&quot;Bob&quot;, new Spanny.GetSpan() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object getSpan() &#123;</span><br><span class="line">                return new BackgroundColorSpan(Color.GREEN);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="commaEllipsize"><a href="#commaEllipsize" class="headerlink" title="commaEllipsize"></a>commaEllipsize</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static CharSequence commaEllipsize(CharSequence text,</span><br><span class="line">                                              TextPaint p, float avail,</span><br><span class="line">                                              String oneMore,</span><br><span class="line">                                              String more)</span><br></pre></td></tr></table></figure>
<p>例如<code>Andy, Bob, Charles, David</code>这样的句子，修改为能够在一行<code>avail</code>宽度显示。发回结果例如<br><code>Andy, Bob, 1 more</code>或<code>Andy, Bob, 2 more</code>。<br>注意：more 中的数字要有<code>%d</code>来format，来显示不同的数字。<code>text</code>中必须用英文逗号分隔。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CharSequence output = TextUtils.commaEllipsize(mWords2, mTextView.getPaint(), mScreenWidth, &quot;1 more&quot;, &quot;%d more&quot;);</span><br></pre></td></tr></table></figure>
<h1 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static CharSequence concat(CharSequence... text)</span><br></pre></td></tr></table></figure>
<p>text 为可变参数，可以将传入的<code>CharSequence</code>组成一个<code>CharSequence</code>，并保留原有的<code>Span</code>。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CharSequence charSequence = TextUtils.concat(mSpanny1, mSpanny2);</span><br><span class="line">                mOutputView.setText(charSequence);</span><br></pre></td></tr></table></figure>
<h1 id="copySpansFrom"><a href="#copySpansFrom" class="headerlink" title="copySpansFrom"></a>copySpansFrom</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static void copySpansFrom(Spanned source, int start, int end,</span><br><span class="line">                                     Class kind,</span><br><span class="line">                                     Spannable dest, int destoff)</span><br></pre></td></tr></table></figure>
<p>从<code>source</code>中<code>start</code>到<code>end</code> 中的<code>span</code>复制到<code>dest</code>中，<code>destoff</code>是偏移量。这个方法在<code>concat</code>中有用到。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String words = mWords1 + mWords2;</span><br><span class="line">mTextView.setText(words);</span><br><span class="line">mTextView.append(&quot;\n\n&quot;);</span><br><span class="line">mTextView.append(mSpanny2);</span><br><span class="line"></span><br><span class="line">SpannableString ss = new SpannableString(words);</span><br><span class="line">TextUtils.copySpansFrom(mSpanny2, 0, mSpanny2.length(), Object.class, ss, mWords1.length());</span><br><span class="line"></span><br><span class="line">mOutputView.setText(ss);</span><br></pre></td></tr></table></figure>
<h1 id="dumpSpans"><a href="#dumpSpans" class="headerlink" title="dumpSpans"></a>dumpSpans</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void dumpSpans(CharSequence cs, Printer printer, String prefix)</span><br></pre></td></tr></table></figure>
<p>打印<code>cs</code>中的<code>Span</code>，<code>prefix</code>会在打印每个<code>Span</code>开始出现。<code>printer</code>，可以用<code>LogPrinter</code>，这样就可以打印在 log 里。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TextUtils.dumpSpans(mSpanny1, new LogPrinter(Log.INFO, &quot;kenneth&quot;), &quot;yo&quot;);</span><br></pre></td></tr></table></figure>
<p>Log日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">07-01 14:53:20.229 9835-9835/me.kenneth.textutildemo I/kenneth: yo很长: 4189d0d0 android.text.style.BackgroundColorSpan (3-5) fl=#33</span><br><span class="line">07-01 14:53:20.229 9835-9835/me.kenneth.textutildemo I/kenneth: yo很长: 4189d3a8 android.text.style.BackgroundColorSpan (5-7) fl=#33</span><br><span class="line">07-01 14:53:20.229 9835-9835/me.kenneth.textutildemo I/kenneth: yo很长: 4189d5b8 android.text.style.BackgroundColorSpan (10-12) fl=#33</span><br><span class="line">07-01 14:53:20.230 9835-9835/me.kenneth.textutildemo I/kenneth: yo很长: 4189d728 android.text.style.BackgroundColorSpan (12-14) fl=#33</span><br></pre></td></tr></table></figure>
<h1 id="ellipsize"><a href="#ellipsize" class="headerlink" title="ellipsize"></a>ellipsize</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static CharSequence ellipsize(CharSequence text,</span><br><span class="line">                                         TextPaint paint,</span><br><span class="line">                                         float avail, TruncateAt where,</span><br><span class="line">                                         boolean preserveLength,</span><br><span class="line">                                         EllipsizeCallback callback)</span><br></pre></td></tr></table></figure>
<p>相当于 <code>TextView</code> 的 xml 中<code>ellipsize</code>，这里可以回调省略范围的 <code>index</code>，同时也可用通过<code>preserveLength</code>，设置返回的 <code>CharSequence</code> 的长度为原始长度还是省略后的长度，这里利用的”零宽不换行空格符”来占位，<code>where</code>参数可以用<code>TextUtils.TruncateAt.START</code>，<code>TextUtils.TruncateAt.END</code>，<code>TextUtils.TruncateAt.MIDDLE</code>和<code>TextUtils.TruncateAt.MARQUEE</code>，分别是开始，结尾，中间和跑马灯。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CharSequence ellipsize = TextUtils.ellipsize(mWords2, mTextView.getPaint(), mScreenWidth, TextUtils.TruncateAt.START, true, new TextUtils.EllipsizeCallback() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void ellipsized(int i, int i1) &#123;</span><br><span class="line">                        Log.i(TAG, &quot;被省略范围 &quot; + i + &quot; &quot; + i1);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static boolean equals(CharSequence a, CharSequence b)</span><br></pre></td></tr></table></figure>
<p>比较字符串是否相等，可以看一下源码，如果是相同文本内容，但是<code>span</code>不同，也可以比较为相同。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TextUtils.equals(mWords1, mSpanny1)</span><br></pre></td></tr></table></figure>
<h1 id="expandTemplate"><a href="#expandTemplate" class="headerlink" title="expandTemplate"></a>expandTemplate</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public static CharSequence expandTemplate(CharSequence template,</span><br><span class="line">                                              CharSequence... values)</span><br></pre></td></tr></table></figure>
<p>替换<code>template</code>当中的<code>^1`</code> ^2<code>等为</code>values`中相应的值，注意：不能超过9个，9个以上会抛出异常。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String template = &quot;This is a ^1 of the ^2 broadcast ^3.&quot;;</span><br><span class="line">                mTextView.setText(template);</span><br><span class="line"></span><br><span class="line">                CharSequence expandTemplate = TextUtils.expandTemplate(template, &quot;test&quot;, &quot;emergency&quot;, &quot;system&quot;);</span><br></pre></td></tr></table></figure>
<h1 id="getCapsMode"><a href="#getCapsMode" class="headerlink" title="getCapsMode"></a>getCapsMode</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static int getCapsMode(CharSequence cs, int off, int reqModes)</span><br></pre></td></tr></table></figure>
<p>这个方法不知道怎么用，求留言赐教。</p>
<h1 id="getChars"><a href="#getChars" class="headerlink" title="getChars"></a>getChars</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public static void getChars(CharSequence s, int start, int end,</span><br><span class="line">                                char[] dest, int destoff)</span><br></pre></td></tr></table></figure>
<p>分别各自调用 <code>CharSequence</code>的 <code>getChars</code>实现。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char[] buffer = new char[5];</span><br><span class="line">                TextUtils.getChars(mWords1, 2, 4, buffer, 0);</span><br></pre></td></tr></table></figure>
<h1 id="getLayoutDirectionFromLocale"><a href="#getLayoutDirectionFromLocale" class="headerlink" title="getLayoutDirectionFromLocale"></a>getLayoutDirectionFromLocale</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static int getLayoutDirectionFromLocale(Locale locale)</span><br></pre></td></tr></table></figure>
<p>根据传入的 <code>local</code>获取当前的阅读习惯（例如，汉语习惯是左到右，希伯来语是右到左），具体可以看这篇文章，<a href="http://droidyue.com/blog/2014/07/07/support-rtl-in-android/index.html" target="_blank" rel="noopener">http://droidyue.com/blog/2014/07/07/support-rtl-in-android/index.html</a></p>
<h1 id="getOffsetAfter"><a href="#getOffsetAfter" class="headerlink" title="getOffsetAfter"></a>getOffsetAfter</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static int getOffsetAfter(CharSequence text, int offset)</span><br></pre></td></tr></table></figure>
<p>获取文本之后的偏移量 结合方法里的内容看比较容易,方法里面的<code>Unicode</code>都是我们所谓的非法字符。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mTextView.setText(mWords1);</span><br><span class="line">mTextView.append(&quot;\n\n&quot;);</span><br><span class="line">mWords1 = mWords1.replace(&quot;很&quot;, &quot;\uD800&quot;);</span><br><span class="line">mWords1 = mWords1.replace(&quot;长&quot;, &quot;\uDFFF&quot;);</span><br><span class="line">mTextView.append(mWords1);</span><br><span class="line">int offsetAfter = TextUtils.getOffsetAfter(mWords1, 5);</span><br><span class="line">                mOutputView.setText(String.valueOf(offsetAfter));</span><br><span class="line">                mOutputView.append(&quot;\n\n&quot;);</span><br><span class="line">                mOutputView.append(mWords1.substring(offsetAfter));</span><br></pre></td></tr></table></figure>
<h1 id="getOffsetBefore"><a href="#getOffsetBefore" class="headerlink" title="getOffsetBefore"></a>getOffsetBefore</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static int getOffsetBefore(CharSequence text, int offset)</span><br></pre></td></tr></table></figure>
<p>获取文本之前的偏移量 结合方法里的内容看比较容易,方法里面的<code>Unicode</code>都是我们所谓的非法字符。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mTextView.setText(mWords1);</span><br><span class="line">mTextView.append(&quot;\n\n&quot;);</span><br><span class="line">mWords1 = mWords1.replace(&quot;句&quot;, &quot;\uD800&quot;);</span><br><span class="line">mWords1 = mWords1.replace(&quot;话&quot;, &quot;\uDFFF&quot;);</span><br><span class="line">mTextView.setText(mWords1);</span><br><span class="line">int offsetBefore = TextUtils.getOffsetBefore(mWords1, 5);</span><br><span class="line">                mOutputView.setText(String.valueOf(offsetBefore));</span><br><span class="line">mOutputView.append(&quot;\n\n&quot;);</span><br><span class="line">                mOutputView.append(mWords1.substring(offsetBefore));</span><br></pre></td></tr></table></figure>
<h1 id="getReverse"><a href="#getReverse" class="headerlink" title="getReverse"></a>getReverse</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public static CharSequence getReverse(CharSequence source,</span><br><span class="line">                                          int start, int end)</span><br></pre></td></tr></table></figure>
<p>翻转<code>start</code>到<code>end</code>的字符串。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CharSequence reverse = TextUtils.getReverse(mWords1, 0, mWords1.length());</span><br></pre></td></tr></table></figure>
<h1 id="getTrimmedLength"><a href="#getTrimmedLength" class="headerlink" title="getTrimmedLength"></a>getTrimmedLength</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static int getTrimmedLength(CharSequence s)</span><br></pre></td></tr></table></figure>
<p>trim 后的字符串长度。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mWords1 = &quot; &quot; + mWords1 + &quot; &quot;;</span><br><span class="line">mTextView.setText(mWords1);</span><br><span class="line">mTextView.append(&quot;\n\n&quot;);</span><br><span class="line">                mTextView.append(String.valueOf(mWords1.length()));</span><br><span class="line">int trimmedLength = TextUtils.getTrimmedLength(mWords1);</span><br><span class="line">                mOutputView.setText(String.valueOf(trimmedLength));</span><br></pre></td></tr></table></figure>
<h1 id="htmlEncode"><a href="#htmlEncode" class="headerlink" title="htmlEncode"></a>htmlEncode</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static String htmlEncode(String s)</span><br></pre></td></tr></table></figure>
<p>encode html ，注意是 html 。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String code = &quot;&lt;h1&gt;html&lt;/h1&gt; &quot; + mWords1;</span><br><span class="line">                mTextView.setText(code);</span><br><span class="line">                mOutputView.setText(TextUtils.htmlEncode(code));</span><br></pre></td></tr></table></figure>
<h1 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public static int indexOf(CharSequence s, CharSequence needle,</span><br><span class="line">                              int start, int end)</span><br></pre></td></tr></table></figure>
<p>获取<code>needle</code>字符的 index。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int indexOf = TextUtils.indexOf(mWords1, &quot;不要的&quot;, 0, mWords1.length());</span><br><span class="line">                mOutputView.setText(String.valueOf(indexOf));</span><br><span class="line">                mOutputView.append(mWords1.substring(indexOf));</span><br></pre></td></tr></table></figure>
<h1 id="isDigitsOnly"><a href="#isDigitsOnly" class="headerlink" title="isDigitsOnly"></a>isDigitsOnly</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isDigitsOnly(CharSequence str)</span><br></pre></td></tr></table></figure>
<p>判断是否仅有数字。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mTextView.setText(mWords1);</span><br><span class="line">String digits = &quot;1234&quot;;</span><br><span class="line">mTextView.append(&quot;\n\n&quot;);</span><br><span class="line">mTextView.append(digits);</span><br><span class="line">String digits1 = &quot;123w123&quot;;</span><br><span class="line">mTextView.append(&quot;\n\n&quot;);</span><br><span class="line">mTextView.append(digits1);</span><br><span class="line">boolean digitsOnly = TextUtils.isDigitsOnly(mWords1);</span><br><span class="line">boolean digitsOnly1 = TextUtils.isDigitsOnly(digits);</span><br><span class="line">boolean digitsOnly2 = TextUtils.isDigitsOnly(digits1);</span><br><span class="line">                mOutputView.setText(String.valueOf(digitsOnly));</span><br><span class="line">mOutputView.append(&quot;\n\n&quot;);</span><br><span class="line">                mOutputView.append(String.valueOf(digitsOnly1));</span><br><span class="line">mOutputView.append(&quot;\n\n&quot;);</span><br><span class="line">                mOutputView.append(String.valueOf(digitsOnly2));</span><br></pre></td></tr></table></figure>
<h1 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isEmpty(CharSequence str)</span><br></pre></td></tr></table></figure>
<p>判空，这个太常用了。</p>
<h1 id="isGraphic"><a href="#isGraphic" class="headerlink" title="isGraphic"></a>isGraphic</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isGraphic(CharSequence str)</span><br></pre></td></tr></table></figure>
<p>判断是否有可以显示出来的字符。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String graphic = &quot;\n \t \b&quot;;</span><br><span class="line">mTextView.setText(graphic);</span><br><span class="line">            mOutputView.setText(String.valueOf(TextUtils.isGraphic(graphic)));</span><br></pre></td></tr></table></figure>
<h1 id="join"><a href="#join" class="headerlink" title="join"></a>join</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static String join(CharSequence delimiter, Iterable tokens)</span><br></pre></td></tr></table></figure>
<p>连接数组，例如：a b c d 输出 a-b-c-d，这个方法的重载支持了很多类型。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">list.add(&quot;a&quot;);</span><br><span class="line">list.add(&quot;b&quot;);</span><br><span class="line">list.add(&quot;c&quot;);</span><br><span class="line">list.add(&quot;d&quot;);</span><br><span class="line">mTextView.setText(list.toString());</span><br><span class="line">mOutputView.setText(TextUtils.join(&quot;-&quot;, list));</span><br></pre></td></tr></table></figure>
<h1 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static int lastIndexOf(CharSequence s, char ch)</span><br></pre></td></tr></table></figure>
<p>字符<code>ch</code>最后一次出现的<code>index</code>。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mTextView.setText(mWords1);</span><br><span class="line">int c = TextUtils.lastIndexOf(mWords1, &apos;c&apos;);               mOutputView.setText(String.valueOf(c));</span><br><span class="line">mOutputView.append(&quot;\n\n&quot;);                mOutputView.append(mWords1.substring(c));</span><br></pre></td></tr></table></figure>
<h1 id="regionMatches"><a href="#regionMatches" class="headerlink" title="regionMatches"></a>regionMatches</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static boolean regionMatches(CharSequence one, int toffset,</span><br><span class="line">                                        CharSequence two, int ooffset,</span><br><span class="line">                                        int len) &#123;</span><br></pre></td></tr></table></figure>
<p>比对两个字符串 <code>offset</code>到 <code>len</code> 的长度的字符串是否相同。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mOutputView.setText(TextUtils.replace(mWords1,new String[]&#123;&quot;很长&quot;,&quot;的&quot;,&quot;.&quot;&#125;,new String[]&#123;&quot;very long&quot;,&quot;of&quot;,&quot;。&quot;&#125;));</span><br></pre></td></tr></table></figure>
<h1 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static CharSequence replace(CharSequence template,</span><br><span class="line">                                       String[] sources,</span><br><span class="line">                                       CharSequence[] destinations)</span><br></pre></td></tr></table></figure>
<p>替换功能，注意：只会替换第一个出现的。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mOutputView.setText(TextUtils.replace(mWords1,new String[]&#123;&quot;很长&quot;,&quot;的&quot;,&quot;.&quot;&#125;,new String[]&#123;&quot;very long&quot;,&quot;of&quot;,&quot;。&quot;&#125;));</span><br></pre></td></tr></table></figure>
<h1 id="split"><a href="#split" class="headerlink" title="split"></a>split</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static String[] split(String text, String expression)</span><br></pre></td></tr></table></figure>
<p>分割字符串。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mOutputView.setText(TextUtils.join(&quot;--&quot;,TextUtils.split(mWords2,&quot;,&quot;)));</span><br></pre></td></tr></table></figure>
<h1 id="stringOrSpannedString"><a href="#stringOrSpannedString" class="headerlink" title="stringOrSpannedString"></a>stringOrSpannedString</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static CharSequence stringOrSpannedString(CharSequence source)</span><br></pre></td></tr></table></figure>
<p>如果是 <code>String</code> 返回 <code>String</code> ，<code>spannedString</code> 或 <code>spanned</code> 返回 <code>spannedString</code>。</p>
<p>例子:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mOutputView.setText(TextUtils.stringOrSpannedString(mSpanny1));</span><br></pre></td></tr></table></figure>
<h1 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static String substring(CharSequence source, int start, int end)</span><br></pre></td></tr></table></figure>
<p>分割字符串。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mOutputView.setText(TextUtils.substring(mSpanny1,2,16));</span><br></pre></td></tr></table></figure>
<h1 id="writeToParcel"><a href="#writeToParcel" class="headerlink" title="writeToParcel"></a>writeToParcel</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public static void writeToParcel(CharSequence cs, Parcel p,</span><br><span class="line">            int parcelableFlags)</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mTextView.setText(&quot;一般用作序列化 CharSequence 子类&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Utils </tag>
            
            <tag> TextView </tag>
            
            <tag> EditText </tag>
            
            <tag> TextUtils </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 下反编译 apk]]></title>
      <url>http://www.kennethyo.me/2016/06/21/2016-06-21/</url>
      <content type="html"><![CDATA[<h1 id="1，环境准备"><a href="#1，环境准备" class="headerlink" title="1，环境准备"></a>1，环境准备</h1><p><code>brew install apktool</code><br><code>brew install dex2jar</code><br><code>jd-gui</code></p>
<h1 id="2，反编译-代码"><a href="#2，反编译-代码" class="headerlink" title="2，反编译 代码"></a>2，反编译 代码</h1><p>解压 apk 拿到 dex 文件<br>执行 <code>d2j-dex2jar classes.dex</code> 获取到 jar 文件，拖进 jd-gui 就可以了</p>
<h1 id="3，反编译资源文件"><a href="#3，反编译资源文件" class="headerlink" title="3，反编译资源文件"></a>3，反编译资源文件</h1><p>执行 <code>apktool  d *.apk</code><br>-f  如果目标文件存在，删除存在<br>-o 指定目标文件夹名字<br>-s 不反编译 dex 文件<br>-r 不反编译资源文件</p>
<h1 id="4，重新打包"><a href="#4，重新打包" class="headerlink" title="4，重新打包"></a>4，重新打包</h1><p><code>apktool b *.apk -o new.apk</code></p>
<h1 id="5，签名-需要-java-环境变量"><a href="#5，签名-需要-java-环境变量" class="headerlink" title="5，签名(需要 java 环境变量)"></a>5，签名(需要 java 环境变量)</h1><p><code>jarsigner  -verbose   -sigalg SHA1withRSA -digestalg SHA1 -keystore 签名文件 -storepass 签名密码 待签名 apk 签名的别名</code></p>
<h1 id="6，对齐操作（程序运行的更快）"><a href="#6，对齐操作（程序运行的更快）" class="headerlink" title="6，对齐操作（程序运行的更快）"></a>6，对齐操作（程序运行的更快）</h1><p><code>zipalign 4 *.apk *_aligned.apk</code></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 反编译 </tag>
            
            <tag> brew </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CURL常用指令]]></title>
      <url>http://www.kennethyo.me/2016/06/17/2016-06-17/</url>
      <content type="html"><![CDATA[<h1 id="一，查看网页源代码"><a href="#一，查看网页源代码" class="headerlink" title="一，查看网页源代码"></a>一，查看网页源代码</h1><p><code>curl www.bitauto.com</code><br>保存网页<br><code>curl -o demo.txt www.bitauto.com</code></p>
<h1 id="二，自动跳转"><a href="#二，自动跳转" class="headerlink" title="二，自动跳转"></a>二，自动跳转</h1><p><code>curl -L www.bitauto.com</code></p>
<h1 id="三，显示头信息"><a href="#三，显示头信息" class="headerlink" title="三，显示头信息"></a>三，显示头信息</h1><p><code>curl -i www.bitauto.com</code></p>
<h1 id="四，显示通信过程"><a href="#四，显示通信过程" class="headerlink" title="四，显示通信过程"></a>四，显示通信过程</h1><p><code>curl -v www.bitauto.com</code><br>更多详细信息<br><code>curl --trace demo.txt www.bitauto.com</code><br><code>curl --trace--ascii demo.txt www.bitauto.com</code></p>
<h1 id="五，发送表单信息"><a href="#五，发送表单信息" class="headerlink" title="五，发送表单信息"></a>五，发送表单信息</h1><p>GET<br><code>curl www.bitauto.com/?data=xxx</code><br>POST<br><code>curl -X POST --data &quot;data=xxx&quot; www.bitauto.com</code><br><code>curl -X POST --data-urlencode &quot;data=hello world&quot; www.bitauto.com</code><br>DELETE<br><code>curl -X DELETE www.bitauto.com</code></p>
<h1 id="六，上传文件"><a href="#六，上传文件" class="headerlink" title="六，上传文件"></a>六，上传文件</h1><p><code>curl --form uplaod=@demo.txt --form press=OK www.bitauto.com</code></p>
<h1 id="七，Referer-字段"><a href="#七，Referer-字段" class="headerlink" title="七，Referer 字段"></a>七，Referer 字段</h1><p><code>curl --referer www.bitauto.com www.bitauto.com</code></p>
<h1 id="九，User-Agent-字段"><a href="#九，User-Agent-字段" class="headerlink" title="九，User Agent 字段"></a>九，User Agent 字段</h1><p><code>curl --user-agent &quot;user-agent&quot; www.bitauto.com</code></p>
<h1 id="十，Cookie"><a href="#十，Cookie" class="headerlink" title="十，Cookie"></a>十，Cookie</h1><p><code>curl --cookie  &quot;name=demo&quot; www.bitauto.com</code><br>保存 cookie 到文件夹<br><code>curl -c filename www.bitauto.com</code><br>使用文件的 cookie<br><code>curl -b filename www.bitauto.com</code></p>
<h1 id="十一，增加头信息"><a href="#十一，增加头信息" class="headerlink" title="十一，增加头信息"></a>十一，增加头信息</h1><p><code>curl --header &quot;Content-Type:application/json&quot; www.bitauto.com</code></p>
<h1 id="十二，HTTP-认证"><a href="#十二，HTTP-认证" class="headerlink" title="十二，HTTP 认证"></a>十二，HTTP 认证</h1><p><code>curl --user name:password www.bitauto.com</code></p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web </tag>
            
            <tag> CURL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]React-Native Android 学习笔记——2，自定义 logger]]></title>
      <url>http://www.kennethyo.me/2016/03/23/2016-03-23/</url>
      <content type="html"><![CDATA[<p>通过上一篇<a href="http://blog.csdn.net/kennethyo/article/details/50923909" target="_blank" rel="noopener">《 React-Native Android 学习笔记——1，配置环境》</a>下载了AwesomeProject项目并运行了 demo。如下图：<br><img src="http://img.blog.csdn.net/20160322185844293" alt="这里写图片描述"><br>应该和你运行起来的相同，但是除了<code>Welcome to React Native</code>的颜色。</p>
<h2 id="一，index-android-js-文件"><a href="#一，index-android-js-文件" class="headerlink" title="一，index.android.js 文件"></a>一，index.android.js 文件</h2><p>demo 默认展示在我们面前的这个页面其实是我们下载<code>AwesomeProject</code>项目下的<code>index.android.js</code>，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sample React Native App</span></span><br><span class="line"><span class="comment"> * https://github.com/facebook/react-native</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">import</span> React, &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  Component,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AwesomeProject</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.welcome&#125;&gt;</span><br><span class="line">          Welcome to React Native!</span><br><span class="line">        &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Text style=&#123;styles.instructions&#125;&gt;</span></span><br><span class="line"><span class="regexp">          To get started, edit index.android.js</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Text&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</span><br><span class="line">          Shake or press menu button <span class="keyword">for</span> dev menu</span><br><span class="line">        &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    justifyContent: <span class="string">'center'</span>,</span><br><span class="line">    alignItems: <span class="string">'center'</span>,</span><br><span class="line">    backgroundColor: <span class="string">'#F5FCFF'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  welcome: &#123;</span><br><span class="line">    fontSize: <span class="number">20</span>,</span><br><span class="line">    textAlign: <span class="string">'center'</span>,</span><br><span class="line">    margin: <span class="number">10</span>,</span><br><span class="line">    color:<span class="string">'red'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  instructions: &#123;</span><br><span class="line">    textAlign: <span class="string">'center'</span>,</span><br><span class="line">    color: <span class="string">'#333333'</span>,</span><br><span class="line">    marginBottom: <span class="number">5</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(<span class="string">'AwesomeProject'</span>, () =&gt; AwesomeProject);</span><br></pre></td></tr></table></figure></p>
<p>可以看到我在 welcome 的 style 中设置了<code>color:&#39;red&#39;</code>，让我的<code>Welcome to React Native</code>变成红色字体的。如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">welcome: &#123;</span><br><span class="line">  fontSize: <span class="number">20</span>,</span><br><span class="line">  textAlign: <span class="string">'center'</span>,</span><br><span class="line">  margin: <span class="number">10</span>,</span><br><span class="line">  color:<span class="string">'red'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<p>下面我们来熟悉一下<code>index.android.js</code>这个文件里面的 js 代码都是干什么的。</p>
<p><code>&#39;use strict&#39;</code>是启动当前文件的 js 代码的严格模式，可以使当前的 js 更严格的条件下运行。想了解的可以学习这篇文章<a href="http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html" target="_blank" rel="noopener">《Javascript 严格模式详解》</a>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  Component,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br></pre></td></tr></table></figure></p>
<p>这段代码类似 java 的 import，把需要引用的 module 引入。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AwesomeProject</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.welcome&#125;&gt;</span><br><span class="line">          Welcome to React Native!</span><br><span class="line">        &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Text style=&#123;styles.instructions&#125;&gt;</span></span><br><span class="line"><span class="regexp">          To get started, edit index.android.js</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Text&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</span><br><span class="line">          Shake or press menu button <span class="keyword">for</span> dev menu</span><br><span class="line">        &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这段代码是渲染当前注册界面的布局，<code>render</code>方法下的return 就是返回的当前布局。标签内的 style 对应下面这段代码，和 css 很像，等于 Android layout 文件下 view 的标签设置属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    justifyContent: <span class="string">'center'</span>,</span><br><span class="line">    alignItems: <span class="string">'center'</span>,</span><br><span class="line">    backgroundColor: <span class="string">'#F5FCFF'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  welcome: &#123;</span><br><span class="line">    fontSize: <span class="number">20</span>,</span><br><span class="line">    textAlign: <span class="string">'center'</span>,</span><br><span class="line">    margin: <span class="number">10</span>,</span><br><span class="line">    color:<span class="string">'red'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  instructions: &#123;</span><br><span class="line">    textAlign: <span class="string">'center'</span>,</span><br><span class="line">    color: <span class="string">'#333333'</span>,</span><br><span class="line">    marginBottom: <span class="number">5</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>标签的具体规范可以看这里<a href="http://facebook.github.io/react-native/docs/text.html#content" target="_blank" rel="noopener">Text</a>，<a href="http://facebook.github.io/react-native/docs/view.html#content" target="_blank" rel="noopener">View</a>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AppRegistry.registerComponent(<span class="string">'AwesomeProject'</span>, () =&gt; AwesomeProject);</span><br></pre></td></tr></table></figure></p>
<p>上面这段代码把我们 js 文件中的 class <code>AwesomeProject</code>和我们 Android 项目中 <code>Activity</code>中<code>getMainComponentName() { return &quot;AwesomeProject&quot;; }</code>的 Activity关联起来。</p>
<h2 id="二，显示一个-Toast"><a href="#二，显示一个-Toast" class="headerlink" title="二，显示一个 Toast"></a>二，显示一个 Toast</h2><p>React-Native 已经把我们常用的模块都已经封装好了，例如 Toast 在<code>../AwesomeProject/node_modules/react-native/Libraries/Components/ToastAndroid/ToastAndroid.android.js</code>中。<br>我们来看 ToastAndroid 的源码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2015-present, Facebook, Inc.</span></span><br><span class="line"><span class="comment"> * All rights reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This source code is licensed under the BSD-style license found in the</span></span><br><span class="line"><span class="comment"> * LICENSE file in the root directory of this source tree. An additional grant</span></span><br><span class="line"><span class="comment"> * of patent rights can be found in the PATENTS file in the same directory.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@providesModule <span class="variable">ToastAndroid</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> RCTToastAndroid = <span class="built_in">require</span>(<span class="string">'NativeModules'</span>).ToastAndroid;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This exposes the native ToastAndroid module as a JS module. This has a function 'show'</span></span><br><span class="line"><span class="comment"> * which takes the following parameters:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. String message: A string with the text to toast</span></span><br><span class="line"><span class="comment"> * 2. int duration: The duration of the toast. May be ToastAndroid.SHORT or ToastAndroid.LONG</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ToastAndroid = &#123;</span><br><span class="line"></span><br><span class="line">  SHORT: RCTToastAndroid.SHORT,</span><br><span class="line">  LONG: RCTToastAndroid.LONG,</span><br><span class="line"></span><br><span class="line">  show: <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    message: string,</span></span></span><br><span class="line"><span class="function"><span class="params">    duration: number</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    RCTToastAndroid.show(message, duration);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ToastAndroid;</span><br></pre></td></tr></table></figure></p>
<p>我们可以直接在引包当中加入ToastAndroid。如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  Component,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  ToastAndroid,</span><br><span class="line">  View,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br></pre></td></tr></table></figure></p>
<p>下面我们来用 ToastAndroid 弹出一个 Toast。在引包后加入代码<code>ToastAndroid.show(&#39;Awesome&#39;, ToastAndroid.SHORT);</code>，下面来摇摆手机调出开发菜单，点击<code>Reload JS</code>。就会弹出Toast。<br>我们来分析一下<code>ToastAndroid.android.js</code>这个 module。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> RCTToastAndroid = <span class="built_in">require</span>(<span class="string">'NativeModules'</span>).ToastAndroid;</span><br></pre></td></tr></table></figure></p>
<p>这里是<code>require</code>是加载<code>NativeModules</code>模块，并把 <code>ToastAndroid</code> 赋值给 <code>RCTToastAndroid</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ToastAndroid = &#123;</span><br><span class="line"></span><br><span class="line">  SHORT: RCTToastAndroid.SHORT,</span><br><span class="line">  LONG: RCTToastAndroid.LONG,</span><br><span class="line"></span><br><span class="line">  show: <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    message: string,</span></span></span><br><span class="line"><span class="function"><span class="params">    duration: number</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    RCTToastAndroid.show(message, duration);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>这段代码，创建一个对象赋值给<code>ToastAndroid</code>，对象内分别设置了<code>Toast</code>的 <code>SHORT</code>，<code>LONG</code>和<code>show</code>方法。<br><code>module.exports = ToastAndroid;</code>这里把<code>ToastAndroid</code>作为当前这个 Module 导出，提供给外部使用。<br>那么 JS 是如何 Android 代码关联起来的呢？下面我们来看一下Native 的代码。在 Android Studio 中搜索类 <code>ToastModule</code>，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToastModule</span> <span class="keyword">extends</span> <span class="title">ReactContextBaseJavaModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DURATION_SHORT_KEY = <span class="string">"SHORT"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DURATION_LONG_KEY = <span class="string">"LONG"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ToastModule</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(reactContext);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ToastAndroid"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getConstants</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, Object&gt; constants = MapBuilder.newHashMap();</span><br><span class="line">    constants.put(DURATION_SHORT_KEY, Toast.LENGTH_SHORT);</span><br><span class="line">    constants.put(DURATION_LONG_KEY, Toast.LENGTH_LONG);</span><br><span class="line">    <span class="keyword">return</span> constants;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ReactMethod</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String message, <span class="keyword">int</span> duration)</span> </span>&#123;</span><br><span class="line">    Toast.makeText(getReactApplicationContext(), message, duration).show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里<code>getName()</code>方法的返回值对应 JS 中的<code>var RCTToastAndroid = require(&#39;NativeModules&#39;).ToastAndroid;</code>结尾处的<code>ToastAndroid</code>，正如 js 里的请求手机本地的 modules ，对应到类里的<code>getName()</code>返回值。<br><code>getConstants()</code>方法负责把类中的常量映射到 JS 中去。<br><code>show(String message, int duration)</code>方法正是我们要提供给 JS 的方法，方法的注释代表这个方法提供给 JS 调用。</p>
<h2 id="三，自定义-Logger"><a href="#三，自定义-Logger" class="headerlink" title="三，自定义 Logger"></a>三，自定义 Logger</h2><p>这里我们来自定义一个 LoggerModule 来练练手。这里我先把代码贴出来了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerModule</span> <span class="keyword">extends</span> <span class="title">ReactContextBaseJavaModule</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MODULE_NAME = <span class="string">"Logger"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG_KEY = <span class="string">"TAG"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG_VALUE = <span class="string">"LoggerModule"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoggerModule</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(reactContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getConstants</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, Object&gt; constants = MapBuilder.newHashMap();</span><br><span class="line">        constants.put(TAG_KEY, TAG_VALUE);</span><br><span class="line">        <span class="keyword">return</span> constants;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MODULE_NAME;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReactMethod</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">i</span><span class="params">(String tag, String msg)</span> </span>&#123;</span><br><span class="line">        Log.i(tag, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReactMethod</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(String tag, String msg)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReactMethod</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">(String tag, String msg)</span> </span>&#123;</span><br><span class="line">        Log.w(tag, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReactMethod</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">(String tag, String msg)</span> </span>&#123;</span><br><span class="line">        Log.e(tag, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里我把常量<code>TAG</code>返回给 JS 调用，Module 命名为<code>Logger</code>，并且把 info，debug，warn，error 等 Log 方法加上<code>@ReactMethod</code>注释，提供给 JS调用。<br>这里还没有结束，我们还需要实现一个类，去注册我们自己写的 <code>LoggerModule</code>。具体代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppReactPackage</span> <span class="keyword">implements</span> <span class="title">ReactPackage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;NativeModule&gt; <span class="title">createNativeModules</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</span><br><span class="line">        List&lt;NativeModule&gt; modules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        modules.add(<span class="keyword">new</span> LoggerModule(reactContext));</span><br><span class="line">        <span class="keyword">return</span> modules;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ViewManager&gt; <span class="title">createViewManagers</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后，把这个 AppReactPackage 注册到 Activity。如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">ReactActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the name of the main component registered from JavaScript.</span></span><br><span class="line"><span class="comment">     * This is used to schedule rendering of the component.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getMainComponentName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"AwesomeProject"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns whether dev mode should be enabled.</span></span><br><span class="line"><span class="comment">     * This enables e.g. the dev menu.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">getUseDeveloperSupport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BuildConfig.DEBUG;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A list of packages used by the app. If the app uses additional views</span></span><br><span class="line"><span class="comment">     * or modules besides the default ones, add more packages here.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</span><br><span class="line">                <span class="keyword">new</span> MainReactPackage(),</span><br><span class="line">                <span class="keyword">new</span> AppReactPackage()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>java 代码到这里就结束了。<br>下面，我们在<code>index.android.js</code>的同级目录创建一个 js 文件<code>log.js</code>。里面内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> RCTLogger = <span class="built_in">require</span>(<span class="string">'NativeModules'</span>).Logger;<span class="comment">//加载本地 modules，Module#getName()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> LogAndroid = &#123;</span><br><span class="line">  <span class="comment">//添加定义的常量 Module#getConstants()</span></span><br><span class="line">  TAG: RCTLogger.TAG,</span><br><span class="line">  <span class="comment">//添加的方法 Module#d()</span></span><br><span class="line">  d: <span class="function"><span class="keyword">function</span>(<span class="params">tag: string,msg: string</span>):<span class="title">void</span></span>&#123;</span><br><span class="line">    RCTLogger.d(tag,msg);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  i: <span class="function"><span class="keyword">function</span>(<span class="params">tag: string,msg: string</span>):<span class="title">void</span></span>&#123;</span><br><span class="line">    RCTLogger.i(tag,msg);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  w: <span class="function"><span class="keyword">function</span>(<span class="params">tag: string,msg: string</span>):<span class="title">void</span></span>&#123;</span><br><span class="line">    RCTLogger.w(tag,msg);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  e: <span class="function"><span class="keyword">function</span>(<span class="params">tag: string,msg: string</span>):<span class="title">void</span></span>&#123;</span><br><span class="line">    RCTLogger.e(tag,msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = LogAndroid;<span class="comment">//module 导出</span></span><br></pre></td></tr></table></figure></p>
<p>这里不用多说了，无非就是创建一个 LogAndroid 对象获取 <code>LoggerModule</code>java 类中的常量，方法等，并且导出。<br>下面我贴出完整的<code>index.android.js</code>，里面显示如何引用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sample React Native App</span></span><br><span class="line"><span class="comment"> * https://github.com/facebook/react-native</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">import</span> React, &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  Component,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  ToastAndroid,</span><br><span class="line">  View,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">var</span> LogAndroid = <span class="built_in">require</span>(<span class="string">'./log'</span>);</span><br><span class="line"></span><br><span class="line">LogAndroid.i(LogAndroid.TAG,<span class="string">"Awesome"</span>);</span><br><span class="line">LogAndroid.d(LogAndroid.TAG,<span class="string">"Awesome"</span>);</span><br><span class="line">LogAndroid.w(LogAndroid.TAG,<span class="string">"Awesome"</span>);</span><br><span class="line">LogAndroid.e(LogAndroid.TAG,<span class="string">"Awesome"</span>);</span><br><span class="line"></span><br><span class="line">ToastAndroid.show(<span class="string">'Awesome'</span>, ToastAndroid.SHORT);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AwesomeProject</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.welcome&#125;&gt;</span><br><span class="line">          Welcome to React Native!</span><br><span class="line">        &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Text style=&#123;styles.instructions&#125;&gt;</span></span><br><span class="line"><span class="regexp">          To get started, edit index.android.js</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Text&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</span><br><span class="line">          Shake or press menu button <span class="keyword">for</span> dev menu</span><br><span class="line">        &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    justifyContent: <span class="string">'center'</span>,</span><br><span class="line">    alignItems: <span class="string">'center'</span>,</span><br><span class="line">    backgroundColor: <span class="string">'#F5FCFF'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  welcome: &#123;</span><br><span class="line">    fontSize: <span class="number">20</span>,</span><br><span class="line">    textAlign: <span class="string">'center'</span>,</span><br><span class="line">    margin: <span class="number">10</span>,</span><br><span class="line">    color:<span class="string">'red'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  instructions: &#123;</span><br><span class="line">    textAlign: <span class="string">'center'</span>,</span><br><span class="line">    color: <span class="string">'#333333'</span>,</span><br><span class="line">    marginBottom: <span class="number">5</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(<span class="string">'AwesomeProject'</span>, () =&gt; AwesomeProject);</span><br></pre></td></tr></table></figure></p>
<p>重新编译并运行你的 app，看看 logcat 打印出了日志吗？</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> React-Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]React-Native Android 学习笔记——1，配置环境]]></title>
      <url>http://www.kennethyo.me/2016/03/18/2016-03-18/</url>
      <content type="html"><![CDATA[<h2 id="一，设备与环境"><a href="#一，设备与环境" class="headerlink" title="一，设备与环境"></a>一，设备与环境</h2><h3 id="1，一台-mac"><a href="#1，一台-mac" class="headerlink" title="1，一台 mac"></a>1，一台 mac</h3><h3 id="2，安装软件包管理器-Homebrew-中文"><a href="#2，安装软件包管理器-Homebrew-中文" class="headerlink" title="2，安装软件包管理器 Homebrew(中文)"></a>2，安装软件包管理器 <a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">Homebrew(中文)</a></h3><p>终端里输入<code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code>进行安装。</p>
<h3 id="3，安装-wget-或者-curl"><a href="#3，安装-wget-或者-curl" class="headerlink" title="3，安装 wget 或者 curl"></a>3，安装 <a href="https://zh.wikipedia.org/wiki/Wget" target="_blank" rel="noopener">wget</a> 或者 <a href="https://zh.wikipedia.org/wiki/CURL" target="_blank" rel="noopener">curl</a></h3><p>wget，终端里输入<code>brew install wget</code>进行安装。<br>curl，终端里输入<code>brew install curl</code>进行安装。</p>
<h3 id="4，安装-nvm-node版本管理器"><a href="#4，安装-nvm-node版本管理器" class="headerlink" title="4，安装 nvm (node版本管理器)"></a>4，安装 <a href="https://github.com/creationix/nvm#installation" target="_blank" rel="noopener">nvm</a> (node版本管理器)</h3><p>如果安装了 wget，终端输入<code>wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</code>进行安装 nvm。</p>
<p>如果安装了 curl，终端输入<code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bashÂ</code>进行安装 nvm。</p>
<h3 id="5，Android-SDK"><a href="#5，Android-SDK" class="headerlink" title="5，Android SDK"></a>5，Android SDK</h3><p>这个不用多说了，相信大家都会的。顺便把 Android SDK 配置到环境变量。</p>
<p>如果你没有 Android SDK，也可以通过终端输入<code>brew install android-sdk</code>。</p>
<h2 id="二，安装和初始react-native-demo"><a href="#二，安装和初始react-native-demo" class="headerlink" title="二，安装和初始react-native demo"></a>二，安装和初始react-native demo</h2><p>终端输入<code>npm install -g react-native-cli</code>安装 react-native。</p>
<p>如果显示<code>EACCES: permission denied</code>，用超级权限再次执行一下上面的指令。反正我是没遇到。</p>
<p>进入到你要创建 demo 的目录，终端输入<code>cd 你得文件路径</code>.<br>终端输入<code>react-native init AwesomeProject</code>，初始 AwesomeProject 。</p>
<p>终端输入<code>cd AwesomeProject</code>。</p>
<p>终端输入<code>react-native run-android</code>可以直接运行 node 服务并编译运行 Android 项目，直至安装到手机。</p>
<p>如果界面报错提示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Unable to download JS bundle</span><br><span class="line">com.facebook.react.devsupport.DebugServerException: Could not connect to development server.</span><br><span class="line"></span><br><span class="line">URL: http://localhost:8081/index.android.bundle?platform=android&amp;dev=true&amp;hot=false</span><br><span class="line"></span><br><span class="line">Try the following to fix the issue:</span><br><span class="line">• Ensure that the packager server is running</span><br><span class="line">• Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run &apos;adb devices&apos; to see a list of connected devices</span><br><span class="line">• If you&apos;re on a physical device connected to the same machine, run &apos;adb reverse tcp:8081 tcp:8081&apos; to forward requests from your device</span><br><span class="line">• If your device is on the same Wi-Fi network, set &apos;Debug server host &amp; port for device&apos; in &apos;Dev settings&apos; to your machine&apos;s IP address and the port of the local dev server - e.g. 10.0.1.1:8081</span><br><span class="line">at com.facebook.react.devsupport.DevServerHelper$1.onFailure(DevServerHelper.java:203)</span><br><span class="line">at com.squareup.okhttp.Call$AsyncCall.execute(Call.java:175)</span><br><span class="line">at com.squareup.okhttp.internal.NamedRunnable.run(NamedRunnable.java:33)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)</span><br><span class="line">at java.lang.Thread.run(Thread.java:818)</span><br></pre></td></tr></table></figure></p>
<p>一般在终端输入<code>adb reverse tcp:8081 tcp:8081</code>即可解决，其他请详细看 log。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> React-Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]Android 自定义字体，字替换为图片]]></title>
      <url>http://www.kennethyo.me/2015/12/03/2015-12-03/</url>
      <content type="html"><![CDATA[<p>不久前开发的版本中有这样一个需求，根据服务器返回的分数，显示分数，各位可能觉得这有什么呢？那么请看下图。<br><img src="http://img.blog.csdn.net/20151203113652497" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20151203113712189" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20151203113725790" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20151203113742294" alt="这里写图片描述"></p>
<p>没错，这就是我们的需求。</p>
<hr>
<p>####思路一，<br>添加字体库，通过设置 TextView，在初始化的时候设置我们的字体。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TextView textView = (TextView) findViewById(R.id.custom);</span><br><span class="line"><span class="comment">// 将字体文件保存在assets/fonts/目录下</span></span><br><span class="line">Typeface typeFace =  Typeface.createFromAsset(getAssets(),<span class="string">"fonts/your_font_name.ttf"</span>);</span><br><span class="line"><span class="comment">// 应用字体</span></span><br><span class="line">textView.setTypeface(typeFace);</span><br></pre></td></tr></table></figure></p>
<p>####思路二，<br>通过 自定义 View，根据分数算出每个字的位置，通过canvas 画出。通过如下方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">canvas.drawBitmap(<span class="meta">@NonNull</span> Bitmap bitmap, <span class="keyword">float</span> left, <span class="keyword">float</span> top, <span class="meta">@Nullable</span> Paint paint)</span><br></pre></td></tr></table></figure></p>
<hr>
<p>####解决方案：<br>按照上面的思路，我直接去找设计妹子，说能给我做成字体库吗？然后我就被抓成土豆丝了。回来我自己了解了一下做字体库，通过了解，为这几个字（0，1，2，3，4，5，6，7，8，9，分，@#%作为一个字），做字体库显然成本比较大。</p>
<p>思路一不行，就思路二吧。思路麻烦在于，要分别处理，两个字（0分），三个字（60分），四个字（100分）和@#%，四种情况。</p>
<p>分清了几种状态，就可以开始着手开发了，就在这时，这时，我想到，这个，这个，不就和年初看的 emoji 表情是一个意思吗，只不过换成我自己的表情而已。</p>
<p>年初看的 emoji 表情，是 <a href="https://github.com/rockerhieu/emojicon" target="_blank" rel="noopener">github 上的一个项目</a>，其主要原理是，通过判断字符来替换相应的字符码为 emoji 图片。</p>
<p>这是自定义的 TextView<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FaceRateTextView</span> <span class="keyword">extends</span> <span class="title">TextView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FaceRateTextView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FaceRateTextView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FaceRateTextView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(getText())) &#123;</span><br><span class="line">            setText(getText());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(CharSequence text, BufferType type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(text)) &#123;</span><br><span class="line">            SpannableStringBuilder builder = <span class="keyword">new</span> SpannableStringBuilder(text);</span><br><span class="line">            FontsHandler.addFonts(getContext(), builder, (<span class="keyword">int</span>) getTextSize(), (<span class="keyword">int</span>) getTextSize());</span><br><span class="line">            text = builder;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.setText(text, type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>FontsHandler，是通过正则判断字符串当中有没有要替换的字符，并且替换为 DynamicDrawableSpan。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FontsHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Integer&gt; mFonts = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        mFonts.put(<span class="string">"分"</span>, R.drawable.ic_face_rate);</span><br><span class="line">        mFonts.put(<span class="string">"0"</span>, R.drawable.ic_face_rate_0);</span><br><span class="line">        mFonts.put(<span class="string">"1"</span>, R.drawable.ic_face_rate_1);</span><br><span class="line">        mFonts.put(<span class="string">"2"</span>, R.drawable.ic_face_rate_2);</span><br><span class="line">        mFonts.put(<span class="string">"3"</span>, R.drawable.ic_face_rate_3);</span><br><span class="line">        mFonts.put(<span class="string">"4"</span>, R.drawable.ic_face_rate_4);</span><br><span class="line">        mFonts.put(<span class="string">"5"</span>, R.drawable.ic_face_rate_5);</span><br><span class="line">        mFonts.put(<span class="string">"6"</span>, R.drawable.ic_face_rate_6);</span><br><span class="line">        mFonts.put(<span class="string">"7"</span>, R.drawable.ic_face_rate_7);</span><br><span class="line">        mFonts.put(<span class="string">"8"</span>, R.drawable.ic_face_rate_8);</span><br><span class="line">        mFonts.put(<span class="string">"9"</span>, R.drawable.ic_face_rate_9);</span><br><span class="line">        mFonts.put(<span class="string">"balala"</span>, R.drawable.ic_face_rate_balala);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">addFonts</span><span class="params">(Context context, Spannable spannable, <span class="keyword">int</span> size, <span class="keyword">int</span> textSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hasChanges = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : mFonts.entrySet()) &#123;</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            Matcher matcher = Pattern.compile(Pattern.quote(key)).matcher(spannable);</span><br><span class="line">            <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> set = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (FontsSpan span : spannable.getSpans(matcher.start(),</span><br><span class="line">                        matcher.end(), FontsSpan<span class="class">.<span class="keyword">class</span>))</span></span><br><span class="line"><span class="class">                    <span class="title">if</span> (<span class="title">spannable</span>.<span class="title">getSpanStart</span>(<span class="title">span</span>) &gt;</span>= matcher.start()</span><br><span class="line">                            &amp;&amp; spannable.getSpanEnd(span) &lt;= matcher.end())</span><br><span class="line">                        spannable.removeSpan(span);</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        set = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">if</span> (set) &#123;</span><br><span class="line">                    hasChanges = <span class="keyword">true</span>;</span><br><span class="line">                    spannable.setSpan(<span class="keyword">new</span> FontsSpan(context, entry.getValue(), size, textSize),</span><br><span class="line">                            matcher.start(), matcher.end(),</span><br><span class="line">                            Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hasChanges;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>FontsSpan 继承于DynamicDrawableSpan，主要实现替换字符为 drawable。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FontsSpan</span> <span class="keyword">extends</span> <span class="title">DynamicDrawableSpan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mResourceId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mTextSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHeight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTop;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Drawable mDrawable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WeakReference&lt;Drawable&gt; mDrawableRef;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FontsSpan</span><span class="params">(Context context, <span class="keyword">int</span> resourceId, <span class="keyword">int</span> size, <span class="keyword">int</span> textSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(DynamicDrawableSpan.ALIGN_BASELINE);</span><br><span class="line">        mContext = context;</span><br><span class="line">        mResourceId = resourceId;</span><br><span class="line">        mWidth = mHeight = mSize = size;</span><br><span class="line">        mTextSize = textSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Drawable <span class="title">getDrawable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mDrawable == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mDrawable = mContext.getResources().getDrawable(mResourceId);</span><br><span class="line">                mHeight = mSize;</span><br><span class="line">                mWidth = mHeight * mDrawable.getIntrinsicWidth() / mDrawable.getIntrinsicHeight();</span><br><span class="line">                mTop = (mTextSize - mHeight) / <span class="number">2</span>;</span><br><span class="line">                mDrawable.setBounds(<span class="number">0</span>, mTop, mWidth, mTop + mHeight);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// swallow</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mDrawable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">float</span> x, <span class="keyword">int</span> top, <span class="keyword">int</span> y, <span class="keyword">int</span> bottom, Paint paint)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//super.draw(canvas, text, start, end, x, top, y, bottom, paint);</span></span><br><span class="line">        Drawable b = getCachedDrawable();</span><br><span class="line">        canvas.save();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> transY = bottom - b.getBounds().bottom;</span><br><span class="line">        <span class="keyword">if</span> (mVerticalAlignment == ALIGN_BASELINE) &#123;</span><br><span class="line">            transY = top + ((bottom - top) / <span class="number">2</span>) - ((b.getBounds().bottom - b.getBounds().top) / <span class="number">2</span>) - mTop;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        canvas.translate(x, transY);</span><br><span class="line">        b.draw(canvas);</span><br><span class="line">        canvas.restore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Drawable <span class="title">getCachedDrawable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mDrawableRef == <span class="keyword">null</span> || mDrawableRef.get() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mDrawableRef = <span class="keyword">new</span> WeakReference&lt;Drawable&gt;(getDrawable());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mDrawableRef.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其实原理很简单，并不复杂。<br><a href="https://github.com/KennethYo/ScanNeedleDemo" target="_blank" rel="noopener">demo代码地址</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]Android 翻转动画 Rotate3dAnimation 效果]]></title>
      <url>http://www.kennethyo.me/2015/10/16/2015-10-16/</url>
      <content type="html"><![CDATA[<p>十一前请了一天假，后面请了三天假，串起来一共休息了十二天，这期间见了女朋友的家长，也领女朋友见了我家长，好消息是各方家长反馈不错，坏消息是涨了五斤肉，毕竟是吃了12天的呼伦贝儿牛羊肉哈。玩了这么多天，回来要收收心好好工作了，毕竟要攒钱娶媳妇哈~</p>
<hr>
<p>上班回来，按照产品的需求做了这样一个效果，如下图：</p>
<p><img src="http://img.blog.csdn.net/20151016162517318" alt="这里写图片描述"></p>
<p>这其中包含了3个动画，分别是移动动画、放大动画、旋转动画。</p>
<p>前两个动画比较好完成，可以用 TranslateAnimation 和 ScaleAnimation来完成，但是第三个就比较麻烦了，因为这个旋转动画是根据 Y 轴来旋转的，而 RotateAnimation 是根据垂直屏幕的 Z 轴旋转的，所以 RotateAnimation 并不能够完成我们需要的效果，这里就需要我们去继承 Animation 去自定义动画了。</p>
<p>但是！！！<br>但是 APIdemo 里面已经实现了这个动画，so，我们拿来用就好了，下面是我贴出来的Rotate3dAnimation，其中我添加了一个构造，添加了相对自己位置的 type。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.kenneth.rotate3danimation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Camera;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Matrix;</span><br><span class="line"><span class="keyword">import</span> android.view.animation.Animation;</span><br><span class="line"><span class="keyword">import</span> android.view.animation.Transformation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rotate3dAnimation</span> <span class="keyword">extends</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCenterXType = ABSOLUTE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCenterYType = ABSOLUTE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mFromDegrees;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mToDegrees;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mCenterX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mCenterY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mDepthZ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mReverse;</span><br><span class="line">    <span class="keyword">private</span> Camera mCamera;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new 3D rotation on the Y axis. The rotation is defined by its</span></span><br><span class="line"><span class="comment">     * start angle and its end angle. Both angles are in degrees. The rotation</span></span><br><span class="line"><span class="comment">     * is performed around a center point on the 2D space, definied by a pair</span></span><br><span class="line"><span class="comment">     * of X and Y coordinates, called centerX and centerY. When the animation</span></span><br><span class="line"><span class="comment">     * starts, a translation on the Z axis (depth) is performed. The length</span></span><br><span class="line"><span class="comment">     * of the translation can be specified, as well as whether the translation</span></span><br><span class="line"><span class="comment">     * should be reversed in time.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fromDegrees the start angle of the 3D rotation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toDegrees   the end angle of the 3D rotation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> centerX     the X center of the 3D rotation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> centerY     the Y center of the 3D rotation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reverse     true if the translation should be reversed, false otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rotate3dAnimation</span><span class="params">(<span class="keyword">float</span> fromDegrees, <span class="keyword">float</span> toDegrees,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">float</span> centerX, <span class="keyword">float</span> centerY, <span class="keyword">float</span> depthZ, <span class="keyword">boolean</span> reverse)</span> </span>&#123;</span><br><span class="line">        mFromDegrees = fromDegrees;</span><br><span class="line">        mToDegrees = toDegrees;</span><br><span class="line">        mCenterX = centerX;</span><br><span class="line">        mCenterY = centerY;</span><br><span class="line">        mDepthZ = depthZ;</span><br><span class="line">        mReverse = reverse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rotate3dAnimation</span><span class="params">(<span class="keyword">float</span> fromDegrees, <span class="keyword">float</span> toDegrees,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> centerXType, <span class="keyword">float</span> centerX, <span class="keyword">int</span> centerYType, <span class="keyword">float</span> centerY, <span class="keyword">float</span> depthZ, <span class="keyword">boolean</span> reverse)</span> </span>&#123;</span><br><span class="line">        mFromDegrees = fromDegrees;</span><br><span class="line">        mToDegrees = toDegrees;</span><br><span class="line">        mCenterXType = centerXType;</span><br><span class="line">        mCenterX = centerX;</span><br><span class="line">        mCenterYType = centerYType;</span><br><span class="line">        mCenterY = centerY;</span><br><span class="line">        mDepthZ = depthZ;</span><br><span class="line">        mReverse = reverse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> parentWidth, <span class="keyword">int</span> parentHeight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.initialize(width, height, parentWidth, parentHeight);</span><br><span class="line">        mCamera = <span class="keyword">new</span> Camera();</span><br><span class="line">        mCenterX = resolveSize(mCenterXType, mCenterX, width, parentWidth);</span><br><span class="line">        mCenterY = resolveSize(mCenterYType, mCenterY, height, parentHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyTransformation</span><span class="params">(<span class="keyword">float</span> interpolatedTime, Transformation t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> fromDegrees = mFromDegrees;</span><br><span class="line">        <span class="keyword">float</span> degrees = fromDegrees + ((mToDegrees - fromDegrees) * interpolatedTime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> centerX = mCenterX;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> centerY = mCenterY;</span><br><span class="line">        <span class="keyword">final</span> Camera camera = mCamera;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Matrix matrix = t.getMatrix();</span><br><span class="line"></span><br><span class="line">        camera.save();</span><br><span class="line">        <span class="keyword">if</span> (mReverse) &#123;</span><br><span class="line">            camera.translate(<span class="number">0.0f</span>, <span class="number">0.0f</span>, mDepthZ * interpolatedTime);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            camera.translate(<span class="number">0.0f</span>, <span class="number">0.0f</span>, mDepthZ * (<span class="number">1.0f</span> - interpolatedTime));</span><br><span class="line">        &#125;</span><br><span class="line">        camera.rotateY(degrees);</span><br><span class="line">        camera.getMatrix(matrix);</span><br><span class="line">        camera.restore();</span><br><span class="line"></span><br><span class="line">        matrix.preTranslate(-centerX, -centerY);</span><br><span class="line">        matrix.postTranslate(centerX, centerY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>移动动画也比较好做，点击的时候记录点击 icon 在 window 上的位置，然后传到下一个界面，计算一下偏移量。</p>
<p>这里面要注意，里面的 weibo 等 icon，我用的并不是图片，用的是FontAwesome，具体用法看下面博客：<br>中文地址：<a href="http://mp.weixin.qq.com/s?__biz=MjM5NDAxNTY4MA==&amp;mid=208795106&amp;idx=1&amp;sn=7745289b193dc8ff20ba81ff9bb23b21&amp;scene=1&amp;srcid=1016s8Satc5ZO0gDrVLqVIBM&amp;key=b410d3164f5f798e7ec8a5a17847eeddc1247303cf5fe40ac8a564295602dd6161bb83fa346de7cd9878b60274b20e77&amp;ascene=0&amp;uin=MTAxNzk0OTM1&amp;devicetype=iMac+MacBookPro11%2C1+OSX+OSX+10.11+build(15A284" target="_blank" rel="noopener">传送门</a>&amp;version=11020201&amp;pass_ticket=WHgV251%2BEh%2Bkh7UMBqQp034b8MGYzxeoJ7l9Ncwz3iE%3D)<br>项目网站：<a href="http://fortawesome.github.io/Font-Awesome/" target="_blank" rel="noopener">传送门</a></p>
<p>demo 代码地址：<a href="https://github.com/KennethYo/Rotate3dAnimation" target="_blank" rel="noopener">传送门</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Animation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]Android 可拖拽 GridView 并且实时切换和拖动到下部删除]]></title>
      <url>http://www.kennethyo.me/2015/09/29/2015-09-29/</url>
      <content type="html"><![CDATA[<p>最近在公司做了一个这样的需求，拖动GridView 中的 item 到指定区域删除，具体效果，请看下面的动图。<br><img src="http://img.blog.csdn.net/20150929150020321" alt="这里写图片描述"></p>
<p>拖动效果是通过隐藏 GridView中被选中的 item，并且同时在 Window 上注册一个 View 来实现，具体逻辑和代码，请参照这篇博客<a href="http://blog.csdn.net/xiaanming/article/details/17718579。" target="_blank" rel="noopener">http://blog.csdn.net/xiaanming/article/details/17718579。</a></p>
<p>我的需求当中，多了一个拖动到底部区域缩小并且删除。</p>
<p>考虑到从 GridView 中拖动一个 item 到另一个 View 中，并且删除，只在 GridView 当中进行绘制被拖动的 item 肯定是达不到进入另一个 view 的效果，即使做起来也是相当麻烦的。</p>
<p>我们可以在 GridView 和删除区域的上一层 View 当中进行绘制，但是看到<a href="http://blog.csdn.net/xiaanming/article/details/17718579" target="_blank" rel="noopener">拖动效果博客</a>当中是直接注册在了 Window 上，这更加减少了工作量，直接在 GridView 当中判断如果用户拖动的坐标y 轴大于了 GridView 的高度，就可以进行缩小动画了。</p>
<p>但是这里要注意的是，注册在 window 上的 View 不能直接在其最外层的  Layout 上进行动画，所以我对ImageView 进行了包裹，并且是对 ImageView 进行动画。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mDragImageView = <span class="keyword">new</span> ImageView(getContext());</span><br><span class="line">      mDragImageView.setImageBitmap(bitmap);</span><br><span class="line">mDragImageView.setBackgroundResource(R.drawable.bg_shadow);</span><br><span class="line"></span><br><span class="line">      mDragLayout = <span class="keyword">new</span> FrameLayout(getContext());</span><br><span class="line">      mDragLayout.addView(mDragImageView);</span><br><span class="line"></span><br><span class="line">      mWindowManager.addView(mDragLayout, mWindowLayoutParams);</span><br></pre></td></tr></table></figure></p>
<p>有了拖动效果实现的代码，其他都很简单，具体请参照代码，<br><a href="https://github.com/KennethYo/DragViewAndDelete" target="_blank" rel="noopener">代码地址</a>，其中里面的一些自定义标签都是我需求中自定义的，可以自行修改。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]高仿SinaWeibo新浪微博发布页面话题效果]]></title>
      <url>http://www.kennethyo.me/2015/08/10/2015-08-10/</url>
      <content type="html"><![CDATA[<p>最近做了一个仿新浪微博话题效果的功能,网上搜索了几个效果,都存在一定问题,最终借鉴别人的思路,完成这一套效果.</p>
<p>首先,我们拆分逻辑以及开发顺序.</p>
<blockquote>
<h6 id="1-实现话题变色效果"><a href="#1-实现话题变色效果" class="headerlink" title="1,实现话题变色效果"></a>1,实现话题变色效果</h6><h6 id="2-实现插入话题效果"><a href="#2-实现插入话题效果" class="headerlink" title="2,实现插入话题效果"></a>2,实现插入话题效果</h6><h6 id="3-实现话题选中删除效果"><a href="#3-实现话题选中删除效果" class="headerlink" title="3,实现话题选中删除效果"></a>3,实现话题选中删除效果</h6><h6 id="4-实现点击话题-光标在话题之后"><a href="#4-实现点击话题-光标在话题之后" class="headerlink" title="4,实现点击话题,光标在话题之后"></a>4,实现点击话题,光标在话题之后</h6></blockquote>
<p><img src="http://img.blog.csdn.net/20150809173121271" alt="这里写图片描述"></p>
<p>下面我们就一步一步实现效果.</p>
<hr>
<h2 id="一-实现话题变色"><a href="#一-实现话题变色" class="headerlink" title="一,实现话题变色"></a>一,实现话题变色</h2><p>实现逻辑主要是通过<code>EditText</code>的<code>addTextChangedListener()</code>来进行监听文本变动,通过正则表达式来匹配出文本中的话题.</p>
<h5 id="利用正则表达式获取全部话题"><a href="#利用正则表达式获取全部话题" class="headerlink" title="利用正则表达式获取全部话题:"></a>利用正则表达式获取全部话题:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正则表达式,一定要和服务器以及 iOS 端统一</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String topicRegex = <span class="string">"#([^#]+?)#"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title">findTopic</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Pattern p = Pattern.compile(topicRegex);</span><br><span class="line">        Matcher m = p.matcher(s);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            list.add(m.group());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="通过正则表达式匹配出的话题集合-遍历出每个话题的-startIndex-位置-后来发现Matcher方法是有获取-index-的方法-并且通过EditText-getText-方法获取的Editable直接对文本进行操作"><a href="#通过正则表达式匹配出的话题集合-遍历出每个话题的-startIndex-位置-后来发现Matcher方法是有获取-index-的方法-并且通过EditText-getText-方法获取的Editable直接对文本进行操作" class="headerlink" title="通过正则表达式匹配出的话题集合,遍历出每个话题的 startIndex 位置(后来发现Matcher方法是有获取 index 的方法),并且通过EditText.getText()方法获取的Editable直接对文本进行操作:"></a>通过正则表达式匹配出的话题集合,遍历出每个话题的 startIndex 位置(后来发现<code>Matcher</code>方法是有获取 index 的方法),并且通过<code>EditText.getText()</code>方法获取的<code>Editable</code>直接对文本进行操作:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"MainActivity"</span>, <span class="string">"onTextChanged"</span>);</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(s)) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1,查找话题</span></span><br><span class="line">        String content = s.toString();</span><br><span class="line">        mTopicList.clear();</span><br><span class="line">        mTopicList.addAll(findTopic(s.toString()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2,为查找出的变色</span></span><br><span class="line">        <span class="comment">//首先要为editable,去除之前设置的colorSpan</span></span><br><span class="line">        Editable editable = mEditText.getText();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mColorSpans.size(); i++) &#123;</span><br><span class="line">            editable.removeSpan(mColorSpans.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        mColorSpans.clear();</span><br><span class="line">        <span class="comment">//为editable,中的话题加入colorSpan</span></span><br><span class="line">        <span class="keyword">int</span> findPos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> size = mTopicList.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;<span class="comment">//便利话题</span></span><br><span class="line">            String topic = mTopicList.get(i);</span><br><span class="line">            findPos = content.indexOf(topic, findPos);</span><br><span class="line">            <span class="keyword">if</span> (findPos != -<span class="number">1</span>) &#123;</span><br><span class="line">                ForegroundColorSpan colorSpan = <span class="keyword">new</span> ForegroundColorSpan(Color.BLUE);</span><br><span class="line">                editable.setSpan(colorSpan, findPos, findPos = findPos + topic.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">                mColorSpans.add(colorSpan);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="二-实现插入话题效果"><a href="#二-实现插入话题效果" class="headerlink" title="二,实现插入话题效果"></a>二,实现插入话题效果</h2><p>新浪微博的插入话题效果,是开启一个新的页面,点击一个话题后,插入光标所在的位置.这里我用一个按钮模仿了这个动作.要注意的是,要记录插入之前光标的位置,并且在插入话题后,把光标放置在话题之后:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (v.getId() == R.id.button) &#123;</span><br><span class="line">            <span class="comment">//插入话题</span></span><br><span class="line">            <span class="keyword">int</span> selectionStart = mEditText.getSelectionStart();</span><br><span class="line">			<span class="comment">//下面这些操作也可以直接替换为操作 EditText 的Editable实现,下面的代码 review 后看起来由点蠢,直接调用 insert 方法比较巧妙</span></span><br><span class="line">            String content = mEditText.getText().toString();</span><br><span class="line"></span><br><span class="line">            String firstStr = content.substring(<span class="number">0</span>, selectionStart);</span><br><span class="line">            String secondStr = content.substring(selectionStart, content.length());</span><br><span class="line"></span><br><span class="line">            String insertTopic = <span class="string">"#这是一个插入的话题#"</span>;</span><br><span class="line">            mEditText.setText(firstStr + insertTopic + secondStr);</span><br><span class="line">            mEditText.setSelection(selectionStart + insertTopic.length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="三-实现话题选中删除效果"><a href="#三-实现话题选中删除效果" class="headerlink" title="三,实现话题选中删除效果"></a>三,实现话题选中删除效果</h2><p>这里也是要时时判断光标所在的位置,当光标出现在话题之后,再次点击删除,就截获为选中话题效果,实现起来也是很简单的.</p>
<p>但是要注意的是,我们不能利用 activity 里面的<code>onKeyDown()</code>和<code>onKeyUp()</code>两个回调,通过 log 发现文本变动和按键点击的回调顺序为<code>beforeTextChanged-&gt;onTextChanged-&gt;afterTextChanged-&gt;onKeyDown-&gt;onKeyUp</code>.</p>
<p>这也说明了如果通过 拦截<code>onKeyDown()</code>和<code>onKeyUp()</code>两个回调时,文本是已经删除之后的文本,并能有效的达到我们要实现的目的,那么有没有是文本改变之前就能截取到按键的方法呢?</p>
<p>其实我们可以通过监听<code>EditText</code>的<code>setOnKeyListener()</code>方法来监听按键(<code>onKey-&gt;beforeTextChanged-&gt;onTextChanged-&gt;afterTextChanged-&gt;onKeyDown-&gt;onKeyUp</code>):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKey</span><span class="params">(View v, <span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"MainActivity"</span>, <span class="string">"onKey"</span>);</span><br><span class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_DEL &amp;&amp; event.getAction() == KeyEvent.ACTION_DOWN &amp;&amp; mCheckBox2.isChecked()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> selectionStart = mEditText.getSelectionStart();</span><br><span class="line">            <span class="keyword">int</span> selectionEnd = mEditText.getSelectionEnd();</span><br><span class="line">			<span class="comment">//如果光标起始和结束在同一位置,说明是选中效果,直接返回 false 交给系统执行删除动作</span></span><br><span class="line">            <span class="keyword">if</span> (selectionStart != selectionEnd) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Editable editable = mEditText.getText();</span><br><span class="line">            String content = editable.toString();</span><br><span class="line">            <span class="keyword">int</span> lastPos = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> size = mTopicList.size();</span><br><span class="line">            <span class="comment">//遍历判断光标的位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                String topic = mTopicList.get(i);</span><br><span class="line">                lastPos = content.indexOf(topic, lastPos);</span><br><span class="line">                <span class="keyword">if</span> (lastPos != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (selectionStart != <span class="number">0</span> &amp;&amp; selectionStart &gt;= lastPos &amp;&amp; selectionStart &lt;= (lastPos + topic.length())) &#123;</span><br><span class="line">                        <span class="comment">//选中话题</span></span><br><span class="line">                        mEditText.setSelection(lastPos, lastPos + topic.length());</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                lastPos += topic.length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="四-实现点击话题-光标在话题之后"><a href="#四-实现点击话题-光标在话题之后" class="headerlink" title="四,实现点击话题,光标在话题之后"></a>四,实现点击话题,光标在话题之后</h2><p>逻辑处理就是监听<code>EditText</code>的点击事件,处理光标所在位置,如果在位置在话题内,立即放置在话题的后面,逻辑比较简单,直接上代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (v.getId() == R.id.editText &amp;&amp; mCheckBox1.isChecked()) &#123;</span><br><span class="line">            <span class="keyword">int</span> selectionStart = mEditText.getSelectionStart();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> lastPos = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> size = mTopicList.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                String topic = mTopicList.get(i);</span><br><span class="line">                lastPos = mEditText.getText().toString().indexOf(topic, lastPos);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (lastPos != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (selectionStart &gt;= lastPos &amp;&amp; selectionStart &lt;= (lastPos + topic.length())) &#123;</span><br><span class="line">                        <span class="comment">//在这position 区间就移动光标</span></span><br><span class="line">                        mEditText.setSelection(lastPos + topic.length());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                lastPos = lastPos + topic.length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<p>最终还是有点小遗憾没有完成.当拷贝一段已经变色的话题,再粘贴到文本后,无法删除掉拷贝进来文本的变色效果,尝试调用<code>Editable.clearSpans()</code>去除全部 span 也无法实现,并且这个方法会导致直接卡死.后来直接使用<code>EditText.setText()</code>控制文本,确实达到了效果,但是当输入法是类似 mx4默认输入法效果时(效果大概是,输入的拼音直接显示在 EditText 里面,点击被选汉字,替换掉拼音),会把输入的拼音放入到文本里,所以上面的代码,我一般是直接操作 Editable.</p>
<p>如果有更好的方法或者修复了上面的小遗憾,请留言指教.</p>
<p>Demo 地址：<a href="https://github.com/KennethYo/SinaTopic" target="_blank" rel="noopener">https://github.com/KennethYo/SinaTopic</a></p>
<p>转载请注明出处:<a href="http://www.kennethyo.me">http://www.kennethyo.me</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[译]介绍MVP Model-View-Presenter在Android中的应用]]></title>
      <url>http://www.kennethyo.me/2015/05/25/2015-05-25/</url>
      <content type="html"><![CDATA[<p>这篇文章是我学习MVP模式时翻译的，原文是<a href="http://konmik.github.io/author/konstantin-mikheev.html" target="_blank" rel="noopener">Konstantin Mikheev</a>所写，<a href="http://konmik.github.io/introduction-to-model-view-presenter-on-android.html?utm_source=Android+Weekly&amp;utm_campaign=5589504b56-Android_Weekly_148&amp;utm_medium=email&amp;utm_term=0_4eb677ad19-5589504b56-337835113" target="_blank" rel="noopener">传送门</a>。<br>因英语水平有限，翻译的很生硬，基本靠Google，请见谅。以下是译文。<br>转载请注明出处:<a href="http://blog.csdn.net/kennethyo" target="_blank" rel="noopener">http://blog.csdn.net/kennethyo</a></p>
<hr>
<p>这篇文章我会通过一个最简单的例子去一步步介绍MVP模式在Android中的最佳实践。同时我也会介绍一个使MVP模式在Android开发中变简单的library。</p>
<h1 id="简单？怎么才能从中获益呢？"><a href="#简单？怎么才能从中获益呢？" class="headerlink" title="简单？怎么才能从中获益呢？"></a>简单？怎么才能从中获益呢？</h1><h2 id="什么是MVP"><a href="#什么是MVP" class="headerlink" title="什么是MVP"></a>什么是MVP</h2><p><strong>View</strong>层是用来显示数据和相应数据操作的。在Android中，它可能是Activity，Fragment，View或者Dialog。</p>
<p><strong>Model</strong>层是数据访问层，例如数据库API或者远程服务器访问API。</p>
<p><strong>Presenter</strong>层提供View层和Model层的数据进行联系。Presenter层也可以控制后台Task。</p>
<p>在Android中，MVP模式可以把后台线程从Activitys/Views/Fragments中脱离出来，使它们在大部分生命周期事件中更加独立。这样的应用变得更加简单，整个程序的稳定性提升了10倍不止，应用代码变得更加少，代码可维护性变得更加友善，开发者的生命变得更加开心。</p>
<h2 id="在Android中，为什么是MVP"><a href="#在Android中，为什么是MVP" class="headerlink" title="在Android中，为什么是MVP"></a>在Android中，为什么是MVP</h2><h3 id="原因1：保持简单傻瓜"><a href="#原因1：保持简单傻瓜" class="headerlink" title="原因1：保持简单傻瓜"></a>原因1：保持简单傻瓜</h3><p>如果你还没读过这篇文章，请读一遍：<a href="https://people.apache.org/~fhanik/kiss.html" target="_blank" rel="noopener">The Kiss Principle</a></p>
<pre><code>·大多数Android程序仅仅使用了View-Model模式。
·程序员需要参与View的复杂性，而不是解决业务。
</code></pre><p>在应用中你仅仅使用Model-View，最后会落得“一切连接这一切”的状态。</p>
<p><img src="http://img.blog.csdn.net/20150525132155795" alt="这里写图片描述"></p>
<p>如果这个示例图看起来不是那么复杂，那么想想每个View可能随时消失和随时出现。别忘了保存和恢复view的状态。为临时View attache 几个后台任务，蛋糕准备好了！</p>
<p>另一种“一切连接着一切”就是上帝对象。</p>
<p><img src="http://img.blog.csdn.net/20150525132227292" alt="这里写图片描述"></p>
<p>上地对象太过于复杂；代码块不能被重复利用，测试或方便的debug和重构。</p>
<h4 id="使用MVP模式"><a href="#使用MVP模式" class="headerlink" title="使用MVP模式"></a>使用MVP模式</h4><p><img src="http://img.blog.csdn.net/20150525132427577" alt="这里写图片描述"></p>
<pre><code>·复杂的任务被分解成简单的任务，并且容易解决。
·更小的对象，更少的bug，更简单debug。
·可测试。
</code></pre><h3 id="原因2：后台任务"><a href="#原因2：后台任务" class="headerlink" title="原因2：后台任务"></a>原因2：后台任务</h3><p>无论何时，你写Activity，Fragment或者自定义View，你可以把所有方法与后台任务的外部或者静态类联系起来。这样，你的后台任务将不会和一个Activity联系，不会造成内存泄露和不用Activity来消费。我叫这样的对象为“Presenter”。</p>
<p>有那么几种处理后台线程的方法，但都是不可靠的，不过MVP是可靠的。</p>
<h4 id="为什么MVP可以"><a href="#为什么MVP可以" class="headerlink" title="为什么MVP可以"></a>为什么MVP可以</h4><p>通过这个视图，显示了不同的应用控件，在发生configuration发生改变或者内存溢出的时候发生了什么。每一个Android开发者都应该知道这个视图，然而这样一个视图并不是每个开发都知道。</p>
<p><img src="http://img.blog.csdn.net/20150525133414325" alt="这里写图片描述"></p>
<p><strong>Case 1:</strong>当用户旋转屏幕，改变语言设置， attache 一个外部显示器，等情况，通常Configuration会发生变化。更多关于[Configuration]<br>(<a href="http://developer.android.com/reference/android/R.attr.html#configChanges)请阅读链接。" target="_blank" rel="noopener">http://developer.android.com/reference/android/R.attr.html#configChanges)请阅读链接。</a></p>
<p><strong>Case 2:</strong>当用户在开发者设置里面选择了“Don’t keep activities”或者其他Activity到最顶层，Activity会发生restart。</p>
<p><strong>Case 3:</strong>没有足够的内存和应用进入后台，process会restart。</p>
<p><strong>最后</strong><br>现在你可以看到，Fragment当中设置setRetainInstance(true)在这里是没用帮助的，我们只需要设置save/restore就可以。因此，我们可以简单的去除Fragment的setRetainInstance方法，来限制问题的数量。</p>
<p><img src="http://img.blog.csdn.net/20150525133504401" alt="这里写图片描述"></p>
<p>|Activity, View, Fragment, DialogFragment Static variables and threads | save/restore no change | save/restore reset |<br>现在看起来爽多了。我们在应用任何情况下，只需要写两段代码就可以完成restore：</p>
<pre><code>·Activity，View，Fragment，DialogFragment的save/restore。
·线程restart，restart后台请求。
</code></pre><p>第一部分，是Android API提供的方法。第二部分是Presenter层的工作。Presenter只要记住那些请求需要被执行，如果一个进程执行期间restart，Presenter将会重新执行它们。</p>
<h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><p>这个例子将加载服务器上得数据来显示一些items。如果出现错误将显示一个toast。</p>
<p>我推荐使用<a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">RxJava</a>来构建Presenter，因为这个Library控制数据流很简单。</p>
<p>我也要感谢创建<a href="http://www.icndb.com/" target="_blank" rel="noopener">The Internet Chuck Norris Database</a>的人，我把它用在了我例子当中。</p>
<h2 id="没用MVP的例子00："><a href="#没用MVP的例子00：" class="headerlink" title="没用MVP的例子00："></a>没用MVP的<a href="https://github.com/konmik/MVPExamples/tree/master/example00" target="_blank" rel="noopener">例子00</a>：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_NAME = <span class="string">"Chuck Norris"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayAdapter&lt;ServerAPI.Item&gt; adapter;</span><br><span class="line">    <span class="keyword">private</span> Subscription subscription;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ListView listView = (ListView)findViewById(R.id.listView);</span><br><span class="line">        listView.setAdapter(adapter = <span class="keyword">new</span> ArrayAdapter&lt;&gt;(<span class="keyword">this</span>, R.layout.item));</span><br><span class="line">        requestItems(DEFAULT_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        unsubscribe();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestItems</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        unsubscribe();</span><br><span class="line">        subscription = App.getServerAPI()</span><br><span class="line">            .getItems(name.split(<span class="string">"\\s+"</span>)[<span class="number">0</span>], name.split(<span class="string">"\\s+"</span>)[<span class="number">1</span>])</span><br><span class="line">            .delay(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">            .subscribe(<span class="keyword">new</span> Action1&lt;ServerAPI.Response&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(ServerAPI.Response response)</span> </span>&#123;</span><br><span class="line">                    onItemsNext(response.items);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable error)</span> </span>&#123;</span><br><span class="line">                    onItemsError(error);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemsNext</span><span class="params">(ServerAPI.Item[] items)</span> </span>&#123;</span><br><span class="line">        adapter.clear();</span><br><span class="line">        adapter.addAll(items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemsError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, throwable.getMessage(), Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unsubscribe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (subscription != <span class="keyword">null</span>) &#123;</span><br><span class="line">            subscription.unsubscribe();</span><br><span class="line">            subscription = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个有经验的开发会发现这个例子是有一些缺陷的：</p>
<pre><code>·每次翻转屏幕都会重新请求一次——每次翻转屏幕用户都会看一会儿空白界面。
·如果用户经常翻转屏幕，就会导致内存泄露——每个回调都会保持对MainActivity的引用，并且request运行的时候会把MainActivity保持在内存中。这绝对有可能导致因为内存溢出而应用crash，或者应用运行明显缓慢。
</code></pre><h2 id="使用MVP的例子01"><a href="#使用MVP的例子01" class="headerlink" title="使用MVP的例子01"></a>使用MVP的<a href="https://github.com/konmik/MVPExamples/tree/master/example01" target="_blank" rel="noopener">例子01</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_NAME = <span class="string">"Chuck Norris"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServerAPI.Item[] items;</span><br><span class="line">    <span class="keyword">private</span> Throwable error;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MainActivity view;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainPresenter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        App.getServerAPI()</span><br><span class="line">            .getItems(DEFAULT_NAME.split(<span class="string">"\\s+"</span>)[<span class="number">0</span>], DEFAULT_NAME.split(<span class="string">"\\s+"</span>)[<span class="number">1</span>])</span><br><span class="line">            .delay(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">            .subscribe(<span class="keyword">new</span> Action1&lt;ServerAPI.Response&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(ServerAPI.Response response)</span> </span>&#123;</span><br><span class="line">                    items = response.items;</span><br><span class="line">                    publish();<span class="comment">//onNext</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                    error = throwable;</span><br><span class="line">                    publish();<span class="comment">//onError</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTakeView</span><span class="params">(MainActivity view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.view = view;</span><br><span class="line">        publish();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (items != <span class="keyword">null</span>)</span><br><span class="line">                view.onItemsNext(items);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (error != <span class="keyword">null</span>)</span><br><span class="line">                view.onItemsError(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从技术角度讲：MainPresenter有三个线程事件：onNext，onError，onTakeview。通过<code>publish()</code>方法，onNext或者onError事件会发布到MainActivity实例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayAdapter&lt;ServerAPI.Item&gt; adapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MainPresenter presenter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        ListView listView = (ListView)findViewById(R.id.listView);</span><br><span class="line">        listView.setAdapter(adapter = <span class="keyword">new</span> ArrayAdapter&lt;&gt;(<span class="keyword">this</span>, R.layout.item));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (presenter == <span class="keyword">null</span>)</span><br><span class="line">            presenter = <span class="keyword">new</span> MainPresenter();</span><br><span class="line">        presenter.onTakeView(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        presenter.onTakeView(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (isFinishing())</span><br><span class="line">            presenter = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemsNext</span><span class="params">(ServerAPI.Item[] items)</span> </span>&#123;</span><br><span class="line">        adapter.clear();</span><br><span class="line">        adapter.addAll(items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemsError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, throwable.getMessage(), Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MainActivity 创建 MainPresenter，并且保持MainPresenter在onCreate和onDestory周期之外。MainActivity用一个静态变量引用MainPresenter，当由于OOM导致线程重启，MainActivity会检查MainPresenter是否还存在，如果不存在就去创建它。</p>
<p>是的，检查和使用静态变量起来有那么点臃肿，但是稍后我会给大家看如何写的更加优雅。：）</p>
<p>主要思想：</p>
<pre><code>·例子应用不会在每次用户翻转屏幕的时候重新请求。
·如果线程被重启，再次加载数据。
·当MainActivity被销毁后，MainPresenter不会保持应用
</code></pre><p>MainActivity实例，这样当旋转屏幕的时候就不会内存泄露，而且也没有取消请求。</p>
<p>##Nucleus</p>
<p>Nuleus 是我创建的一个library，灵感来自于<a href="https://github.com/square/mortar" target="_blank" rel="noopener">Mortar</a>library和<a href="https://people.apache.org/~fhanik/kiss.html" target="_blank" rel="noopener">Keep It Stupid Simple</a>这篇文章。</p>
<p>下面是功能列表：</p>
<pre><code>·支持在View/Fragment/Activity状态Bundle中save/restore Presenter的状态。Presenter能够存储请求参数到重新启动。

·提供一个工具，通过一行代码可以把请求结果和错误放到正确的view当中去，因此无需再写`！=null`来检查。

·一个Presenter可以被多个view实例引用。如果Presenter实例使用[Dagger]，就不能被多个view引用。

·通过一行代码就可以把Presenter和view进行绑定。

·提供view的基类：NucleusView, NucleusFragment, NucleusSupportFragment, NucleusActivity。你也可以从他们当中copy代码到任何类当中来利用Nucleus的Presenters。

·Presenter在线程重启之后能够自动restart。在`onDestroy`自动取消注册RxJava。

·最后，要保持简单明了，让每一个开发者都能够看懂。这里通过大约180行代码来驱动Presenter，230行RxJava代码来支持。
</code></pre><h2 id="使用Nuleus的例子02"><a href="#使用Nuleus的例子02" class="headerlink" title="使用Nuleus的例子02"></a>使用<a href="https://github.com/konmik/nucleus" target="_blank" rel="noopener">Nuleus</a>的<a href="https://github.com/konmik/MVPExamples/tree/master/example02" target="_blank" rel="noopener">例子02</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenter</span> <span class="keyword">extends</span> <span class="title">RxPresenter</span>&lt;<span class="title">MainActivity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_NAME = <span class="string">"Chuck Norris"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedState);</span><br><span class="line"></span><br><span class="line">        App.getServerAPI()</span><br><span class="line">            .getItems(DEFAULT_NAME.split(<span class="string">"\\s+"</span>)[<span class="number">0</span>], DEFAULT_NAME.split(<span class="string">"\\s+"</span>)[<span class="number">1</span>])</span><br><span class="line">            .delay(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">            .compose(<span class="keyword">this</span>.&lt;ServerAPI.Response&gt;deliverLatestCache())</span><br><span class="line">            .subscribe(<span class="keyword">new</span> Action1&lt;ServerAPI.Response&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(ServerAPI.Response response)</span> </span>&#123;</span><br><span class="line">                    getView().onItemsNext(response.items);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                    getView().onItemsError(throwable);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresPresenter</span>(MainPresenter<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">NucleusActivity</span>&lt;<span class="title">MainPresenter</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayAdapter&lt;ServerAPI.Item&gt; adapter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        ListView listView = (ListView)findViewById(R.id.listView);</span><br><span class="line">        listView.setAdapter(adapter = <span class="keyword">new</span> ArrayAdapter&lt;&gt;(<span class="keyword">this</span>, R.layout.item));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemsNext</span><span class="params">(ServerAPI.Item[] items)</span> </span>&#123;</span><br><span class="line">        adapter.clear();</span><br><span class="line">        adapter.addAll(items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemsError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, throwable.getMessage(), Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正如你看到的，这个例子明显比前一个例子短，并且简洁。Nucleus用来创建，销毁，保存Presenter， attache 或 detached一个view到Presenter，并且把请求结果自动发送到被 attache 的View当中。</p>
<p><code>MainPresenter</code>的代码比较少是因为通过<code>deliverLatestCache()</code>操作，期延迟了数据和错误，直到view是可用的，才会把数据和错误送到view里。它把数据缓存到内存中，这样当configuration改变的时候，数据还是可用的。</p>
<p><code>MainActivity</code>的代码比较少是因为Presenter的创建由<code>NucleusActivity</code>来管理。所有你需要绑定presenter的类，只需要在类上声明<code>@RequiresPresenter(MainPresenter.class)</code>注释。</p>
<p>警告！注释！在Android世界中，如果你使用注释，这是一个很好的做法，这不会降低性能。我已Galaxy S（2010的设备）作为基准测试，处理注释只会花去0.3ms。这种注视只会发生在view中，所以我认为注释是对系统性能没有消耗的。</p>
<p>##更多例子</p>
<p>这是一个参数持久性的<a href="https://github.com/konmik/nucleus/tree/master/nucleus-example" target="_blank" rel="noopener">例子</a>。<a href="https://github.com/konmik/nucleus/tree/master/nucleus-example-with-tests" target="_blank" rel="noopener">测试列子</a>。</p>
<h2 id="deliverLatestCache-方法"><a href="#deliverLatestCache-方法" class="headerlink" title="deliverLatestCache()方法"></a><code>deliverLatestCache()</code>方法</h2><p>这是RxPresenter的一个方法，它有三种版本：</p>
<p>·<code>deliver()</code>延迟onNext，onError和onComplete到view变成可用的才会释放。当你做一次请求的时候可以使用它，例如登录到web service。<a href="http://konmik.github.io/nucleus/nucleus/presenter/RxPresenter.html#deliver(" target="_blank" rel="noopener">Javadoc</a>)</p>
<p>·<code>deliverLatest()</code>如果有一个新的onNext可用，将会抛弃老的onNext。如果你有数据需要更新，这将不会积累没有必要的数据。<a href="http://konmik.github.io/nucleus/nucleus/presenter/RxPresenter.html#deliverLatest(" target="_blank" rel="noopener">Javadoc</a>)</p>
<p>·<code>deliverLastestCache()</code>和<code>deliverLatest()</code>比较相似，它保存最后一次数据在内存中，当另一个view变成可用的（例如：configuration 改变），它将重新发送数据到view。如果你不想save/restore请求结果到你的view中（返回结果比较大或者不方便存储到Bundle中），这个方法将允许你去做出更好的用户体验。<a href="http://konmik.github.io/nucleus/nucleus/presenter/RxPresenter.html#deliverLatestCache(" target="_blank" rel="noopener">Javadoc</a>)</p>
<h2 id="Presenter的生命周期"><a href="#Presenter的生命周期" class="headerlink" title="Presenter的生命周期"></a>Presenter的生命周期</h2><p>Presenter的生命周期与Android的控件相比，明显少一些。</p>
<p>·<code>void onCreate(Bundle savedState)</code> - 当Presenter被创建的时候会被调用。<a href="http://konmik.github.io/nucleus/nucleus/presenter/Presenter.html#onCreate(android.os.Bundle" target="_blank" rel="noopener">Javadoc</a>)</p>
<p>·<code>void onDestroy()</code> - 离开view的时候会被调用。<a href="http://konmik.github.io/nucleus/nucleus/presenter/Presenter.html#onDestroy(" target="_blank" rel="noopener">Javadoc</a>)</p>
<p>·<code>void onSave(Bundle state)</code> - 当View的<code>onSaveInstanceState</code>被调用时会调用，保持Presenter的状态。<a href="http://konmik.github.io/nucleus/nucleus/presenter/Presenter.html#onTakeView(ViewType" target="_blank" rel="noopener">Javadoc</a>)</p>
<p>·<code>void onTakeView(ViewType view)</code> -在Activity或者Fragment调用<code>onResume()</code>，或者在<code>android.view.View#onAttachedToWindow()</code>期间。 <a href="http://konmik.github.io/attachenucleus/nucleus/presenter/Presenter.html#onTakeView(ViewType" target="_blank" rel="noopener">Javadoc</a>)</p>
<p>·<code>void onDropView()</code> - Activity或者Fragment调用<code>onPause()</code>，或者在<code>android.view.View#onDetachedFromWindow()</code>期间。<a href="http://konmik.github.io/nucleus/nucleus/presenter/Presenter.html#onDropView(" target="_blank" rel="noopener">Javadoc</a>)</p>
<h2 id="View回收和View栈"><a href="#View回收和View栈" class="headerlink" title="View回收和View栈"></a>View回收和View栈</h2><p>通常你的view（Fragment和自定义view）在与用户的交互下随机 attache 和 detached。每次view被 detached的时候不去销毁Presenter，这可能是一个好主意。你可以任何时间 detached和 attache view，presenter会比这些动作活的更持久，继续后台的工作。</p>
<p>联想到view的回收，有个问题：fragment无法知道是否因为配置改变或者被弹出栈被 detached。</p>
<p>Nucleus的意见是：销毁presenter只能发生在view的<code>onDetachedFromWindow()/onDestroy()</code>并且activity是finish的。所以，如果你销毁view是在正常的activity生命周期，你可发出信号来通知presenter也应该被销毁。这里有两个方法可以用<code>NucleusLayout.destroyPresenter()</code>和<code>NucleusFragment.destroyPresenter()</code>。</p>
<p>举个例子，下面是我在我的项目里面如何管理Fragment <code>pop()</code>操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fragment = fragmentManager.findFragmentById(R.id.fragmentStackContainer);</span><br><span class="line">   fragmentManager.popBackStackImmediate();</span><br><span class="line">   <span class="keyword">if</span> (fragment <span class="keyword">instanceof</span> NucleusFragment)</span><br><span class="line">       ((NucleusFragment)fragment).destroyPresenter();</span><br></pre></td></tr></table></figure>
<p>你可以对replace Fragment做类似的操作。压栈操作的时候也可以。</p>
<p>每次view从Activity detached的时候，你可以决定去销毁presenter来避免这个问题，但是你也将在view被detach的时候失去后台任务。</p>
<p>因此，view回收这部分，完全取决于你。也许，我会找到更好的解决方案，如果你知道，请告诉我。</p>
<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="把你的请求参数放在Presenter里"><a href="#把你的请求参数放在Presenter里" class="headerlink" title="把你的请求参数放在Presenter里"></a>把你的请求参数放在Presenter里</h2><p>这个规则很简单：主要是为了管理请求。所以view自己不应该掌控和重启请求。从View的角度来看，后台任务，永远不会消失，不需要任何回调也会返回一个结果或错误。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenter</span> <span class="keyword">extends</span> <span class="title">RxPresenter</span>&lt;<span class="title">MainActivity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name = DEFAULT_NAME;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedState);</span><br><span class="line">        <span class="keyword">if</span> (savedState != <span class="keyword">null</span>)</span><br><span class="line">            name = savedState.getString(NAME_KEY);</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSave</span><span class="params">(@NonNull Bundle state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSave(state);</span><br><span class="line">        state.putString(NAME_KEY, name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>我建议使用<a href="https://github.com/frankiesardo/icepick" target="_blank" rel="noopener">Icepick</a>library。无需使用注解，就可以减少代码量，并且简化应用逻辑——这一切都发生在编译过程中。可以配合<a href="http://jakewharton.github.io/butterknife" target="_blank" rel="noopener">ButterKnife</a>使用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenter</span> <span class="keyword">extends</span> <span class="title">RxPresenter</span>&lt;<span class="title">MainActivity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Icicle</span> String name = DEFAULT_NAME;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedState);</span><br><span class="line">        Icepick.restoreInstanceState(<span class="keyword">this</span>, savedState);</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSave</span><span class="params">(@NonNull Bundle state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSave(state);</span><br><span class="line">        Icepick.saveInstanceState(<span class="keyword">this</span>, state);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>如果你有超过2个的请求参数，这个library会存储它们。你可以创建一个<code>BasePresenter</code>，并且把Icepick放在类里，这样所有的子类将会获得<code>@Icicle</code>，无需再次实现<code>onSave</code>。这也工作在activity，Fragment和view。</p>
<h2 id="在onTakeView主线程中，执行一个即时查询Javadoc"><a href="#在onTakeView主线程中，执行一个即时查询Javadoc" class="headerlink" title="在onTakeView主线程中，执行一个即时查询Javadoc)"></a>在onTakeView主线程中，执行一个即时查询<a href="http://konmik.github.io/nucleus/nucleus/presenter/Presenter.html#onTakeView(ViewType" target="_blank" rel="noopener">Javadoc</a>)</h2><p>有时候，你要查询一段小数据，例如从数据库中读取一小段数据。虽然你可以用Nucleus简单的创建一个请求，但是你不必到处使用Nucleus。如果在一个Fragment创建的过程中创建一个后台请求，用户会看到一个空白屏幕一小会儿，尽管这个请求就几毫秒。因此，为了是代码更简短，更友善，使用主线程吧。</p>
<h2 id="不要尝试用Presenter控制你的View"><a href="#不要尝试用Presenter控制你的View" class="headerlink" title="不要尝试用Presenter控制你的View"></a>不要尝试用Presenter控制你的View</h2><p>这么做不是个好方式——应用的逻辑会变得更复杂，这是不正常的方式。</p>
<p>正常的方式是，控制流应该是从用户，通过View，到Presenter，再到Model。用户是控制应用程序的一个来源。因此我们的控制流应该是从用户开始，而不是从应用的内部的结构。</p>
<p>当控制流是从View到Presenter，然后Presenter到Model，这是一个线性流，这样很好写代码。这样你得到了一个简单的序列，user-&gt;view-&gt;presenter-&gt;model-&gt;data。但是，当控制流是这个样子的：user-&gt;view-&gt;presenter-&gt;view-&gt;presenter-&gt;model-&gt;data，这只是违反了KISS原则。</p>
<p>Fragment？是的，Fragment有时候会违反正常的控制流。他们太复杂了。这里有一篇不错的文章，关于思考Fragment：<a href="http://corner.squareup.com/2014/10/advocating-against-android-fragments.html" target="_blank" rel="noopener">Advocating Against Android Fragments</a>。但是<a href="https://github.com/square/flow" target="_blank" rel="noopener">Flow</a>也没有简化太多。</p>
<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>如果你熟悉MVC，别用了。MVC完全不同于MVP，MVC并没有解决开发面临的问题。</p>
<p>什么是MVC？</p>
<pre><code>·Model应用内部的逻辑部分。负责数据存储。
·View唯一和MVP共同的部分，应用中呈现到屏幕的部分。
·Controller输入设备，例如键盘，鼠标，操纵杆。
</code></pre><p>当你有一台电脑和一个用键盘简单驱动的游戏的时候，MVC出现有很长一段时间了。没有windows，没有图形交互界面，应用程序接收输入（Controller），维持一些状态（Model），产生输出（View）。控制流是这样的：Controller-&gt;Model-&gt;View。这种模式绝对不能用在Android中。</p>
<p>有很多混淆的MVC模式。人们相信他们使用的是MVC，实际上他们可能用的是MVP（Web开发）。很多Android开发，认为Controller就是控制View，因此他们尝试抽取View的逻辑代码来减少View的代码，用Controller来控制View。我个人没看到这种方式有任何好处。</p>
<h2 id="使用不可变数据结构的复杂关系数据库项目"><a href="#使用不可变数据结构的复杂关系数据库项目" class="headerlink" title="使用不可变数据结构的复杂关系数据库项目"></a>使用不可变数据结构的复杂关系数据库项目</h2><p><a href="https://github.com/google/auto/tree/master/value" target="_blank" rel="noopener">AutoValue</a>是一个这样的library，在它的描述中写了一堆好处，我推荐看看它。<a href="https://github.com/frankiesardo/auto-parcel" target="_blank" rel="noopener">AutoParcel</a>是AutoValue一个Android项目。使用的主要原因是，不用改变对象，通过AutoParcel转换，而不用关心其影响了应用程序的其他部分。他们都是线程安全的。</p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>尝试MVP，并且分享给你的朋友。：）</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> MVP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]Android获取运营商]]></title>
      <url>http://www.kennethyo.me/2015/05/08/2015-05-08/</url>
      <content type="html"><![CDATA[<p>今天接到一个新需求，要给服务器上送设备运营商名称，之后我的第一反应是，umeng都无法精确统计运营商，我如何判断上送具体的运营商呢？如下图：</p>
<p><img src="http://img.blog.csdn.net/20150508163804803" alt="这里写图片描述"></p>
<p>这张图里反映了友盟统计到用户手机的运营商名称，这些名称什么样子的都有。有什么办法精确判断具体是什么运营商呢？比如，只返回“中国移动”，“中国联通”，“中国电信”。</p>
<p>我这里解决的方案是通过设备的MCC/MNC代码来判断。</p>
<p>首先，我们要了解MCC/MNC是什么，请看<a href="http://zh.wikipedia.org/wiki/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener">WIKI百科</a>。通过阅读，我们能够知道，只要对比MCC/MNC编码，就能知道具体是什么运营商了。</p>
<p>其次，就是具体代码了，如下：</p>
<pre><code>&lt;span class=&quot;hljs-javadoc&quot;&gt;/**
     * 返回运营商 需要加入权限 &amp;lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;/&amp;gt; &amp;lt;BR&amp;gt;
     *
     *&lt;span class=&quot;hljs-javadoctag&quot;&gt; @return&lt;/span&gt; 1,代表中国移动，2，代表中国联通，3，代表中国电信，0，代表未知
     *&lt;span class=&quot;hljs-javadoctag&quot;&gt; @author&lt;/span&gt; youzc@yiche.com
     */&lt;/span&gt;
 &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getOperators&lt;/span&gt;(Context context) {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 移动设备网络代码（英语：Mobile Network Code，MNC）是与移动设备国家代码（Mobile Country Code，MCC）（也称为“MCC /&lt;/span&gt;
        &lt;span class=&quot;hljs-comment&quot;&gt;// MNC”）相结合, 例如46000，前三位是MCC，后两位是MNC 获取手机服务商信息&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; OperatorsName = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
        String IMSI =  (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE).getSubscriberId();
        &lt;span class=&quot;hljs-comment&quot;&gt;// IMSI号前面3位460是国家，紧接着后面2位00 运营商代码&lt;/span&gt;
        System.out.println(IMSI);
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (IMSI.startsWith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;46000&quot;&lt;/span&gt;) || IMSI.startsWith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;46002&quot;&lt;/span&gt;) || IMSI.startsWith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;46007&quot;&lt;/span&gt;)) {
            OperatorsName = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;
        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (IMSI.startsWith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;46001&quot;&lt;/span&gt;) || IMSI.startsWith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;46006&quot;&lt;/span&gt;)) {
            OperatorsName = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;
        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (IMSI.startsWith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;46003&quot;&lt;/span&gt;) || IMSI.startsWith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;46005&quot;&lt;/span&gt;)) {
            OperatorsName = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;
        }
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; OperatorsName;
    }
</code></pre><p>通过客户端本地比对MCC/MNC确定运营商这种方式，本身我是不赞同的，我认为把MCC/MNC上送到服务器，由服务器判断这才是最优方案。因为应用打好包分发出去，代码就是死的，未来不可以扩展比对，但是服务器是可以动态的，随时配置比对的MCC/MNC编码。</p>
<pre><code>&lt;div&gt;
    作者：zh08070005 发表于2015/5/8 16:40:08 [原文链接](http://blog.csdn.net/kennethyo/article/details/45582153)
&lt;/div&gt;
&lt;div&gt;
阅读：814 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/45582153#comments)
&lt;/div&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]WebView填坑——小功能篇]]></title>
      <url>http://www.kennethyo.me/2015/04/22/2015-04-22-16-31-06/</url>
      <content type="html"><![CDATA[<p>这两天负责修改了几个关于在webview中打开公司移动站的bug。本身不是很难解，网上查查都有，但是也有必要记录下来作为备忘。</p>
<h3 id="Webview中上传文件"><a href="#Webview中上传文件" class="headerlink" title="Webview中上传文件"></a>Webview中上传文件</h3><p>这里的效果类似在pc端上传文件效果，点击打开一个文件选择器，上传文件图片之类的。</p>
<p><code>openFileChooser（）</code>方法的重载是因为在不同系统中调用的方法参数不一样，具体看注释。</p>
<p><code>ValueCallback&amp;lt;Uri&amp;gt; mUploadMessage</code>作为成员变量的目的是我们要在打开的系统文件选择器<code>finish()</code>后在<code>onActivityResult()</code>时调用。</p>
<p>具体实现代码如下：</p>
<pre><code>&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;initWebView&lt;/span&gt;(){
    webView.setWebChromeClient(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MyWebChromeClient());
}

 &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; ValueCallback&amp;lt;Uri&amp;gt; mUploadMessage;
&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyWebChromeClient&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WebChromeClient&lt;/span&gt; {&lt;/span&gt;

    &lt;span class=&quot;hljs-comment&quot;&gt;// js上传文件的&amp;lt;input type=&quot;file&quot; /&amp;gt;事件捕获&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;// Android &amp;gt; 4.1.1 调用这个方法&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;openFileChooser&lt;/span&gt;(ValueCallback&amp;lt;Uri&amp;gt; uploadMsg, String acceptType, String capture) {
      mUploadMessage = uploadMsg;

      Intent intent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent(Intent.ACTION_GET_CONTENT);
      intent.addCategory(Intent.CATEGORY_OPENABLE);
      intent.setType(TextUtils.isEmpty(acceptType) ? &lt;span class=&quot;hljs-string&quot;&gt;&quot;image/*&quot;&lt;/span&gt; : acceptType);

      MobileSiteActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.startActivityForResult(
          Intent.createChooser(intent, ToolBox.getString(R.string.web_activity_please_chooser)),
          MobileSiteActivity.FILECHOOSER_RESULTCODE);

    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// 3.0 + 调用这个方法&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;openFileChooser&lt;/span&gt;(ValueCallback&amp;lt;Uri&amp;gt; uploadMsg, String acceptType) {
      openFileChooser(uploadMsg, acceptType, &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;);
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// Android &amp;lt; 3.0 调用这个方法&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;openFileChooser&lt;/span&gt;(ValueCallback&amp;lt;Uri&amp;gt; uploadMsg) {
      openFileChooser(uploadMsg, &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;);
    }
  }
  &lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;onActivityResult&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; requestCode, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; resultCode, Intent data) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (FILECHOOSER_RESULTCODE == requestCode) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; == mUploadMessage) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
      Uri result = data == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; || resultCode != RESULT_OK ? &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; : data.getData();
      mUploadMessage.onReceiveValue(result);
      mUploadMessage = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
    }
  }
`&lt;/pre&gt;

### WebView当中网页中的地图为白色，不显示地图

这个问题其实就是你没有打开Javascript支持。打开就好啦~

&lt;pre class=&quot;prettyprint&quot;&gt;`webView.setJavaScriptEnabled(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;// 设置支持javascript脚本&lt;/span&gt;`&lt;/pre&gt;

### WebView中跳转系统拨号键盘

举一反三，既然要打开系统拨号键盘，那邮箱，地图也可以支持。

&lt;pre class=&quot;prettyprint&quot;&gt;`webView.setWebViewClient(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WebViewClient() {
      &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;shouldOverrideUrlLoading&lt;/span&gt;(WebView view, String url) {

        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (url.startsWith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;mailto:&quot;&lt;/span&gt;) || url.startsWith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;geo:&quot;&lt;/span&gt;) || url.startsWith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;tel:&quot;&lt;/span&gt;)) {
          Intent intent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent(Intent.ACTION_VIEW, Uri.parse(url));
          startActivity(intent);
          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;;
        }
        view.loadUrl(url);
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;;
      }
    });`&lt;/pre&gt;

### WebView中支持下载

这里要给WebView设置一个下载监听，监听会回调给你下载地址，这里可以打开系统浏览器去激活下载，用DownloadManger直接去下载也可以，我选择的是第一种方式，这种方式我认为比较符合用户习惯哈。

&lt;pre class=&quot;prettyprint&quot;&gt;` webView.setDownloadListener(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MyWebViewDownLoadListener());`&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;`
 &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyWebViewDownLoadListener&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DownloadListener&lt;/span&gt; {&lt;/span&gt;

    &lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;onDownloadStart&lt;/span&gt;(String url, String userAgent, String contentDisposition,
        String mimetype, &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; contentLength) {

      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; != url) {
        Uri uri = Uri.parse(url);
        Intent intent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent(Intent.ACTION_VIEW, uri);
        startActivity(intent);
      }
    }

  }

        &lt;div&gt;
            作者：zh08070005 发表于2015/4/22 16:31:06 [原文链接](http://blog.csdn.net/kennethyo/article/details/45196891)
        &lt;/div&gt;
        &lt;div&gt;
        阅读：521 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/45196891#comments)
        &lt;/div&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]Android程序猿如何泡设计妹之快速掌握dp和px才可以]]></title>
      <url>http://www.kennethyo.me/2015/01/25/2015-01-25/</url>
      <content type="html"><![CDATA[<p>相信很多Android程序猿已经对身边的设计妹垂涎三尺了，那么如何博得设计妹的好感呢，学好这篇文章就可以了。</p>
<p>程序猿与UI设计妹讨论设计稿和切图的时候，经常会因为dp和px的问题搞的不愉快，这里可以分析出两个原因：</p>
<p>1，程序猿原因，不懂dp和px的换算关系。包括我，以及我见到的大多数开发，更多的时候其实不是很关心dp和px是如何来的，以及如何转换的，只知道掌握一般情况用dp，字体大小用sp，画线用px。</p>
<p>2，设计妹原因，设计不出dp标注，或者甚至就不懂dp是什么东东。大多数公司并不会为Android专门做一套设计稿，只会出一版iOS设计稿，而iOS的设计稿都是用px去标注的，又因为上面的第一个原因，Android程序猿也搞不明白标注的px应该用多少dp。</p>
<p>下面我们就用简单的方式去增进程序猿和设计妹感情吧！</p>
<p>首先，我们要了解这张图：</p>
<p><img src="http://img.blog.csdn.net/20150125224509843?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt></p>
<p>这里面列举了目前Android开发常见的5种dpi，dpi是指每英寸的像素（例如：一个宽是1.5英寸240像素，高是2英寸320像素的手机的dpi是：240px/1.5in=320px/2in=160dpi，既对角线上的每英寸的像素），上面这张表里还少一种，就是LDPI，是MDPI的0.75倍，也就是120DPI。</p>
<p>下面这张图是各种dpi对应的主流手机屏幕：</p>
<p><img src="http://img.blog.csdn.net/20150125224550469?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt></p>
<p>请按照图中下方的公式，分别计算一下屏幕dpi。在mdpi中，dp/pixel = DPI/160，即1dip等价于DPI为160的设备中的1个像素点。那么在xhdpi 320dpi中，就是1dp等价于2像素（再次强调，一定用计算器算一算啊，还有dpi是对角线上的像素密度）。</p>
<p>一般情况设计妹出的图会是xhdpi，既能照顾iOS，又会照顾到Android。既然是xhdpi，我们就可以用1dp=2px来应对设计妹的标注。如果不是xhdpi的图，你也可以按照这个0.75:1:1.5:2:3:4这个比例去换算一下。</p>
<p>帮到这里了，剩下的还得看你的修为了。</p>
<p>下面我再给出几个常用的&#20540;：</p>
<p>Launcher icon：48dp*48dp</p>
<p>Action bar icons：32dp*32dp</p>
<p>Small icons：16dp*16dp</p>
<p>Notification icons：24dp*24dp</p>
<p>如果这些你还不满意，再给你来张图，包你满意：</p>
<p><img src="http://img.blog.csdn.net/20150125224602388?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt></p>
<p>内容参考与网络和<a href="http://developer.android.com/guide/practices/screens_support.html#range" target="_blank" rel="noopener">Android.com</a></p>
<p>如果打不开的话请看这里<a href="http://www.kennethyo.me/post/category/cheng-xu-yuan-de-wu-qi-zhi-vpn">《程序员的武器之一VPN》</a></p>
<pre><code>&lt;div&gt;
    作者：zh08070005 发表于2015/1/25 22:44:22 [原文链接](http://blog.csdn.net/kennethyo/article/details/43123731)
&lt;/div&gt;
&lt;div&gt;
阅读：1117 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/43123731#comments)
&lt;/div&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]CardView初级使用]]></title>
      <url>http://www.kennethyo.me/2014/12/28/2014-12-28/</url>
      <content type="html"><![CDATA[<p><code>CardView</code>发布于android sdk v7的支持包中，具体如何将项目加入v7包，请看这里<a href="http://kennethyo.farbox.com/post/android/recyclerviewchu-ji-shi-yong#main" target="_blank" rel="noopener">传送门</a>。</p>
<p>卡片化是全新的Material风&#26684;设计中重要的组成部分之一，卡片设计适合重要信息的展示，以及在list中作为一个包含有复杂操作的item使用。</p>
<p><code>CardView</code>继承于<code>Framelayout</code>，比<code>FrameLayout</code>多了3个重要的属性，<code>card_view:cardElevation</code>，<code>card_view:cardCornerRadius</code>，<code>card_view:cardBackgroundColor</code>。</p>
<p><code>card_view:cardElevation</code>，可以设置卡片的阴影，可以使<code>CardView</code>在z轴方向上有一种抬升的视觉效果，能给用户一种这里是重要信息的视觉感受。对应代码里的方法<code>public
 void setCardElevation (float radius)</code>。</p>
<p><code>card_view:cardCornerRadius</code>，显然就是设置<code>CardView</code>的圆角了。对应代码里的方法<code>public
 void setRadius (float radius)</code>。</p>
<p><code>card_view:cardBackgroundColor</code>，设置<code>CardView</code>的背景颜色，这个属性是不会影响阴影<code>card_view:cardElevation</code>的效果的。对应代码里的方法<code>public
 void setCardBackgroundColor (int color)</code>。</p>
<div class="codehilite" style="color:rgb(102,102,102); font-family:Helvetica,arial,'Hiragino Sans GB','Microsoft Yahei',Verdana,Arial,sans-serif; font-size:15px; line-height:30px; background-color:rgb(253,253,253)"><br><pre style="margin-top:1.6em; margin-bottom:1.6em; border:1px solid rgb(227,237,243); width:910px; padding:10px; font-family:Inconsolata,monospace,sans-serif; font-size:0.9em; overflow:auto; word-break:break-word; color:rgb(253,206,147); background:rgb(63,63,63)"><span class="nt" style="color:rgb(154,195,159)">&lt;android.support.v7.widget.CardView</span><br><span class="na" style="color:rgb(154,195,159)">android:id=</span><span class="s" style="color:rgb(204,147,147)">&quot;@&#43;id/cardview&quot;</span><br><span class="na" style="color:rgb(154,195,159)">android:layout_width=</span><span class="s" style="color:rgb(204,147,147)">&quot;fill_parent&quot;</span><br><span class="na" style="color:rgb(154,195,159)">android:layout_height=</span><span class="s" style="color:rgb(204,147,147)">&quot;wrap_content&quot;</span><br><span class="na" style="color:rgb(154,195,159)">card_view:cardElevation=</span><span class="s" style="color:rgb(204,147,147)">&quot;100dp&quot;</span><br><span class="na" style="color:rgb(154,195,159)">card_view:cardBackgroundColor=</span><span class="s" style="color:rgb(204,147,147)">&quot;@color/grey&quot;</span><br><span class="na" style="color:rgb(154,195,159)">card_view:cardCornerRadius=</span><span class="s" style="color:rgb(204,147,147)">&quot;8dp&quot;</span><br><span class="na" style="color:rgb(154,195,159)">android:layout_marginLeft=</span><span class="s" style="color:rgb(204,147,147)">&quot;@dimen/margin&quot;</span><br><span class="na" style="color:rgb(154,195,159)">android:layout_marginRight=</span><span class="s" style="color:rgb(204,147,147)">&quot;@dimen/margin&quot;</span><br><span class="nt" style="color:rgb(154,195,159)">&gt;</span><br>                <span class="nt" style="color:rgb(154,195,159)">&lt;TextView</span><br>                <span class="na" style="color:rgb(154,195,159)">android:layout_width=</span><span class="s" style="color:rgb(204,147,147)">&quot;wrap_content&quot;</span><br>                <span class="na" style="color:rgb(154,195,159)">android:layout_height=</span><span class="s" style="color:rgb(204,147,147)">&quot;wrap_content&quot;</span><br>                <span class="na" style="color:rgb(154,195,159)">android:layout_margin=</span><span class="s" style="color:rgb(204,147,147)">&quot;@dimen/margin&quot;</span><br>                <span class="na" style="color:rgb(154,195,159)">android:text=</span><span class="s" style="color:rgb(204,147,147)">&quot;这里是CardView&quot;</span><br>                <span class="nt" style="color:rgb(154,195,159)">/&gt;</span><br><span class="nt" style="color:rgb(154,195,159)">&lt;/android.support.v7.widget.CardView&gt;</span><br></pre><br></div>

<p>这里贴一个Android官方给的<a href="https://github.com/googlesamples/android-CardView" target="_blank" rel="noopener">sample</a>吧!</p>
<p>—————————————</p>
<p>从11月19日开始一直在加班，把大把的时间都用于了我们岁末版本的开发上，这期间规划了好几篇想要写的博文，慢慢会发出来的，主要还是偏于介绍新控件的使用，以及如何兼容lollipop以下版本进行material风&#26684;的设计，material风&#26684;设计也将会是我所在项目组15年第一季度android的全新设计方案。</p>
<p><span style="color:rgb(221,17,68); font-family:Inconsolata,monospace,sans-serif; line-height:30px; white-space:pre-wrap; background-color:rgb(247,247,249)">（转载请注明出处：<a href="http://kennethyo.farbox.com/post/android/2014-12-28）" target="_blank" rel="noopener">http://kennethyo.farbox.com/post/android/2014-12-28）</a></span></p>
<pre><code>&lt;div&gt;
    作者：zh08070005 发表于2014/12/28 14:08:54 [原文链接](http://blog.csdn.net/kennethyo/article/details/42213525)
&lt;/div&gt;
&lt;div&gt;
阅读：2090 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/42213525#comments)
&lt;/div&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]RecyclerView初级使用]]></title>
      <url>http://www.kennethyo.me/2014/11/10/2014-11-10/</url>
      <content type="html"><![CDATA[<p><span style="font-family:Inconsolata,monospace,sans-serif; font-size:12px; color:#dd1144"><span style="white-space:pre-wrap; background-color:rgb(247,247,249)">（转载请注明出处：<a href="http://www.kennethyo.me/post/android/recyclerviewchu-ji-shi-yong）">http://www.kennethyo.me/post/android/recyclerviewchu-ji-shi-yong）</a></span></span></p>
<p><code>RecyclerView</code>是Android在v7包中包含了一个新的widget，<code>RecyclerView</code>是一个<code>ListView</code>进阶版，但不继承与<code>AdapterView</code>，相比<code>ListView</code>，<code>RecyclerView</code>更加灵活和先进。</p>
<p>##<br>1，导入RecyclerView</p>
<p>首先要保证<code>SDK Tools</code>和<code>Android
 Support Repository</code>为最新版。如下图：</p>
<p><img src="http://img.blog.csdn.net/20141110151947150?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt></p>
<p><img src="http://img.blog.csdn.net/20141110152010581?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt></p>
<p>其次，在你的demo工程里选中Project Structure按钮，并且选择app —— Dependencies —— “&#43;” —— Library dependency，去添加支持包，如下图：</p>
<p><img src="http://img.blog.csdn.net/20141110152138031?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt></p>
<p>最后，在新的对话框里选中<code>com.android.support:recyclerview-v7:21.0.0</code>，点击OK。如下图：</p>
<p><img src="http://img.blog.csdn.net/20141110152155781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt></p>
<p>这里就顺利的导入了<code>RecyclerView</code>。</p>
<p>##<br>2，使用<code>RecyclerView</code></p>
<p>在布局文件中使用<code>RecyclerView</code>，跟其他自定义控件一样，如下：</p>
<div class="codehilite" style="color:rgb(102,102,102); font-family:Helvetica,arial,'Hiragino Sans GB','Microsoft Yahei',Verdana,Arial,sans-serif; font-size:15px; line-height:30px; background-color:rgb(253,253,253)"><br><pre style="margin-top:1.6em; margin-bottom:1.6em; border:1px solid rgb(227,237,243); width:910px; padding:10px; font-family:Inconsolata,monospace,sans-serif; font-size:0.9em; overflow:auto; word-break:break-word; color:rgb(253,206,147); background:rgb(63,63,63)"><span class="nt" style="color:rgb(154,195,159)">&lt;RelativeLayout</span> <span class="na" style="color:rgb(154,195,159)">xmlns:android=</span><span class="s" style="color:rgb(204,147,147)">&quot;<a href="http://schemas.android.com/apk/res/android" target="_blank" rel="noopener">http://schemas.android.com/apk/res/android</a>&quot;</span><br>    <span class="na" style="color:rgb(154,195,159)">xmlns:tools=</span><span class="s" style="color:rgb(204,147,147)">&quot;<a href="http://schemas.android.com/tools" target="_blank" rel="noopener">http://schemas.android.com/tools</a>&quot;</span><br>    <span class="na" style="color:rgb(154,195,159)">android:layout_width=</span><span class="s" style="color:rgb(204,147,147)">&quot;match_parent&quot;</span><br>    <span class="na" style="color:rgb(154,195,159)">android:layout_height=</span><span class="s" style="color:rgb(204,147,147)">&quot;match_parent&quot;</span><br>    <span class="na" style="color:rgb(154,195,159)">tools:context=</span><span class="s" style="color:rgb(204,147,147)">&quot;.MainActivity&quot;</span><span class="nt" style="color:rgb(154,195,159)">&gt;</span><br><br>    <span class="nt" style="color:rgb(154,195,159)">&lt;android.support.v7.widget.RecyclerView</span><br>        <span class="na" style="color:rgb(154,195,159)">android:id=</span><span class="s" style="color:rgb(204,147,147)">&quot;@&#43;id/recyclerView&quot;</span><br>        <span class="na" style="color:rgb(154,195,159)">android:layout_width=</span><span class="s" style="color:rgb(204,147,147)">&quot;match_parent&quot;</span><br>        <span class="na" style="color:rgb(154,195,159)">android:layout_height=</span><span class="s" style="color:rgb(204,147,147)">&quot;match_parent&quot;</span> <span class="nt" style="color:rgb(154,195,159)">/&gt;</span><br><span class="nt" style="color:rgb(154,195,159)">&lt;/RelativeLayout&gt;</span><br></pre><br></div>

<p>因为日常开发中，我们大多数都是按照UI去布局每个item，所以这里我没与图省事用Android自带的布局。如下：</p>
<div class="codehilite" style="color:rgb(102,102,102); font-family:Helvetica,arial,'Hiragino Sans GB','Microsoft Yahei',Verdana,Arial,sans-serif; font-size:15px; line-height:30px; background-color:rgb(253,253,253)"><br><pre style="margin-top:1.6em; margin-bottom:1.6em; border:1px solid rgb(227,237,243); width:910px; padding:10px; font-family:Inconsolata,monospace,sans-serif; font-size:0.9em; overflow:auto; word-break:break-word; color:rgb(253,206,147); background:rgb(63,63,63)"><span class="cp" style="color:rgb(127,159,127)">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="nt" style="color:rgb(154,195,159)">&lt;LinearLayout</span> <span class="na" style="color:rgb(154,195,159)">xmlns:android=</span><span class="s" style="color:rgb(204,147,147)">&quot;<a href="http://schemas.android.com/apk/res/android" target="_blank" rel="noopener">http://schemas.android.com/apk/res/android</a>&quot;</span><br>    <span class="na" style="color:rgb(154,195,159)">android:layout_width=</span><span class="s" style="color:rgb(204,147,147)">&quot;match_parent&quot;</span><br>    <span class="na" style="color:rgb(154,195,159)">android:layout_height=</span><span class="s" style="color:rgb(204,147,147)">&quot;match_parent&quot;</span><span class="nt" style="color:rgb(154,195,159)">&gt;</span><br><br>        <span class="nt" style="color:rgb(154,195,159)">&lt;TextView</span><br>            <span class="na" style="color:rgb(154,195,159)">android:id=</span><span class="s" style="color:rgb(204,147,147)">&quot;@&#43;id/textView&quot;</span><br>            <span class="na" style="color:rgb(154,195,159)">android:layout_width=</span><span class="s" style="color:rgb(204,147,147)">&quot;match_parent&quot;</span><br>            <span class="na" style="color:rgb(154,195,159)">android:layout_height=</span><span class="s" style="color:rgb(204,147,147)">&quot;48dp&quot;</span><br>            <span class="na" style="color:rgb(154,195,159)">android:textStyle=</span><span class="s" style="color:rgb(204,147,147)">&quot;bold&quot;</span><br>            <span class="na" style="color:rgb(154,195,159)">android:background=</span><span class="s" style="color:rgb(204,147,147)">&quot;@android:color/holo_blue_light&quot;</span><br>            <span class="na" style="color:rgb(154,195,159)">android:textColor=</span><span class="s" style="color:rgb(204,147,147)">&quot;@android:color/holo_red_light&quot;</span><br>            <span class="na" style="color:rgb(154,195,159)">android:gravity=</span><span class="s" style="color:rgb(204,147,147)">&quot;center_vertical&quot;</span><br>            <span class="na" style="color:rgb(154,195,159)">android:paddingLeft=</span><span class="s" style="color:rgb(204,147,147)">&quot;@dimen/activity_horizontal_margin&quot;</span><br>            <span class="na" style="color:rgb(154,195,159)">android:text=</span><span class="s" style="color:rgb(204,147,147)">&quot;New Text&quot;</span> <span class="nt" style="color:rgb(154,195,159)">/&gt;</span><br><br><span class="nt" style="color:rgb(154,195,159)">&lt;/LinearLayout&gt;</span><br></pre><br></div>

<p>下面就是代码了：</p>
<div class="codehilite" style="color:rgb(102,102,102); font-family:Helvetica,arial,'Hiragino Sans GB','Microsoft Yahei',Verdana,Arial,sans-serif; font-size:15px; line-height:30px; background-color:rgb(253,253,253)"><br><pre style="margin-top:1.6em; margin-bottom:1.6em; border:1px solid rgb(227,237,243); width:910px; padding:10px; font-family:Inconsolata,monospace,sans-serif; font-size:0.9em; overflow:auto; word-break:break-word; color:rgb(253,206,147); background:rgb(63,63,63)"><span class="nd" style="color:rgb(204,204,204)">@Override</span><br>    <span class="kd" style="color:rgb(255,255,134)">protected</span> <span class="kt" style="color:rgb(0,205,0)">void</span> <span class="nf" style="color:rgb(239,239,143)">onCreate</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">Bundle</span> <span class="n" style="color:rgb(220,220,204)">savedInstanceState</span><span class="o" style="color:rgb(240,239,208)">)</span> <span class="o" style="color:rgb(240,239,208)">{</span><br>        <span class="kd" style="color:rgb(255,255,134)">super</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">onCreate</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">savedInstanceState</span><span class="o" style="color:rgb(240,239,208)">);</span><br>        <span class="n" style="color:rgb(220,220,204)">setContentView</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">R</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">layout</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">activity_main</span><span class="o" style="color:rgb(240,239,208)">);</span><br>        <span class="n" style="color:rgb(220,220,204)">recyclerView</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">RecyclerView</span><span class="o" style="color:rgb(240,239,208)">)</span> <span class="n" style="color:rgb(220,220,204)">findViewById</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">R</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">id</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">recyclerView</span><span class="o" style="color:rgb(240,239,208)">);</span><br><br>        <span class="c1" style="color:rgb(127,159,127)">//LinearLayoutManager可以自定义实现不同的动画效果和布局效果</span><br>        <span class="c1" style="color:rgb(127,159,127)">//这里设置为LinearLayoutManager.HORIZONTAL变成为了一个可以横向滑动的ListView，赞不赞？</span><br>        <span class="n" style="color:rgb(220,220,204)">LinearLayoutManager</span> <span class="n" style="color:rgb(220,220,204)">layoutManager</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="k" style="color:rgb(240,223,175)">new</span> <span class="nf" style="color:rgb(239,239,143)">LinearLayoutManager</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="k" style="color:rgb(240,223,175)">this</span><span class="o" style="color:rgb(240,239,208)">,</span><span class="n" style="color:rgb(220,220,204)">LinearLayoutManager</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">VERTICAL</span><span class="o" style="color:rgb(240,239,208)">,</span><span class="kc" style="color:rgb(220,163,163)">false</span><span class="o" style="color:rgb(240,239,208)">);</span><br>        <span class="n" style="color:rgb(220,220,204)">recyclerView</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">setLayoutManager</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">layoutManager</span><span class="o" style="color:rgb(240,239,208)">);</span><br>        <span class="n" style="color:rgb(220,220,204)">recyclerView</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">setHasFixedSize</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="kc" style="color:rgb(220,163,163)">false</span><span class="o" style="color:rgb(240,239,208)">);</span><span class="c1" style="color:rgb(127,159,127)">//adapter的改变不会改变RecyclerView的大小</span><br><br>        <span class="n" style="color:rgb(220,220,204)">String</span><span class="o" style="color:rgb(240,239,208)">[]</span> <span class="n" style="color:rgb(220,220,204)">strings</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="k" style="color:rgb(240,223,175)">new</span> <span class="n" style="color:rgb(220,220,204)">String</span><span class="o" style="color:rgb(240,239,208)">[</span><span class="mi" style="color:rgb(140,208,211)">50</span><span class="o" style="color:rgb(240,239,208)">];</span><br>        <span class="k" style="color:rgb(240,223,175)">for</span> <span class="o" style="color:rgb(240,239,208)">(</span><span class="kt" style="color:rgb(0,205,0)">int</span> <span class="n" style="color:rgb(220,220,204)">i</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="mi" style="color:rgb(140,208,211)">0</span><span class="o" style="color:rgb(240,239,208)">;</span><span class="n" style="color:rgb(220,220,204)">i</span><span class="o" style="color:rgb(240,239,208)">&lt;</span><span class="mi" style="color:rgb(140,208,211)">50</span><span class="o" style="color:rgb(240,239,208)">;</span><span class="n" style="color:rgb(220,220,204)">i</span><span class="o" style="color:rgb(240,239,208)">&#43;&#43;){</span><br>            <span class="n" style="color:rgb(220,220,204)">strings</span><span class="o" style="color:rgb(240,239,208)">[</span><span class="n" style="color:rgb(220,220,204)">i</span><span class="o" style="color:rgb(240,239,208)">]</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="n" style="color:rgb(220,220,204)">String</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">valueOf</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">i</span><span class="o" style="color:rgb(240,239,208)">);</span><br>        <span class="o" style="color:rgb(240,239,208)">}</span><br><br>        <span class="n" style="color:rgb(220,220,204)">StringRecyclerAdapter</span> <span class="n" style="color:rgb(220,220,204)">adapter</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="k" style="color:rgb(240,223,175)">new</span> <span class="nf" style="color:rgb(239,239,143)">StringRecyclerAdapter</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">strings</span><span class="o" style="color:rgb(240,239,208)">);</span><br><br>        <span class="n" style="color:rgb(220,220,204)">recyclerView</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">setAdapter</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">adapter</span><span class="o" style="color:rgb(240,239,208)">);</span><br><br>    <span class="o" style="color:rgb(240,239,208)">}</span><br></pre><br></div>

<p>可以明确看到的是，<code>RecyclerView</code>通过<code>(RecyclerView)
 findViewById(R.id.recyclerView)</code>初始化之后，不仅要像<code>ListView</code>一样要放入<code>Adapter</code>进行数据和布局的适配，而且还要额外添加一个<code>LinearLayoutManager</code>。</p>
<p>这个Manager就是我们的布局管理工具类，这里不仅可以用常规的竖直方向布局，还有横向的滑动的布局，以后再也不会因为没有横向滑动的<code>ListView</code>去头疼自定义了。</p>
<p>通过自定义<code>LinearLayoutManager</code>也可以实现不同的动画效果，和移动效果。</p>
<p><code>RecyclerView</code>的Adapter和<code>ListView</code>的Adapter也是不同的，<code>RecyclerView</code>的Adapter要继承<code>RecyclerView.Adapter&amp;lt;VH
 extends ViewHolder&amp;gt;</code>,并且<code>ViewHolder</code>要继承与<code>ViewHolder.RecyclerView</code>，具体代码如下：</p>
<div class="codehilite" style="color:rgb(102,102,102); font-family:Helvetica,arial,'Hiragino Sans GB','Microsoft Yahei',Verdana,Arial,sans-serif; font-size:15px; line-height:30px; background-color:rgb(253,253,253)"><br><pre style="margin-top:1.6em; margin-bottom:1.6em; border:1px solid rgb(227,237,243); width:910px; padding:10px; font-family:Inconsolata,monospace,sans-serif; font-size:0.9em; overflow:auto; word-break:break-word; color:rgb(253,206,147); background:rgb(63,63,63)"><span class="kd" style="color:rgb(255,255,134)">public</span> <span class="kd" style="color:rgb(255,255,134)">class</span> <span class="nc" style="color:rgb(239,239,143)">StringRecyclerAdapter</span> <span class="kd" style="color:rgb(255,255,134)">extends</span> <span class="n" style="color:rgb(220,220,204)">RecyclerView</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">Adapter</span><span class="o" style="color:rgb(240,239,208)">&lt;</span><span class="n" style="color:rgb(220,220,204)">StringRecyclerAdapter</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">ViewHolder</span><span class="o" style="color:rgb(240,239,208)">&gt;</span> <span class="o" style="color:rgb(240,239,208)">{</span><br>    <span class="kd" style="color:rgb(255,255,134)">private</span> <span class="n" style="color:rgb(220,220,204)">String</span><span class="o" style="color:rgb(240,239,208)">[]</span> <span class="n" style="color:rgb(220,220,204)">strings</span><span class="o" style="color:rgb(240,239,208)">;</span><br><br>    <span class="kd" style="color:rgb(255,255,134)">public</span> <span class="nf" style="color:rgb(239,239,143)">StringRecyclerAdapter</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">String</span><span class="o" style="color:rgb(240,239,208)">[]</span> <span class="n" style="color:rgb(220,220,204)">strings</span><span class="o" style="color:rgb(240,239,208)">)</span> <span class="o" style="color:rgb(240,239,208)">{</span><br>        <span class="k" style="color:rgb(240,223,175)">this</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">strings</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="n" style="color:rgb(220,220,204)">strings</span><span class="o" style="color:rgb(240,239,208)">;</span><br>    <span class="o" style="color:rgb(240,239,208)">}</span><br><br>    <span class="nd" style="color:rgb(204,204,204)">@Override</span><br>    <span class="kd" style="color:rgb(255,255,134)">public</span> <span class="n" style="color:rgb(220,220,204)">ViewHolder</span> <span class="nf" style="color:rgb(239,239,143)">onCreateViewHolder</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">ViewGroup</span> <span class="n" style="color:rgb(220,220,204)">viewGroup</span><span class="o" style="color:rgb(240,239,208)">,</span> <span class="kt" style="color:rgb(0,205,0)">int</span> <span class="n" style="color:rgb(220,220,204)">i</span><span class="o" style="color:rgb(240,239,208)">)</span> <span class="o" style="color:rgb(240,239,208)">{</span><br>        <span class="n" style="color:rgb(220,220,204)">View</span> <span class="n" style="color:rgb(220,220,204)">view</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="n" style="color:rgb(220,220,204)">View</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">inflate</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">viewGroup</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">getContext</span><span class="o" style="color:rgb(240,239,208)">(),</span> <span class="n" style="color:rgb(220,220,204)">R</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">layout</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">adapter_string_recylcer</span><span class="o" style="color:rgb(240,239,208)">,</span> <span class="kc" style="color:rgb(220,163,163)">null</span><span class="o" style="color:rgb(240,239,208)">);</span><br><br>       <span class="c1" style="color:rgb(127,159,127)">//这里发现不给item布局添加LayoutParams，会直接默认为WRAP_CONTENT，WRAP_CONTENT布局。</span><br>        <span class="n" style="color:rgb(220,220,204)">view</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">setPadding</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="mi" style="color:rgb(140,208,211)">20</span><span class="o" style="color:rgb(240,239,208)">,</span> <span class="mi" style="color:rgb(140,208,211)">0</span><span class="o" style="color:rgb(240,239,208)">,</span><span class="mi" style="color:rgb(140,208,211)">0</span><span class="o" style="color:rgb(240,239,208)">,</span> <span class="mi" style="color:rgb(140,208,211)">0</span><span class="o" style="color:rgb(240,239,208)">);</span><br>        <span class="n" style="color:rgb(220,220,204)">view</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">setFocusable</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="kc" style="color:rgb(220,163,163)">true</span><span class="o" style="color:rgb(240,239,208)">);</span><br>        <span class="n" style="color:rgb(220,220,204)">RecyclerView</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">LayoutParams</span> <span class="n" style="color:rgb(220,220,204)">lp</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="k" style="color:rgb(240,223,175)">new</span> <span class="n" style="color:rgb(220,220,204)">RecyclerView</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">LayoutParams</span><span class="o" style="color:rgb(240,239,208)">(</span><br>                <span class="n" style="color:rgb(220,220,204)">ViewGroup</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">LayoutParams</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">MATCH_PARENT</span><span class="o" style="color:rgb(240,239,208)">,</span><br>                <span class="n" style="color:rgb(220,220,204)">ViewGroup</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">LayoutParams</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">WRAP_CONTENT</span><span class="o" style="color:rgb(240,239,208)">);</span><br>        <span class="n" style="color:rgb(220,220,204)">lp</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">leftMargin</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="mi" style="color:rgb(140,208,211)">10</span><span class="o" style="color:rgb(240,239,208)">;</span><br>        <span class="n" style="color:rgb(220,220,204)">lp</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">rightMargin</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="mi" style="color:rgb(140,208,211)">5</span><span class="o" style="color:rgb(240,239,208)">;</span><br>        <span class="n" style="color:rgb(220,220,204)">lp</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">topMargin</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="mi" style="color:rgb(140,208,211)">20</span><span class="o" style="color:rgb(240,239,208)">;</span><br>        <span class="n" style="color:rgb(220,220,204)">lp</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">bottomMargin</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="mi" style="color:rgb(140,208,211)">15</span><span class="o" style="color:rgb(240,239,208)">;</span><br>        <span class="n" style="color:rgb(220,220,204)">view</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">setLayoutParams</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">lp</span><span class="o" style="color:rgb(240,239,208)">);</span><br><br>        <span class="n" style="color:rgb(220,220,204)">ViewHolder</span> <span class="n" style="color:rgb(220,220,204)">viewHolder</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="k" style="color:rgb(240,223,175)">new</span> <span class="nf" style="color:rgb(239,239,143)">ViewHolder</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">view</span><span class="o" style="color:rgb(240,239,208)">);</span><br>        <span class="k" style="color:rgb(240,223,175)">return</span> <span class="n" style="color:rgb(220,220,204)">viewHolder</span><span class="o" style="color:rgb(240,239,208)">;</span><br>    <span class="o" style="color:rgb(240,239,208)">}</span><br><br>    <span class="nd" style="color:rgb(204,204,204)">@Override</span><br>    <span class="kd" style="color:rgb(255,255,134)">public</span> <span class="kt" style="color:rgb(0,205,0)">void</span> <span class="nf" style="color:rgb(239,239,143)">onBindViewHolder</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">ViewHolder</span> <span class="n" style="color:rgb(220,220,204)">viewHolder</span><span class="o" style="color:rgb(240,239,208)">,</span> <span class="kt" style="color:rgb(0,205,0)">int</span> <span class="n" style="color:rgb(220,220,204)">i</span><span class="o" style="color:rgb(240,239,208)">)</span> <span class="o" style="color:rgb(240,239,208)">{</span><br>        <span class="n" style="color:rgb(220,220,204)">viewHolder</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">textView</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">setText</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">StringRecyclerAdapter</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">class</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">getSimpleName</span><span class="o" style="color:rgb(240,239,208)">()</span> <span class="o" style="color:rgb(240,239,208)">&#43;</span> <span class="n" style="color:rgb(220,220,204)">getValueAt</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">i</span><span class="o" style="color:rgb(240,239,208)">));</span><br>    <span class="o" style="color:rgb(240,239,208)">}</span><br><br>    <span class="kd" style="color:rgb(255,255,134)">public</span> <span class="n" style="color:rgb(220,220,204)">String</span> <span class="nf" style="color:rgb(239,239,143)">getValueAt</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="kt" style="color:rgb(0,205,0)">int</span> <span class="n" style="color:rgb(220,220,204)">i</span><span class="o" style="color:rgb(240,239,208)">)</span> <span class="o" style="color:rgb(240,239,208)">{</span><br>        <span class="k" style="color:rgb(240,223,175)">return</span> <span class="n" style="color:rgb(220,220,204)">strings</span><span class="o" style="color:rgb(240,239,208)">[</span><span class="n" style="color:rgb(220,220,204)">i</span><span class="o" style="color:rgb(240,239,208)">];</span><br>    <span class="o" style="color:rgb(240,239,208)">}</span><br><br>    <span class="nd" style="color:rgb(204,204,204)">@Override</span><br>    <span class="kd" style="color:rgb(255,255,134)">public</span> <span class="kt" style="color:rgb(0,205,0)">int</span> <span class="nf" style="color:rgb(239,239,143)">getItemCount</span><span class="o" style="color:rgb(240,239,208)">()</span> <span class="o" style="color:rgb(240,239,208)">{</span><br>        <span class="k" style="color:rgb(240,223,175)">return</span> <span class="k" style="color:rgb(240,223,175)">this</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">strings</span> <span class="o" style="color:rgb(240,239,208)">==</span> <span class="kc" style="color:rgb(220,163,163)">null</span> <span class="o" style="color:rgb(240,239,208)">?</span> <span class="mi" style="color:rgb(140,208,211)">0</span> <span class="o" style="color:rgb(240,239,208)">:</span> <span class="n" style="color:rgb(220,220,204)">strings</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">length</span><span class="o" style="color:rgb(240,239,208)">;</span><br>    <span class="o" style="color:rgb(240,239,208)">}</span><br><br>    <span class="kd" style="color:rgb(255,255,134)">public</span> <span class="kd" style="color:rgb(255,255,134)">static</span> <span class="kd" style="color:rgb(255,255,134)">class</span> <span class="nc" style="color:rgb(239,239,143)">ViewHolder</span> <span class="kd" style="color:rgb(255,255,134)">extends</span> <span class="n" style="color:rgb(220,220,204)">RecyclerView</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">ViewHolder</span> <span class="kd" style="color:rgb(255,255,134)">implements</span> <span class="n" style="color:rgb(220,220,204)">View</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">OnClickListener</span> <span class="o" style="color:rgb(240,239,208)">{</span><br>        <span class="kd" style="color:rgb(255,255,134)">public</span> <span class="n" style="color:rgb(220,220,204)">TextView</span> <span class="n" style="color:rgb(220,220,204)">textView</span><span class="o" style="color:rgb(240,239,208)">;</span><br><br>        <span class="kd" style="color:rgb(255,255,134)">public</span> <span class="nf" style="color:rgb(239,239,143)">ViewHolder</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">View</span> <span class="n" style="color:rgb(220,220,204)">itemView</span><span class="o" style="color:rgb(240,239,208)">)</span> <span class="o" style="color:rgb(240,239,208)">{</span><br>            <span class="kd" style="color:rgb(255,255,134)">super</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">itemView</span><span class="o" style="color:rgb(240,239,208)">);</span><br>            <span class="n" style="color:rgb(220,220,204)">textView</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">TextView</span><span class="o" style="color:rgb(240,239,208)">)</span> <span class="n" style="color:rgb(220,220,204)">itemView</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">findViewById</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">R</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">id</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">textView</span><span class="o" style="color:rgb(240,239,208)">);</span><br>            <span class="c1" style="color:rgb(127,159,127)">//因为RecyclerView没用setOnItemClickListener，所以在这里实现了点击事件</span><br>            <span class="c1" style="color:rgb(127,159,127)">//况且，现在有越来越多的设计，会在每个item点击不同位置，有不同的响应</span><br>            <span class="n" style="color:rgb(220,220,204)">textView</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">setOnClickListener</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="k" style="color:rgb(240,223,175)">this</span><span class="o" style="color:rgb(240,239,208)">);</span><br>        <span class="o" style="color:rgb(240,239,208)">}</span><br><br>        <span class="nd" style="color:rgb(204,204,204)">@Override</span><br>        <span class="kd" style="color:rgb(255,255,134)">public</span> <span class="kt" style="color:rgb(0,205,0)">void</span> <span class="nf" style="color:rgb(239,239,143)">onClick</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">View</span> <span class="n" style="color:rgb(220,220,204)">v</span><span class="o" style="color:rgb(240,239,208)">)</span> <span class="o" style="color:rgb(240,239,208)">{</span><br>            <span class="n" style="color:rgb(220,220,204)">Toast</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">makeText</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">v</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">getContext</span><span class="o" style="color:rgb(240,239,208)">(),((</span><span class="n" style="color:rgb(220,220,204)">TextView</span><span class="o" style="color:rgb(240,239,208)">)</span><span class="n" style="color:rgb(220,220,204)">v</span><span class="o" style="color:rgb(240,239,208)">).</span><span class="na" style="color:rgb(154,195,159)">getText</span><span class="o" style="color:rgb(240,239,208)">(),</span><span class="n" style="color:rgb(220,220,204)">Toast</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">LENGTH_SHORT</span><span class="o" style="color:rgb(240,239,208)">).</span><span class="na" style="color:rgb(154,195,159)">show</span><span class="o" style="color:rgb(240,239,208)">();</span><br>        <span class="o" style="color:rgb(240,239,208)">}</span><br>    <span class="o" style="color:rgb(240,239,208)">}</span><br><span class="o" style="color:rgb(240,239,208)">}</span><br></pre><br></div>

<p>在<code>onCreateViewHolder</code>方法中，我们需要把加载布局和<code>ViewHolder</code>绑定起来，这里有个问题，不知道是Android的bug，还是故意这么设计的，需要我们主动写代码给item设置<code>LayoutParams</code>。</p>
<p>在<code>onBindViewHolder</code>中负责数据绑定。</p>
<p>这里有一个问题，<code>RecyclerView</code>没有<code>setOnItemClickListener</code>方法，所以我在里面对<code>TextView</code>添加了点击事件，现在有越来越多的设计，会在每个item点击不同位置，有不同的响应。</p>
<p><img src="http://img.blog.csdn.net/20141110152225296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt></p>
<p><a href="https://github.com/KennethYo/RecyclerViewDemo" target="_blank" rel="noopener">Demo链接</a></p>
<pre><code>&lt;div&gt;
    作者：zh08070005 发表于2014/11/10 15:18:15 [原文链接](http://blog.csdn.net/kennethyo/article/details/40981263)
&lt;/div&gt;
&lt;div&gt;
阅读：1221 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/40981263#comments)
&lt;/div&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]Palette的使用]]></title>
      <url>http://www.kennethyo.me/2014/11/04/2014-11-04/</url>
      <content type="html"><![CDATA[<p>（转载，请注明出处：<a href="http://www.kennethyo.me/post/android/palettechu-ji-shi-yong">http://www.kennethyo.me/post/android/palettechu-ji-shi-yong</a>）</p>
<p><img src alt></p>
<p>相信有不少的人已经开始关注Android Lollipop，全新的Material设计风&#26684;让人&#30524;前一亮，Material强调大胆的阴影和高亮搭配，引用那些意料之外和充满活力的颜色。</p>
<p>这里就要说到，不久前Android在v7包中更新的<a href="http://developer.android.com/reference/android/support/v7/graphics/Palette.html" target="_blank" rel="noopener">Palette</a>。Palette可以让我们构造色彩鲜艳的界面更加方便，通过一个图片的<code>bitmap</code>来获取图片当中明暗对比的颜色。</p>
<p>###<br>初始化Palette</p>
<p><code>Palette</code>通过一个静态方法进行初始化，并且需要传入一个<code>bitmap</code>，这个<code>bitmap</code>是我们要获取颜色图片的位图。</p>
<div class="codehilite" style="color:rgb(102,102,102); font-family:Helvetica,arial,'Hiragino Sans GB','Microsoft Yahei',Verdana,Arial,sans-serif; font-size:15px; line-height:30px; background-color:rgb(253,253,253)"><br><pre style="margin-top:1.6em; margin-bottom:1.6em; border:1px solid rgb(227,237,243); width:910px; padding:10px; font-family:Inconsolata,monospace,sans-serif; font-size:0.9em; overflow:auto; word-break:break-word; color:rgb(253,206,147); background:rgb(63,63,63)"><span class="n" style="color:rgb(220,220,204)">Palette</span> <span class="n" style="color:rgb(220,220,204)">palette</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="n" style="color:rgb(220,220,204)">Palette</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">generate</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">bitmap</span><span class="o" style="color:rgb(240,239,208)">);</span><br></pre><br></div>

<p>还有一个异步方法：</p>
<div class="codehilite" style="color:rgb(102,102,102); font-family:Helvetica,arial,'Hiragino Sans GB','Microsoft Yahei',Verdana,Arial,sans-serif; font-size:15px; line-height:30px; background-color:rgb(253,253,253)"><br><pre style="margin-top:1.6em; margin-bottom:1.6em; border:1px solid rgb(227,237,243); width:910px; padding:10px; font-family:Inconsolata,monospace,sans-serif; font-size:0.9em; overflow:auto; word-break:break-word; color:rgb(253,206,147); background:rgb(63,63,63)"><span class="c1" style="color:rgb(127,159,127)">//提供了一个异步方法</span><br><span class="n" style="color:rgb(220,220,204)">Palette</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">generateAsync</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">bitmap</span><span class="o" style="color:rgb(240,239,208)">,</span> <span class="k" style="color:rgb(240,223,175)">new</span> <span class="n" style="color:rgb(220,220,204)">Palette</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">PaletteAsyncListener</span><span class="o" style="color:rgb(240,239,208)">()</span> <span class="o" style="color:rgb(240,239,208)">{</span><br>            <span class="nd" style="color:rgb(204,204,204)">@Override</span><br>            <span class="kd" style="color:rgb(255,255,134)">public</span> <span class="kt" style="color:rgb(0,205,0)">void</span> <span class="nf" style="color:rgb(239,239,143)">onGenerated</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">Palette</span> <span class="n" style="color:rgb(220,220,204)">palette</span><span class="o" style="color:rgb(240,239,208)">)</span> <span class="o" style="color:rgb(240,239,208)">{</span><br>            <span class="o" style="color:rgb(240,239,208)">}</span><br><span class="o" style="color:rgb(240,239,208)">});</span><br></pre><br></div>

<p>###<br>获取<code>Palette.Swatch</code></p>
<p>通过以下几种方法获取相应的<code>Palette.Swatch</code>，<code>Palette.Swatch</code>是包含我们获取到颜色的一个载体</p>
<div class="codehilite" style="color:rgb(102,102,102); font-family:Helvetica,arial,'Hiragino Sans GB','Microsoft Yahei',Verdana,Arial,sans-serif; font-size:15px; line-height:30px; background-color:rgb(253,253,253)"><br><pre style="margin-top:1.6em; margin-bottom:1.6em; border:1px solid rgb(227,237,243); width:910px; padding:10px; font-family:Inconsolata,monospace,sans-serif; font-size:0.9em; overflow:auto; word-break:break-word; color:rgb(253,206,147); background:rgb(63,63,63)"><span class="n" style="color:rgb(220,220,204)">palette</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">getVibrantSwatch</span><span class="o" style="color:rgb(240,239,208)">();</span><br><span class="n" style="color:rgb(220,220,204)">palette</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">getMutedSwatch</span><span class="o" style="color:rgb(240,239,208)">();</span><br><span class="n" style="color:rgb(220,220,204)">palette</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">getLightVibrantSwatch</span><span class="o" style="color:rgb(240,239,208)">();</span><br><span class="n" style="color:rgb(220,220,204)">palette</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">getLightMutedSwatch</span><span class="o" style="color:rgb(240,239,208)">();</span><br><span class="n" style="color:rgb(220,220,204)">palette</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">getDarkVibrantSwatch</span><span class="o" style="color:rgb(240,239,208)">();</span><br><span class="n" style="color:rgb(220,220,204)">palette</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">getDarkMutedSwatch</span><span class="o" style="color:rgb(240,239,208)">();</span><br></pre><br></div>

<p>###<br>通过<code>Palette.Swatch</code>获取到颜色</p>
<p>针对Android，<code>Palette.Swatch.getRgb()</code>返回一个<code>int</code>RGB颜色&#20540;。例如如下的用法：</p>
<div class="codehilite" style="color:rgb(102,102,102); font-family:Helvetica,arial,'Hiragino Sans GB','Microsoft Yahei',Verdana,Arial,sans-serif; font-size:15px; line-height:30px; background-color:rgb(253,253,253)"><br><pre style="margin-top:1.6em; margin-bottom:1.6em; border:1px solid rgb(227,237,243); width:910px; padding:10px; font-family:Inconsolata,monospace,sans-serif; font-size:0.9em; overflow:auto; word-break:break-word; color:rgb(253,206,147); background:rgb(63,63,63)"><span class="n" style="color:rgb(220,220,204)">TextView</span> <span class="n" style="color:rgb(220,220,204)">tv1</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">TextView</span><span class="o" style="color:rgb(240,239,208)">)</span> <span class="n" style="color:rgb(220,220,204)">findViewById</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">R</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">id</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">tv1</span><span class="o" style="color:rgb(240,239,208)">);</span><br><span class="c1" style="color:rgb(127,159,127)">//返回一个活力的颜色</span><br><span class="n" style="color:rgb(220,220,204)">tv1</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">setTextColor</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">palette</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">getVibrantSwatch</span><span class="o" style="color:rgb(240,239,208)">().</span><span class="na" style="color:rgb(154,195,159)">getRgb</span><span class="o" style="color:rgb(240,239,208)">());</span><br><span class="c1" style="color:rgb(127,159,127)">//返回一个柔和的颜色</span><br><span class="n" style="color:rgb(220,220,204)">tv1</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">setBackgroundColor</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">palette</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">getMutedSwatch</span><span class="o" style="color:rgb(240,239,208)">().</span><span class="na" style="color:rgb(154,195,159)">getRgb</span><span class="o" style="color:rgb(240,239,208)">());</span><br><br><span class="n" style="color:rgb(220,220,204)">TextView</span> <span class="n" style="color:rgb(220,220,204)">tv2</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">TextView</span><span class="o" style="color:rgb(240,239,208)">)</span> <span class="n" style="color:rgb(220,220,204)">findViewById</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">R</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">id</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">tv2</span><span class="o" style="color:rgb(240,239,208)">);</span><br><span class="c1" style="color:rgb(127,159,127)">//返回一个活力的亮色</span><br><span class="n" style="color:rgb(220,220,204)">tv2</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">setTextColor</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">palette</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">getLightVibrantSwatch</span><span class="o" style="color:rgb(240,239,208)">().</span><span class="na" style="color:rgb(154,195,159)">getRgb</span><span class="o" style="color:rgb(240,239,208)">());</span><br><span class="c1" style="color:rgb(127,159,127)">//返回一个柔和的亮色</span><br><span class="n" style="color:rgb(220,220,204)">tv2</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">setBackgroundColor</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">palette</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">getLightMutedSwatch</span><span class="o" style="color:rgb(240,239,208)">().</span><span class="na" style="color:rgb(154,195,159)">getRgb</span><span class="o" style="color:rgb(240,239,208)">());</span><br><br><span class="n" style="color:rgb(220,220,204)">TextView</span> <span class="n" style="color:rgb(220,220,204)">tv3</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">TextView</span><span class="o" style="color:rgb(240,239,208)">)</span> <span class="n" style="color:rgb(220,220,204)">findViewById</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">R</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">id</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">tv3</span><span class="o" style="color:rgb(240,239,208)">);</span><br><span class="c1" style="color:rgb(127,159,127)">//返回一个活力的暗色</span><br><span class="n" style="color:rgb(220,220,204)">tv3</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">setTextColor</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">palette</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">getDarkVibrantSwatch</span><span class="o" style="color:rgb(240,239,208)">().</span><span class="na" style="color:rgb(154,195,159)">getRgb</span><span class="o" style="color:rgb(240,239,208)">());</span><br><span class="c1" style="color:rgb(127,159,127)">//返回一个柔和的暗色</span><br><span class="n" style="color:rgb(220,220,204)">tv3</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">setBackgroundColor</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">palette</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">getDarkMutedSwatch</span><span class="o" style="color:rgb(240,239,208)">().</span><span class="na" style="color:rgb(154,195,159)">getRgb</span><span class="o" style="color:rgb(240,239,208)">());</span><br><br><span class="n" style="color:rgb(220,220,204)">TextView</span> <span class="n" style="color:rgb(220,220,204)">tv4</span> <span class="o" style="color:rgb(240,239,208)">=</span> <span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">TextView</span><span class="o" style="color:rgb(240,239,208)">)</span> <span class="n" style="color:rgb(220,220,204)">findViewById</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">R</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">id</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">tv4</span><span class="o" style="color:rgb(240,239,208)">);</span><br><span class="c1" style="color:rgb(127,159,127)">//返回一个适合做标题的颜色</span><br><span class="n" style="color:rgb(220,220,204)">tv4</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">setTextColor</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">palette</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">getVibrantSwatch</span><span class="o" style="color:rgb(240,239,208)">().</span><span class="na" style="color:rgb(154,195,159)">getTitleTextColor</span><span class="o" style="color:rgb(240,239,208)">());</span><br><span class="c1" style="color:rgb(127,159,127)">//返回一个适合做主题的颜色</span><br><span class="n" style="color:rgb(220,220,204)">tv4</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">setBackgroundColor</span><span class="o" style="color:rgb(240,239,208)">(</span><span class="n" style="color:rgb(220,220,204)">palette</span><span class="o" style="color:rgb(240,239,208)">.</span><span class="na" style="color:rgb(154,195,159)">getDarkMutedSwatch</span><span class="o" style="color:rgb(240,239,208)">().</span><span class="na" style="color:rgb(154,195,159)">getBodyTextColor</span><span class="o" style="color:rgb(240,239,208)">());</span><br></pre><br></div>

<p><img src="http://img.blog.csdn.net/20141105134308933?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt></p>
<p>总体上看，Palette的使用简单，没有复杂的方法，更方便我们针对material风&#26684;进行开发。</p>
<p><a href="https://github.com/KennethYo/PaletteDemo/tree/master" target="_blank" rel="noopener">demo地址</a></p>
<pre><code>&lt;div&gt;
    作者：zh08070005 发表于2014/11/4 16:19:53 [原文链接](http://blog.csdn.net/kennethyo/article/details/40786685)
&lt;/div&gt;
&lt;div&gt;
阅读：692 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/40786685#comments)
&lt;/div&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]LayoutInflater.inflate详解]]></title>
      <url>http://www.kennethyo.me/2014/10/24/2014-10-24/</url>
      <content type="html"><![CDATA[<h2 id="介绍常见inflate方法"><a href="#介绍常见inflate方法" class="headerlink" title="介绍常见inflate方法"></a>介绍常见inflate方法</h2><p>在日常开发中经常会用到通过资源id去获取view的场景，我们通常有四种方式去获取view，分别是以下四种：</p>
<pre code_snippet_id="495633" snippet_file_name="blog_20141024_1_2164263" name="code" class="java">//1,通过系统服务获取布局加载器
LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);

View view = inflater.inflate(resource,root,attachToRoot);

//2,通过activity中的getLayoutInflater()方法
View view = getLayoutInflater().inflate(resource,root,attachToRoot);

//3,通过View的静态inflate()方法
View view = View.inflate(resource,root,attachToRoot);

//4,通过LayoutInflater的inflate()方法
View view = LayoutInflater.from(this).inflate(resource,root,attachToRoot);
</pre>

<p>通过对上述方法的源码的分析，很容易看出来这些方法都是最终调用了方式1，获取系统布局加载器的方式，来进行获取<code>View</code>。</p>
<p>这里我列举的并没有<code>inflate(int resource, ViewGroup root)</code>这个重载方法，是因为他们最终都会到调用为<code>inflate(int resource, ViewGroup root, boolean attachToRoot)</code>方法，如下：</p>
<pre code_snippet_id="495633" snippet_file_name="blog_20141024_2_263903" name="code" class="java"> public View inflate(int resource, ViewGroup root) {
        return inflate(resource, root, root != null);
 }

 public View inflate(int resource, ViewGroup root, boolean attachToRoot) {
        if (DEBUG) System.out.println(&quot;INFLATING from resource: &quot; + resource);
        XmlResourceParser parser = getContext().getResources().getLayout(resource);
        try {
            return inflate(parser, root, attachToRoot);
        } finally {
            parser.close();
        }
 }</pre>

<p>这里要说明一下，其实最终要调用的是<code>inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot)</code>方法，只不过这里把布局资源解析为了XmlPull解析器，这里就不针对<code>XmlPullParser</code>进行研究了。</p>
<h2 id="针对传入的参数不同进行分析"><a href="#针对传入的参数不同进行分析" class="headerlink" title="针对传入的参数不同进行分析"></a>针对传入的参数不同进行分析</h2><p>通过对<code>inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot)</code>方法的源码进行解读，<code>XmlPullParser parser</code>是对传入<code>int resource</code>的xml解析器，不用去主要考虑，那就需要考虑传入<code>ViewGroup root, boolean attachToRoot</code>的&#20540;不同，会出现什么结果呢？</p>
<p>源码中有几个重要的代码块：</p>
<pre code_snippet_id="495633" snippet_file_name="blog_20141024_3_3719874" name="code" class="java">if (root != null) {
if (DEBUG) {
System.out.println(&quot;Creating params from root: &quot; +
                                    root);
}
// 如果root不等于null，获取它的LayoutParams
  params = root.generateLayoutParams(attrs);
if (!attachToRoot) {
//attachToRoot等于false，把root的LayoutParams属性给temp
temp.setLayoutParams(params);
}
}
</pre>

<pre code_snippet_id="495633" snippet_file_name="blog_20141024_4_4700610" name="code" class="java">//attachToRoot等于true，将temp加入到root这个viewGroup中
if (root != null &amp;&amp; attachToRoot) {
root.addView(temp, params);
}

// root等于null，attachToRoot等于false，直接把temp赋值给返回结果
if (root == null || !attachToRoot) {
  result = temp;
}</pre>

<h2 id="根据不同的传-20540-进行实现"><a href="#根据不同的传-20540-进行实现" class="headerlink" title="根据不同的传&#20540;进行实现"></a>根据不同的传&#20540;进行实现</h2><p>两个布局文件，一个作为root，一个作为我们的要获取的view</p>
<p>activity_my.xml</p>
<pre code_snippet_id="495633" snippet_file_name="blog_20141024_5_9900685" name="code" class="html">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    tools:context=&quot;.MyActivity&quot;&gt;

    &lt;TextView
        android:text=&quot;@string/hello_world&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot; /&gt;

&lt;/RelativeLayout&gt;</pre>

<p>view.xml</p>
<pre code_snippet_id="495633" snippet_file_name="blog_20141024_6_881422" name="code" class="html">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:layout_width=&quot;120dp&quot;
    android:layout_height=&quot;120dp&quot;
    android:background=&quot;@color/blue&quot;&gt;

    &lt;TextView
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:text=&quot;hello inflate&quot;
        android:textColor=&quot;@android:color/white&quot; /&gt;

&lt;/LinearLayout&gt;</pre>

<p>1,rootView等于null，attachToRoot等于false</p>
<pre code_snippet_id="495633" snippet_file_name="blog_20141024_7_1272731" name="code" class="java">protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
    view = getLayoutInflater().inflate(R.layout.view, null, false);
    setContentView(view);
}</pre>

<p>本身root为null，就不会去获取view的LayoutParams，直接走<code>result = temp;</code>返回result，此时result等于view</p>
<p><img src="http://img.blog.csdn.net/20141024160656796?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p>
<p>为什么会充满屏幕呢，因为当把view设置到activity的视图时，系统会取当前window的LayoutParm作为view的LayoutParm</p>
<p>2,rootView等于null，attachToRoot等于true</p>
<pre code_snippet_id="495633" snippet_file_name="blog_20141024_8_9504448" name="code" class="java">protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
    view = getLayoutInflater().inflate(R.layout.view, null, true);
    setContentView(view);
}</pre>

<p>root等于null，依然走<code>result = temp;</code>，此时result等于view</p>
<p><img src="http://img.blog.csdn.net/20141024160851796?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p>
<p>为什么会充满屏幕呢，因为当把view设置到activity的视图时，系统会取当前window的LayoutParm作为view的LayoutParm</p>
<p>3,rootView不等于null，attachToRoot等于false</p>
<pre code_snippet_id="495633" snippet_file_name="blog_20141024_9_1880625" name="code" class="java">protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
rootView = getLayoutInflater().inflate(R.layout.activity_my, null);
    view = getLayoutInflater().inflate(R.layout.view,(ViewGroup)rootView,false);
    setContentView(view);
}</pre>

<p>root不等于null，attachToRoot等于false，会走取view的LayoutParams并且赋&#20540;给temp，再走<code>result = temp;</code>，此时result等于view</p>
<p><img src="http://img.blog.csdn.net/20141024160912700?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p>
<p>为什么会充满屏幕呢，因为当把view设置到activity的视图时，系统会取当前window的LayoutParm作为view的LayoutParm</p>
<p>4,rootView不等于null，attachToRoot等于true</p>
<pre code_snippet_id="495633" snippet_file_name="blog_20141024_10_3941156" name="code" class="java">protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
rootView = getLayoutInflater().inflate(R.layout.activity_my, null);
    view = getLayoutInflater().inflate(R.layout.view,(ViewGroup)rootView,true);
    setContentView(view);
}</pre>

<p>rootView不等于null，attachToRoot等于true，会首先获取view的Params，再走<code>root.addView(temp, params)</code>，也就是，把view先放入的root这个ViewGroup中，再返回result，因为初始化的时候result就等于root，此时返回的就是包含有子View的root。</p>
<p><img src="http://img.blog.csdn.net/20141024160942932?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p>
<p>这里因为root的布局为RelativeLayout，我们把view加入到root中，view本身保留了自有的LayoutParm</p>
<p>最后我要吐槽，为什么csdn不支持markdown，我都是先用Mou写好的，贴过来竟然要自己重新排版。。。</p>
<pre><code>&lt;div&gt;
    作者：zh08070005 发表于2014/10/24 16:27:08 [原文链接](http://blog.csdn.net/kennethyo/article/details/40429031)
&lt;/div&gt;
&lt;div&gt;
阅读：1061 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/40429031#comments)
&lt;/div&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]Android API，版本对照]]></title>
      <url>http://www.kennethyo.me/2014/08/22/2014-08-22/</url>
      <content type="html"><![CDATA[<p>API等级1： &nbsp;<span style="white-space:pre"> </span>Android 1.0&nbsp;</p>
<p>API等级2： &nbsp;<span style="white-space:pre"> </span>Android 1.1 Petit Four &nbsp;花式小蛋糕</p>
<p>API等级3： &nbsp;<span style="white-space:pre"> </span>Android 1.5 Cupcake &nbsp;纸杯蛋糕</p>
<p>API等级4： &nbsp;<span style="white-space:pre"> </span>Android 1.6 Donut &nbsp;甜甜圈</p>
<p>API等级5： &nbsp;<span style="white-space:pre"> </span>Android 2.0 Éclair &nbsp; 松饼</p>
<p>API等级6： &nbsp;<span style="white-space:pre"> </span>Android 2.0.1 Éclair &nbsp;松饼</p>
<p>API等级7： &nbsp;<span style="white-space:pre"> </span>Android 2.1 Éclair &nbsp; 松饼</p>
<p>API等级8： &nbsp;<span style="white-space:pre"> </span>Android 2.2 - 2.2.3 Froyo &nbsp;冻酸奶</p>
<p>API等级9： &nbsp;<span style="white-space:pre"> </span>Android 2.3 - 2.3.2 Gingerbread &nbsp;姜饼</p>
<p>API等级10：<span style="white-space:pre"> </span>Android 2.3.3-2.3.7 Gingerbread &nbsp; 姜饼</p>
<p>API等级11：<span style="white-space:pre"> </span>Android 3.0 Honeycomb 蜂巢</p>
<p>API等级12：<span style="white-space:pre"> </span>Android 3.1 Honeycomb 蜂巢</p>
<p>API等级13：<span style="white-space:pre"> </span>Android 3.2 Honeycomb 蜂巢</p>
<p>API等级14：<span style="white-space:pre"> </span>Android 4.0 - 4.0.2 Ice Cream Sandwich &nbsp;冰激凌三明治</p>
<p>API等级15：<span style="white-space:pre"> </span>Android 4.0.3 - 4.0.4 Ice Cream Sandwich &nbsp;冰激凌三明治</p>
<p>API等级16：<span style="white-space:pre"> </span>Android 4.1 Jelly Bean &nbsp;糖豆</p>
<p>API等级17：<span style="white-space:pre"> </span>Android 4.2 Jelly Bean &nbsp;糖豆</p>
<p>API等级18：<span style="white-space:pre"> </span>Android 4.3 Jelly Bean &nbsp;糖豆</p>
<p>API等级19：<span style="white-space:pre"> </span>Android 4.4 KitKat &nbsp;奇巧巧克力棒</p>
<p>API等级20：<span style="white-space:pre"> </span>Android 4.4W KitKat Wear</p>
<p>API等级21：Android 5.0 Lollipop 棒棒糖</p>
<p>API等级22：Android 5.1 Lollipop 棒棒糖</p>
<p>API等级23：Android 6.0 Marshmallow 棉花糖</p>
<p>API等级24：Android 7.0 Nougat 牛轧糖</p>
<p>API等级25：Android 7.1.1 Nougat 牛轧糖</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[译]Android文本的测量和绘制]]></title>
      <url>http://www.kennethyo.me/2014/06/23/20140623/</url>
      <content type="html"><![CDATA[<p><span style="font-size:18px">翻译与<a href="http://chris.banes.me/#blog" target="_blank" rel="noopener">Chris Banes的博客</a>&nbsp; &nbsp;<a href="http://chris.banes.me/2014/03/27/measuring-text/" target="_blank" rel="noopener">原文地址</a></span></p>
<p><span style="font-size:18px"></span></p>
<p></p>
<p><span style="font-size:18px">如果你想手动在Android Canvas上画些什么东西，你最好从绘制文本开始。</span></p>
<p><span style="font-size:18px"></span></p>
<p></p>
<p><span style="font-size:18px">文本绘制之前，你需要知道测量文本的绘制位置，计算文本X/Y轴的位置。</span></p>
<p><u><span style="font-size:18px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></u></p>
<p><span style="font-size:18px">最近我在一款APP中，需要在横向和纵向的画布上绘制一些以文本为中心的文字。于是我用了下面这些代码：</span></p>
<pre code_snippet_id="402800" snippet_file_name="blog_20140623_1_1957768" name="code" class="java">Paint mTextPaint = new Paint();  
mTextPaint.setTextAlign(Paint.Align.CENTER); // Center the text

// Later when you draw...
canvas.drawText(mText, // Text to display  
        mBounds.centerX(), // Center X of canvas bounds
        mBounds.centerY(), // Center Y of canvas bounds
        mTextPaint
);</pre><span style="font-size:18px">

我没想到代码的运行后竟然是下面的这个样子：</span>

![](http://chris.banes.me/content/images/2014/Mar/Screenshot_2014-03-27-14-41-58.png)

<span style="font-size:32px">测量文本</span>

<span style="font-size:18px">

</span>

<span style="font-size:18px">接下来，我尝试定位文本，计算了文本的高宽度，并且修改了绘制文本X轴Y轴的位置：</span>

<span style="font-size:18px">

</span>

<span style="font-size:18px"></span>

<pre code_snippet_id="402800" snippet_file_name="blog_20140623_2_8130520" name="code" class="java">int mTextWidth, mTextHeight; // Our calculated text bounds  
Paint mTextPaint = new Paint();

// Now lets calculate the size of the text
Rect textBounds = new Rect();  
mTextPaint.getTextBounds(mText, 0, mText.length(), textBounds);  
mTextWidth = textBounds.width();  
mTextHeight = textBounds.height();

// Later when you draw...
canvas.drawText(mText, // Text to display  
        mBounds.centerX() - (mTextWidth / 2f),
        mBounds.centerY() + (mTextHeight / 2f),
        mTextPaint
);</pre>

<p>这一次我们做的已经相当接近了，但是你可以看到文本还是没有居中。</p>
<p><span style="font-size:18px"></span></p>
<p></p>
<p><span style="font-size:18px"><img src="http://chris.banes.me/content/images/2014/Mar/Screenshot_2014-03-27-14-48-48.png" alt></span></p>
<p></p>
<p><span style="font-size:18px"></span></p>
<p></p>
<p><span style="font-size:18px">为了确定我没看到的原因，我用Paint.getTextBounds()计算一个矩形，并画在了文本的后面。</span></p>
<p><span style="font-size:18px"></span></p>
<p></p>
<p><span style="font-size:18px"><img src="http://chris.banes.me/content/images/2014/Mar/Screenshot_2014-03-27-14-50-33.png" alt></span></p>
<p></p>
<p><span style="font-size:18px"></span></p>
<p></p>
<p><span style="font-size:18px">正如你看到的，文本的高宽绘制在了计算范围之外。</span></p>
<p><span style="font-size:18px"></span></p>
<p></p>
<p><span style="font-size:32px">另一中测量文本的方法</span></p>
<p><span style="font-size:24px"></span></p>
<p></p>
<p><span style="font-size:18px">在这个基础点上，我看到Paint另一种计算文本宽度的方法：Paint.measureText()</span></p>
<p><span style="font-size:18px"></span></p>
<p></p>
<p><span style="font-size:18px">这个方法只能计算宽度而不能计算高度，因此我尝试结合两种方法：</span></p>
<p><span style="font-size:18px"></span></p>
<p></p>
<p><span style="font-size:18px"></span></p>
<pre code_snippet_id="402800" snippet_file_name="blog_20140623_3_9003355" name="code" class="java">int mTextWidth, mTextHeight; // Our calculated text bounds  
Paint mTextPaint = new Paint();

// Now lets calculate the size of the text
Rect textBounds = new Rect();  
mTextPaint.getTextBounds(mText, 0, mText.length(), textBounds);  
mTextWidth = mTextPaint.measureText(mText); // Use measureText to calculate width  
mTextHeight = textBounds.height(); // Use height from getTextBounds()

// Later when you draw...
canvas.drawText(mText, // Text to display  
        mBounds.centerX() - (mTextWidth / 2f),
        mBounds.centerY() + (mTextHeight / 2f),
        mTextPaint
);</pre>

<p>这几下就做出了完美居中的文本。悠嘻！</p>
<p><span style="font-size:18px"></span></p>
<p></p>
<p><span style="font-size:18px"><img src="http://chris.banes.me/content/images/2014/Mar/perfect.png" alt></span></p>
<p></p>
<pre><code>&lt;div&gt;
    作者：zh08070005 发表于2014/6/23 11:20:50 [原文链接](http://blog.csdn.net/kennethyo/article/details/33720589)
&lt;/div&gt;
&lt;div&gt;
阅读：773 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/33720589#comments)
&lt;/div&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]自定义TextView实现内容的旋转和偏移]]></title>
      <url>http://www.kennethyo.me/2014/05/08/20140508/</url>
      <content type="html"><![CDATA[<p>在一些设计上，设计师会要求我们的文字以45度显示，或者135度显示（如下图“抽奖”），可是android本身并没有提供TextView在布局文件中实现旋转的标签，这时候就需要我们去自定义TextView，并且重写onDraw（）方法实现效果。</p>
<p><img src="http://img.blog.csdn.net/20140508114640671?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p>
<p>下面，让我们去实现这个效果吧。</p>
<p>首先我们熟悉一下android view坐标系，android采用的X,Y横纵坐标系，X轴向右为正方向，Y轴向下为正方向，旋转方向为顺时针，如下图。</p>
<p><img src="http://img.blog.csdn.net/20140508134205843?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p>
<p>默认我们的文字是在TextView左上角显示的，我们要旋转的也就是这个文字，而文字绘制的时候也是有一个范围的，例如下图，文字外面我标识出来的方框。而我们的操作的都是以TextView坐标系的原点进行移动和旋转。</p>
<p><img src="http://img.blog.csdn.net/20140508135250531?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p>
<p>这样我们就确定我们要进行的操作，针对onDraw（）对canvas进行translate（移动）或者rotate（旋转）操作坐标系，这里要说明的一点是，按我的习惯来，肯定是先进行偏移再进行旋转，旋转后的坐标系，想必你看着也会很难受吧。</p>
<p>下面是我重写的TextView的代码和效果图以及布局中的使用。我在Xml中自定义了标签，但是没有对标签内容进行约束，因为比较懒。。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rtv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * text旋转的textview</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kenneth</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RotateTextView</span> <span class="keyword">extends</span> <span class="title">TextView</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>   String NAME_SPACE =<span class="string">"http://www.baidu.com/apk/res/custom"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ATTR_ROTATE = <span class="string">"rotate"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_VALUE_ROTATE = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ATTR_TRANSLATE_X= <span class="string">"translateX"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ATTR_TRANSLATE_Y = <span class="string">"translateY"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_VALUE_TRANSLATE_X = <span class="number">0f</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_VALUE_TRANSLATE_Y = <span class="number">0f</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> rotate = DEFAULT_VALUE_ROTATE;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">float</span> translateX = DEFAULT_VALUE_TRANSLATE_X;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">float</span> translateY = DEFAULT_VALUE_TRANSLATE_Y;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">RotateTextView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(context, attrs);</span><br><span class="line">		rotate = attrs.getAttributeIntValue(NAME_SPACE, ATTR_ROTATE, DEFAULT_VALUE_ROTATE);<span class="comment">//旋转度数</span></span><br><span class="line"></span><br><span class="line">		translateX = attrs.getAttributeFloatValue(NAME_SPACE, ATTR_TRANSLATE_X, DEFAULT_VALUE_TRANSLATE_X);<span class="comment">//获取在布局中的x轴偏移百分比</span></span><br><span class="line">		translateY = attrs.getAttributeFloatValue(NAME_SPACE, ATTR_TRANSLATE_Y, DEFAULT_VALUE_TRANSLATE_Y);<span class="comment">//获取在布局中的y轴偏移百分比</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">		canvas.translate(getMeasuredWidth()*translateX, getMeasuredHeight()*translateY);</span><br><span class="line">		<span class="comment">//首先偏移在旋转，是因为，如果先旋转，本身xy坐标系也会跟着旋转，之后在偏移会不方便我们的控制，也不直观</span></span><br><span class="line">		canvas.rotate(rotate);</span><br><span class="line">		<span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:custom</span>=<span class="string">"http://www.baidu.com/apk/res/custom"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"com.example.rtv.MainActivity$PlaceholderFragment"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.example.rtv.RotateTextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/rotateTextView1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/hello_world"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">custom:rotate</span>=<span class="string">"45"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.example.rtv.RotateTextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/rotateTextView2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignLeft</span>=<span class="string">"@+id/rotateTextView1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/hello_world"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">custom:rotate</span>=<span class="string">"135"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">custom:translateX</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.example.rtv.RotateTextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/rotateTextView3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignLeft</span>=<span class="string">"@+id/rotateTextView1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/hello_world"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">custom:rotate</span>=<span class="string">"135"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">custom:translateX</span>=<span class="string">"0.5"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">custom:translateY</span>=<span class="string">"0.5"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/textView1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignBaseline</span>=<span class="string">"@+id/rotateTextView2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignBottom</span>=<span class="string">"@+id/rotateTextView2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_toRightOf</span>=<span class="string">"@+id/rotateTextView2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"向X轴正方向偏移100%，旋转135°"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/textView2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignTop</span>=<span class="string">"@+id/rotateTextView1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"14dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_toRightOf</span>=<span class="string">"@+id/rotateTextView1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"原地不动，旋转45°"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/textView3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignTop</span>=<span class="string">"@+id/rotateTextView3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"15dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_toRightOf</span>=<span class="string">"@+id/rotateTextView3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"x轴y轴偏移50%，旋转135°"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.example.rtv.RotateTextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/RotateTextView01"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/hello_world"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]博主毕业以来总结的android经验，想起来什么就加点]]></title>
      <url>http://www.kennethyo.me/2014/04/23/20140423/</url>
      <content type="html"><![CDATA[<h2 id="1，api10以下尽量用padding-margin很多的时候会有bug，显示不出效果"><a href="#1，api10以下尽量用padding-margin很多的时候会有bug，显示不出效果" class="headerlink" title="1，api10以下尽量用padding,margin很多的时候会有bug，显示不出效果"></a>1，api10以下尽量用padding,margin很多的时候会有bug，显示不出效果</h2><h2 id="2，混淆，最好不要混淆实体类，用到反射的时候会报错"><a href="#2，混淆，最好不要混淆实体类，用到反射的时候会报错" class="headerlink" title="2，混淆，最好不要混淆实体类，用到反射的时候会报错"></a>2，混淆，最好不要混淆实体类，用到反射的时候会报错</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-keep <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">bocop</span>.<span class="title">commons</span>.<span class="title">bean</span>.**</span></span><br><span class="line"><span class="class">-<span class="title">keepclasseswithmembers</span> <span class="title">class</span> <span class="title">com</span>.<span class="title">bocop</span>.<span class="title">commons</span>.<span class="title">bean</span>.** </span>&#123;</span><br><span class="line">    *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3，非常好用的收键盘方式，适用fragment"><a href="#3，非常好用的收键盘方式，适用fragment" class="headerlink" title="3，非常好用的收键盘方式，适用fragment"></a>3，非常好用的收键盘方式，适用fragment</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);</span><br></pre></td></tr></table></figure>
<p>收键盘代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (getActivity().getWindow().getAttributes().softInputMode == WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED) &#123;</span><br><span class="line">	<span class="keyword">if</span> (getActivity().getCurrentFocus() != <span class="keyword">null</span>)</span><br><span class="line">		imm.hideSoftInputFromWindow(getActivity().getCurrentFocus().getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="4，EditText不获取焦点不获取光标的方法"><a href="#4，EditText不获取焦点不获取光标的方法" class="headerlink" title="4，EditText不获取焦点不获取光标的方法"></a>4，EditText不获取焦点不获取光标的方法</h2><p>在EditText的包裹空间加入2个属性即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:focusable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:focusableInTouchMode</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/et_phone"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">"@style/text_black_default_bg"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:inputType</span>=<span class="string">"phone"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="5，如何实现在Tabhost中的activity-overridePendingTransition-切换效果"><a href="#5，如何实现在Tabhost中的activity-overridePendingTransition-切换效果" class="headerlink" title="5，如何实现在Tabhost中的activity overridePendingTransition()切换效果"></a>5，如何实现在Tabhost中的activity overridePendingTransition()切换效果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimCommon</span> </span>&#123;<span class="comment">//维护页面切换效果工具类</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> in = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">		in = a ;</span><br><span class="line">		out = b;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">		in = <span class="number">0</span>;</span><br><span class="line">		out = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在tabhost的onPause周期实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">super</span>.overridePendingTransition(AnimCommon.in, AnimCommon.out);</span><br><span class="line">	AnimCommon.clear();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">super</span>.onPause();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在activity中startActivity或者finish的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent= <span class="keyword">new</span> Intent(<span class="keyword">this</span>, *<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">AnimCommon.set(R.anim.push_left_in, R.anim.push_left_out);</span><br><span class="line"><span class="keyword">this</span>.startActivity(intent);</span><br></pre></td></tr></table></figure></p>
<h2 id="6，视图大小的控制是由父视图、布局文件、以及视图本身共同完成的，父视图会提供给子视图参考的大小，而开发人员可以在XML文件中指定视图的大小，然后视图本身会对最终的大小进行拍板"><a href="#6，视图大小的控制是由父视图、布局文件、以及视图本身共同完成的，父视图会提供给子视图参考的大小，而开发人员可以在XML文件中指定视图的大小，然后视图本身会对最终的大小进行拍板" class="headerlink" title="6，视图大小的控制是由父视图、布局文件、以及视图本身共同完成的，父视图会提供给子视图参考的大小，而开发人员可以在XML文件中指定视图的大小，然后视图本身会对最终的大小进行拍板"></a>6，视图大小的控制是由父视图、布局文件、以及视图本身共同完成的，父视图会提供给子视图参考的大小，而开发人员可以在XML文件中指定视图的大小，然后视图本身会对最终的大小进行拍板</h2><h3 id="7，当listview含有Header时，在onItemClick事件中请这样获取ItemObject"><a href="#7，当listview含有Header时，在onItemClick事件中请这样获取ItemObject" class="headerlink" title="7，当listview含有Header时，在onItemClick事件中请这样获取ItemObject"></a>7，当listview含有Header时，在onItemClick事件中请这样获取ItemObject</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object obj = parent.getAdapter().getItem(position);</span><br></pre></td></tr></table></figure>
<p> 先判空，再强转为需要的对象。这样就可以避免手动在onItemClick中（positon-header数量）了。</p>
<h3 id="8，在做自定义view的时候，避免不了各种画图，画图就会用到各种对float的运算，这里做运算的时候要长个心。"><a href="#8，在做自定义view的时候，避免不了各种画图，画图就会用到各种对float的运算，这里做运算的时候要长个心。" class="headerlink" title="8，在做自定义view的时候，避免不了各种画图，画图就会用到各种对float的运算，这里做运算的时候要长个心。"></a>8，在做自定义view的时候，避免不了各种画图，画图就会用到各种对float的运算，这里做运算的时候要长个心。</h3><h3 id="9，主动关闭Alert-Dialog-builder，可以借助builder-create-，返回的对象为AlertDialog。"><a href="#9，主动关闭Alert-Dialog-builder，可以借助builder-create-，返回的对象为AlertDialog。" class="headerlink" title="9，主动关闭Alert.Dialog.builder，可以借助builder.create()，返回的对象为AlertDialog。"></a>9，主动关闭Alert.Dialog.builder，可以借助builder.create()，返回的对象为AlertDialog。</h3><p>这里还要说一下，builder本身是没有dismiss()和cancel()方法的.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AlertDialog.Builder alertDialog = <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</span><br><span class="line">		alertDialog.setView(upload_menu);</span><br><span class="line">		alert = alertDialog.create();</span><br><span class="line">		alert.show();</span><br><span class="line"></span><br><span class="line">		alert.dismiss();</span><br></pre></td></tr></table></figure></p>
<h3 id="10，BitmapFactory-decodeStream-InputStream-is-Rect-outPadding-Options-opts-返回null的问题"><a href="#10，BitmapFactory-decodeStream-InputStream-is-Rect-outPadding-Options-opts-返回null的问题" class="headerlink" title="10，BitmapFactory().decodeStream(InputStream is,Rect outPadding,Options opts)返回null的问题"></a>10，BitmapFactory().decodeStream(InputStream is,Rect outPadding,Options opts)返回null的问题</h3><p>很多人会遇到这样的情况，通过上面的方法返回null的问题，如下代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">		options.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">		InputStream openInputStream = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			openInputStream = getContentResolver().openInputStream(mPicUri);</span><br><span class="line">			Bitmap bm = BitmapFactory.decodeStream(</span><br><span class="line">					openInputStream, <span class="keyword">null</span>,</span><br><span class="line">					options);</span><br><span class="line">			options.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line">			<span class="keyword">int</span> be = (<span class="keyword">int</span>) (options.outHeight / (<span class="keyword">float</span>) <span class="number">200</span>);</span><br><span class="line">			<span class="keyword">if</span> (be &lt;= <span class="number">0</span>)</span><br><span class="line">				be = <span class="number">1</span>;</span><br><span class="line">			options.inSampleSize = be;</span><br><span class="line">			openInputStream = getContentResolver().openInputStream(mPicUri);</span><br><span class="line">			bm = BitmapFactory.decodeStream(openInputStream, <span class="keyword">null</span>,</span><br><span class="line">					options);</span><br><span class="line">			Matrix matrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">			mPicBitamp = Bitmap.createBitmap(bm, <span class="number">0</span>, <span class="number">0</span>, bm.getWidth() - <span class="number">10</span>,</span><br><span class="line">					bm.getHeight() - <span class="number">10</span>, matrix, <span class="keyword">true</span>);</span><br><span class="line">			bm.recycle();</span><br><span class="line">			showPic(mPicBitamp);</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">null</span>!=openInputStream)&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					openInputStream.close();</span><br><span class="line">					openInputStream=<span class="keyword">null</span>;</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure></p>
<p>这是因为我们在两个Bitmap.decodeStream()方法中用了同一支流进行了处理，这里需要我们分别给两只不同的流，如下代码达到效果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">		options.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">		InputStream openInputStream1 = <span class="keyword">null</span>;</span><br><span class="line">		InputStream openInputStream2 = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			openInputStream1 = getContentResolver().openInputStream(mPicUri);</span><br><span class="line">			Bitmap bm = BitmapFactory.decodeStream(</span><br><span class="line">					openInputStream1, <span class="keyword">null</span>,</span><br><span class="line">					options);</span><br><span class="line">			options.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line">			<span class="keyword">int</span> be = (<span class="keyword">int</span>) (options.outHeight / (<span class="keyword">float</span>) <span class="number">200</span>);</span><br><span class="line">			<span class="keyword">if</span> (be &lt;= <span class="number">0</span>)</span><br><span class="line">				be = <span class="number">1</span>;</span><br><span class="line">			options.inSampleSize = be;</span><br><span class="line"></span><br><span class="line">			openInputStream2 = getContentResolver().openInputStream(mPicUri);</span><br><span class="line"></span><br><span class="line">			bm = BitmapFactory.decodeStream(openInputStream2, <span class="keyword">null</span>,</span><br><span class="line">					options);</span><br><span class="line">			Matrix matrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">			mPicBitamp = Bitmap.createBitmap(bm, <span class="number">0</span>, <span class="number">0</span>, bm.getWidth() - <span class="number">10</span>,</span><br><span class="line">					bm.getHeight() - <span class="number">10</span>, matrix, <span class="keyword">true</span>);</span><br><span class="line">			bm.recycle();</span><br><span class="line">			showPic(mPicBitamp);</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			closeInputStream(openInputStream1);</span><br><span class="line">			closeInputStream(openInputStream2);</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="11，启动三星系统相机导致打开相机的Activity，会被destroy，导致nullpointexception。"><a href="#11，启动三星系统相机导致打开相机的Activity，会被destroy，导致nullpointexception。" class="headerlink" title="11，启动三星系统相机导致打开相机的Activity，会被destroy，导致nullpointexception。"></a>11，启动三星系统相机导致打开相机的Activity，会被destroy，导致nullpointexception。</h2><p>发生这个问题可能大家已经分析到了，三星相机会根据用户横持或竖持设备进行旋转，这样就会导致我们开启系统相机的Activity进行销毁重构。我的解决办法是在清单文件里注册android:configChanges=”keyboardHidden|orientation|screenSize”，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".view.WantQuestionsActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:screenOrientation</span>=<span class="string">"portrait"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:configChanges</span>=<span class="string">"keyboardHidden|orientation|screenSize"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:windowSoftInputMode</span>=<span class="string">"adjustResize"</span> &gt;</span></span><br><span class="line">       		 <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>并且在开启的Activity代码中重写<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</span><br><span class="line">	Configuration configuration =<span class="keyword">new</span> Configuration(newConfig);</span><br><span class="line">	configuration.orientation =Configuration.ORIENTATION_PORTRAIT;</span><br><span class="line">	newConfig.setTo(configuration);</span><br><span class="line">	<span class="keyword">super</span>.onConfigurationChanged(newConfig);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其时到这里还会有一个问题就是照片旋转了，这里就不贴代码了，相信大家旋转照片网上能搜索一大把的。</p>
<h2 id="12，listview有一个setEmptyView的方法，当adapter等于null或者item等0的时候会显示你设置的布局。"><a href="#12，listview有一个setEmptyView的方法，当adapter等于null或者item等0的时候会显示你设置的布局。" class="headerlink" title="12，listview有一个setEmptyView的方法，当adapter等于null或者item等0的时候会显示你设置的布局。"></a>12，listview有一个setEmptyView的方法，当adapter等于null或者item等0的时候会显示你设置的布局。</h2><h2 id="13-验证是否有合适的activity会响应这个intent，需要执行queryIntentActivities来获取到能够接收这个intent的所有activity的list。如果返回的List"><a href="#13-验证是否有合适的activity会响应这个intent，需要执行queryIntentActivities来获取到能够接收这个intent的所有activity的list。如果返回的List" class="headerlink" title="13, 验证是否有合适的activity会响应这个intent，需要执行queryIntentActivities来获取到能够接收这个intent的所有activity的list。如果返回的List"></a>13, 验证是否有合适的activity会响应这个intent，需要执行<a href="http://developer.android.com/reference/android/content/pm/PackageManager.html#queryIntentActivities(android.content.Intent, int" target="_blank" rel="noopener"><code>queryIntentActivities</code></a>来获取到能够接收这个intent的所有activity的list。如果返回的<a href="http://developer.android.com/reference/java/util/List.html" target="_blank" rel="noopener">List</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PackageManager packageManager = getPackageManager();</span><br><span class="line">List&lt;ResolveInfo&gt; activities = packageManager.queryIntentActivities(intent, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">boolean</span> isIntentSafe = activities.size() &gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>如果<code>isIntentSafe</code>是<code>true</code>,那么至少有一个app可以响应这个intent。如果是<code>false</code>则说明没有app可以handle这个intent。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]用Fragment来代替过期的Tabhost和ActivityGroup]]></title>
      <url>http://www.kennethyo.me/2014/02/11/20140211/</url>
      <content type="html"><![CDATA[<p><span style="white-space:pre"></span>我去年9月份做的一个项目中，主界面也是选项卡这种效果，搭建项目的另一位工程师仍然使用的是Tabhost。</p>
<p><span style="white-space:pre"></span>最近想起这件事来，便有了这篇博客。（Tabhost和ActivityGroup分别在api 13 和 14 中标记为过期）</p>
<p><span style="white-space:pre"></span>本篇博客主要介绍如何用Fragment实现Tabhost效果。</p>
<p><span style="white-space:pre"></span>下图红色部分是RelativeLayout，用来实现Fragment的容器；绿色部分为RadioGroup。</p>
<p><span style="white-space:pre"><img src="http://img.blog.csdn.net/20140211130538312?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></span></p>
<p><span style="white-space:pre"></span></p>
<p></p>
<p><span style="white-space:pre"></span></p>
<p><span style="white-space:pre">首先</span>布局xml中加入一个RelativeLayout来作为Fragment的容器，相当于Tabhost中的tabcontent；加入RadioGroup来作为选项卡，相当于Tabhost中的TabWidget。具体如下：</p>
<pre code_snippet_id="183528" snippet_file_name="blog_20140211_1_4349355" name="code" class="html">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    tools:context=&quot;.MainActivity&quot; &gt;

    &lt;!-- 相当于TabWidget --&gt;

    &lt;RadioGroup
        android:id=&quot;@+id/radioGroup1&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:layout_alignParentBottom=&quot;true&quot;
        android:layout_alignParentLeft=&quot;true&quot;
        android:layout_alignParentRight=&quot;true&quot;
        android:orientation=&quot;horizontal&quot; &gt;

        &lt;RadioButton
            android:id=&quot;@+id/radio0&quot;
            android:layout_width=&quot;0dp&quot;
            android:layout_height=&quot;wrap_content&quot;
            android:layout_weight=&quot;1&quot;
            android:checked=&quot;true&quot;
            android:text=&quot;一&quot; /&gt;

        &lt;RadioButton
            android:id=&quot;@+id/radio1&quot;
            android:layout_width=&quot;0dp&quot;
            android:layout_height=&quot;wrap_content&quot;
            android:layout_weight=&quot;1&quot;
            android:text=&quot;二&quot; /&gt;

        &lt;RadioButton
            android:id=&quot;@+id/radio2&quot;
            android:layout_width=&quot;0dp&quot;
            android:layout_height=&quot;wrap_content&quot;
            android:layout_weight=&quot;1&quot;
            android:text=&quot;三&quot; /&gt;
    &lt;/RadioGroup&gt;
    &lt;!-- 相当于tabcontent --&gt;

    &lt;RelativeLayout
        android:id=&quot;@+id/content&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;match_parent&quot;
        android:layout_above=&quot;@+id/radioGroup1&quot;
        android:layout_alignParentLeft=&quot;true&quot;
        android:layout_alignParentTop=&quot;true&quot; &gt;
    &lt;/RelativeLayout&gt;

&lt;/RelativeLayout&gt;</pre>

<p><span style="white-space:pre"></span>其次，在当前Activity中加入默认Fragment，并且通过RadioGroup的监听来进行切换Fragment。具体Activity代码如下：</p>
<pre code_snippet_id="183528" snippet_file_name="blog_20140211_2_5156150" name="code" class="java">package com.kenneth.blogtabfragment;

import android.app.Activity;
import android.app.Fragment;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.content.Context;
import android.os.Bundle;
import android.view.Menu;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RadioGroup.OnCheckedChangeListener;

/**
 * @author Kenneth 2014-2-11 上午10:26:06
 */
public class MainActivity extends Activity implements OnCheckedChangeListener {
    public static final String TAG = MainActivity.class.getSimpleName();
    private Context mContext = this;
    private FragmentManager fm;
    private RadioGroup radioGroup1;
    private RadioButton radio0;
    private RadioButton radio1;
    private RadioButton radio2;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initView();
        initData();
        initListener();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    private void initView() {
        radioGroup1 = (RadioGroup) findViewById(R.id.radioGroup1);
        radio0 = (RadioButton) findViewById(R.id.radio0);
        radio1 = (RadioButton) findViewById(R.id.radio1);
        radio2 = (RadioButton) findViewById(R.id.radio2);
    }

    private void initData() {
        fm = getFragmentManager();// 获取fragment管理工具类
        replace(new FirstFragment());//默认选第一个
    }

    private void initListener() {
        radioGroup1.setOnCheckedChangeListener(this);
    }

    @Override
    public void onCheckedChanged(RadioGroup group, int checkedId) {
        switch (checkedId) {
        case R.id.radio0:
            replace(new FirstFragment());
            break;
        case R.id.radio1:
            replace(new SecondFragment());

            break;
        case R.id.radio2:
            replace(new ThirdFragment());

            break;

        default:
            break;
        }
    }

    private void replace(Fragment fragment) {//替换当前容器中的Fragment
        FragmentTransaction beginTransaction = fm.beginTransaction();
        beginTransaction.replace(R.id.content, fragment);
        beginTransaction.commit();
    }
}
</pre>

<p><span style="white-space:pre"></span>以上，就是用Fragment来实现Tabhost效果的主要代码。如果是api11以下，请把getFragmentManager替换为getSupportFragmentManager,其他Fragment相关的请引v4支持包中的。</p>
<p><span style="white-space:pre"></span>用多了你就会发现Fragment要比Tabhost，ActivityGroup好用太多了。</p>
<p><span style="white-space:pre"></span><a href="http://download.csdn.net/download/zh08070005/6912303" target="_blank" rel="noopener">我的工程包地址。</a></p>
<p><span style="white-space:pre"></span></p>
<p><span style="white-space:pre"></span></p>
<pre><code>&lt;div&gt;
    作者：zh08070005 发表于2014/2/11 13:24:14 [原文链接](http://blog.csdn.net/kennethyo/article/details/19074255)
&lt;/div&gt;
&lt;div&gt;
阅读：1340 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/19074255#comments)
&lt;/div&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[转]Google Java编程风格指南]]></title>
      <url>http://www.kennethyo.me/2014/02/10/20160901/</url>
      <content type="html"><![CDATA[<div style="color:rgb(51,51,51); font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px; line-height:23px"><br>作者：Hawstein<br><br>出处：<a href="http://hawstein.com/posts/google-java-style.html" target="_blank" rel="noopener">http://hawstein.com/posts/google-java-style.html</a><br><br>声明：本文采用以下协议进行授权：&nbsp;<a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" target="_blank" rel="noopener">自由转载-非商用-非衍生-保持署名|Creative Commons BY-NC-ND 3.0</a>&nbsp;，转载请注明作者及出处。<br><br></div>

<p>##<br>目录</p>
<ol>
<li><a href="http://hawstein.com/posts/google-java-style.html#Intro" target="_blank" rel="noopener">前言</a></li>
<li><a href="http://hawstein.com/posts/google-java-style.html#SFBasic" target="_blank" rel="noopener">源文件基础</a></li>
<li><a href="http://hawstein.com/posts/google-java-style.html#SFStruct" target="_blank" rel="noopener">源文件结构</a></li>
<li><a href="http://hawstein.com/posts/google-java-style.html#Format" target="_blank" rel="noopener">&#26684;式</a></li>
<li><a href="http://hawstein.com/posts/google-java-style.html#Naming" target="_blank" rel="noopener">命名约定</a></li>
<li><a href="http://hawstein.com/posts/google-java-style.html#Practice" target="_blank" rel="noopener">编程实践</a></li>
<li><a href="http://hawstein.com/posts/google-java-style.html#Javadoc" target="_blank" rel="noopener">Javadoc</a></li>
<li><a href="http://hawstein.com/posts/google-java-style.html#End" target="_blank" rel="noopener">后记</a></li>
</ol>
<p>##<br><a target="_blank" id="Intro" style="color:rgb(0,136,204)">前言</a></p>
<p>这份文档是Google Java编程风&#26684;规范的完整定义。当且仅当一个Java源文件符合此文档中的规则， 我们才认为它符合Google的Java编程风&#26684;。</p>
<p>与其它的编程风&#26684;指南一样，这里所讨论的不仅仅是编码&#26684;式美不美观的问题， 同时也讨论一些约定及编码标准。然而，这份文档主要侧重于我们所普遍遵循的规则， 对于那些不是明确强制要求的，我们尽量避免提供意见。</p>
<p>###<br>1.1 术语说明</p>
<p>在本文档中，除非另有说明：</p>
<ol>
<li>术语class可表示一个普通类，枚举类，接口或是annotation类型(<code>@interface</code>)</li>
<li>术语comment只用来指代实现的注释(implementation comments)，我们不使用“documentation comments”一词，而是用Javadoc。</li>
</ol>
<p>其他的术语说明会偶尔在后面的文档出现。</p>
<p>###<br>1.2 指南说明</p>
<p>本文档中的示例代码并不作为规范。也就是说，虽然示例代码是遵循Google编程风&#26684;，但并不意味着这是展现这些代码的唯一方式。 示例中的&#26684;式选择不应该被强制定为规则。</p>
<p>##<br><a target="_blank" id="SFBasic" style="color:rgb(0,136,204)">源文件基础</a></p>
<p>###<br>2.1 文件名</p>
<p>源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为<code>.java</code>。</p>
<p>###<br>2.2 文件编码：UTF-8</p>
<p>源文件编码&#26684;式为UTF-8。</p>
<p>###<br>2.3 特殊字符</p>
<p>####<br>2.3.1 空白字符</p>
<p>除了行结束符序列，ASCII水平空&#26684;字符(0x20，即空&#26684;)是源文件中唯一允许出现的空白字符，这意味着：</p>
<ol>
<li>所有其它字符串中的空白字符都要进行转义。</li>
<li>制表符不用于缩进。</li>
</ol>
<p>####<br>2.3.2 特殊转义序列</p>
<p>对于具有特殊<a href="http://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97" target="_blank" rel="noopener">转义序列</a>的任何字符(\b, \t, \n, \f, \r, \“, \‘及)，我们使用它的转义序列，而不是相应的八进制(比如<code>\012</code>)或Unicode(比如<code>\u000a</code>)转义。</p>
<p>####<br>2.3.3 非ASCII字符</p>
<p>对于剩余的非ASCII字符，是使用实际的Unicode字符(比如∞)，还是使用等价的Unicode转义符(比如\u221e)，取决于哪个能让代码更易于阅读和理解。</p>
<blockquote>
<blockquote>
<p>Tip: 在使用Unicode转义符或是一些实际的Unicode字符时，建议做些注释给出解释，这有助于别人阅读和理解。</p>
</blockquote>
</blockquote>
<p>例如：</p>
<pre><code>String unitAbbrev = &amp;quot;μs&amp;quot;;                                 | 赞，即使没有注释也非常清晰
String unitAbbrev = &amp;quot;\u03bcs&amp;quot;; // &amp;quot;μs&amp;quot;                    | 允许，但没有理由要这样做
String unitAbbrev = &amp;quot;\u03bcs&amp;quot;; // Greek letter mu, &amp;quot;s&amp;quot;    | 允许，但这样做显得笨拙还容易出错
String unitAbbrev = &amp;quot;\u03bcs&amp;quot;;                            | 很糟，读者根本看不出这是什么
return &apos;\ufeff&apos; &amp;#43; content; // byte order mark             | Good，对于非打印字符，使用转义，并在必要时写上注释
`&lt;/pre&gt;
&gt; &gt; Tip: 永远不要由于害怕某些程序可能无法正确处理非ASCII字符而让你的代码可读性变差。当程序无法正确处理非ASCII字符时，它自然无法正确运行， 你就会去fix这些问题的了。(言下之意就是大胆去用非ASCII字符，如果真的有需要的话)

##
&lt;a target=&quot;_blank&quot; id=&quot;SFStruct&quot; style=&quot;color:rgb(0,136,204)&quot;&gt;源文件结构&lt;/a&gt;

一个源文件包含(按顺序地)：
</code></pre><ol>
<li>许可证或版权信息(如有需要)</li>
<li>package语句</li>
<li>import语句</li>
<li><p>一个顶级类(<strong>只有一个</strong>)</p>
<p>以上每个部分之间用一个空行隔开。</p>
<p>###<br>3.1 许可证或版权信息</p>
<p>如果一个文件包含许可证或版权信息，那么它应当被放在文件最前面。</p>
<p>###<br>3.2 package语句</p>
<p>package语句不换行，列限制(4.4节)并不适用于package语句。(即package语句写在一行里)</p>
<p>###<br>3.3 import语句</p>
<p>####<br>3.3.1 import不要使用通配符</p>
<p>即，不要出现类&#20284;这样的import语句：<code>import java.util.*;</code></p>
<p>####<br>3.3.2 不要换行</p>
<p>import语句不换行，列限制(4.4节)并不适用于import语句。(每个import语句独立成行)</p>
<p>####<br>3.3.3 顺序和间距</p>
<p>import语句可分为以下几组，按照这个顺序，每组由一个空行分隔：</p>
</li>
<li><p>所有的静态导入独立成组</p>
</li>
<li><code>com.google</code>&nbsp;imports(仅当这个源文件是在<code>com.google</code>包下)</li>
<li>第三方的包。每个顶级包为一组，字典序。例如：android, com, junit, org, sun</li>
<li><code>java</code>&nbsp;imports</li>
<li><p><code>javax</code>&nbsp;imports</p>
<p>组内不空行，按字典序排列。</p>
<p>###<br>3.4 类声明</p>
<p>####<br>3.4.1 只有一个顶级类声明</p>
<p>每个顶级类都在一个与它同名的源文件中(当然，还包含<code>.java</code>后缀)。</p>
<p>例外：<code>package-info.java</code>，该文件中可没有<code>package-info</code>类。</p>
<p>####<br>3.4.2 类成员顺序</p>
<p>类的成员顺序对易学性有很大的影响，但这也不存在唯一的通用法则。不同的类对成员的排序可能是不同的。 最重要的一点，每个类应该以某种逻辑去排序它的成员，维护者应该要能解释这种排序逻辑。比如， 新的方法不能总是习惯性地添加到类的结尾，因为这样就是按时间顺序而非某种逻辑来排序的。</p>
<p>#####<br>3.4.2.1 重载：永不分离</p>
<p>当一个类有多个构造函数，或是多个同名方法，这些函数/方法应该按顺序出现在一起，中间不要放进其它函数/方法。</p>
<p>##<br><a target="_blank" id="Format" style="color:rgb(0,136,204)">&#26684;式</a></p>
<p><strong>术语说明</strong>：块状结构(block-like construct)指的是一个类，方法或构造函数的主体。需要注意的是，数组初始化中的初始&#20540;可被选择性地视为块状结构(4.8.3.1节)。</p>
<p>###<br>4.1 大括号</p>
<p>####<br>4.1.1 使用大括号(即使是可选的)</p>
<p>大括号与<code>if, else, for, do, while</code>语句一起使用，即使只有一条语句(或是空)，也应该把大括号写上。</p>
<p>####<br>4.1.2 非空块：K &amp; R 风&#26684;</p>
<p>对于非空块和块状结构，大括号遵循Kernighan和Ritchie风&#26684; (<a href="http://www.codinghorror.com/blog/2012/07/new-programming-jargon.html" target="_blank" rel="noopener">Egyptian brackets</a>):</p>
</li>
</ol>
<ul>
<li>左大括号前不换行</li>
<li>左大括号后换行</li>
<li>右大括号前换行</li>
<li><p>如果右大括号是一个语句、函数体或类的终止，则右大括号后换行; 否则不换行。例如，如果右大括号后面是else或逗号，则不换行。</p>
<p>示例：</p>
<div class="highlight" style="color:rgb(51,51,51); font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px; line-height:18px"><br><pre style="padding:8.5px; font-family:Menlo,Monaco,'Courier New',monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word"><code>&lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color:rgb(0,170,0)&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot; style=&quot;color:rgb(136,136,136)&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,170,170)&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProblemException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;recover&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;</code></pre><br></div>

<p>4.8.1节给出了enum类的一些例外。</p>
<p>####<br>4.1.3 空块：可以用简洁版本</p>
<p>一个空的块状结构里什么也不包含，大括号可以简洁地写成<code>{}</code>，不需要换行。例外：如果它是一个多块语句的一部分(if/else 或<br> try/catch/finally) ，即使大括号内没内容，右大括号也要换行。</p>
<p>示例：</p>
<div class="highlight" style="color:rgb(51,51,51); font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px; line-height:18px"><br><pre style="padding:8.5px; font-family:Menlo,Monaco,'Courier New',monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word"><code>&lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,170,170)&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color:rgb(0,170,0)&quot;&gt;doNothing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;</code></pre><br></div>

<p>###<br>4.2 块缩进：2个空&#26684;</p>
<p>每当开始一个新的块，缩进增加2个空&#26684;，当块结束时，缩进返回先前的缩进级别。缩进级别适用于代码和注释。(见4.1.2节中的代码示例)</p>
<p>###<br>4.3 一行一个语句</p>
<p>每个语句后要换行。</p>
<p>###<br>4.4 列限制：80或100</p>
<p>一个项目可以选择一行80个字符或100个字符的列限制，除了下述例外，任何一行如果超过这个字符数限制，必须自动换行。</p>
<p>例外：</p>
</li>
</ul>
<ol>
<li>不可能满足列限制的行(例如，Javadoc中的一个长URL，或是一个长的JSNI方法参考)。</li>
<li><code>package</code>和<code>import</code>语句(见3.2节和3.3节)。</li>
<li><p>注释中那些可能被剪切并粘贴到shell中的命令行。</p>
<p>###<br>4.5 自动换行</p>
<p><strong>术语说明</strong>：一般情况下，一行长代码为了避免超出列限制(80或100个字符)而被分为多行，我们称之为自动换行(line-wrapping)。</p>
<p>我们并没有全面，确定性的准则来决定在每一种情况下如何自动换行。很多时候，对于同一段代码会有好几种有效的自动换行方式。</p>
<blockquote>
<blockquote>
<p>Tip: 提取方法或局部变量可以在不换行的情况下解决代码过长的问题(是合理缩短命名长度吧)</p>
</blockquote>
</blockquote>
<p>####<br>4.5.1 从哪里断开</p>
<p>自动换行的基本准则是：更倾向于在更高的语法级别处断开。</p>
</li>
<li><p>如果在<code>非赋&amp;#20540;运算符</code>处断开，那么在该符号前断开(比如&#43;，它将位于下一行)。注意：这一点与Google其它语言的编程风&#26684;不同(如C&#43;&#43;和JavaScript)。<br> 这条规则也适用于以下“类运算符”符号：点分隔符(.)，类型界限中的&amp;（<code>&amp;lt;T extends Foo &amp;amp; Bar&amp;gt;</code>)，catch块中的管道符号(<code>catch
 (FooException | BarException e</code>)</p>
</li>
<li>如果在<code>赋&amp;#20540;运算符</code>处断开，通常的做法是在该符号后断开(比如=，它与前面的内容留在同一行)。这条规则也适用于<code>foreach</code>语句中的分号。</li>
<li>方法名或构造函数名与左括号留在同一行。</li>
<li><p>逗号(,)与其前面的内容留在同一行。</p>
<p>####<br>4.5.2 自动换行时缩进至少&#43;4个空&#26684;</p>
<p>自动换行时，第一行后的每一行至少比第一行多缩进4个空&#26684;(注意：制表符不用于缩进。见2.3.1节)。</p>
<p>当存在连续自动换行时，缩进可能会多缩进不只4个空&#26684;(语法元素存在多级时)。一般而言，两个连续行使用相同的缩进当且仅当它们开始于同级语法元素。</p>
<p>第4.6.3水平对齐一节中指出，不鼓励使用可变数目的空&#26684;来对齐前面行的符号。</p>
<p>###<br>4.6 空白</p>
<p>####<br>4.6.1 垂直空白</p>
<p>以下情况需要使用一个空行：</p>
</li>
<li><p>类内连续的成员之间：字段，构造函数，方法，嵌套类，静态初始化块，实例初始化块。</p>
<pre><code>*   **例外**：两个连续字段之间的空行是可选的，用于字段的空行主要用来对字段进行逻辑分组。
</code></pre></li>
<li>在函数体内，语句的逻辑分组间使用空行。</li>
<li>类内的第一个成员前或最后一个成员后的空行是可选的(既不鼓励也不反对这样做，视个人喜好而定)。</li>
<li><p>要满足本文档中其他节的空行要求(比如3.3节：import语句)</p>
<p>多个连续的空行是允许的，但没有必要这样做(我们也不鼓励这样做)。</p>
<p>####<br>4.6.2 水平空白</p>
<p>除了语言需求和其它规则，并且除了文字，注释和Javadoc用到单个空&#26684;，单个ASCII空&#26684;也出现在以下几个地方：</p>
</li>
<li><p>分隔任何保留字与紧随其后的左括号(<code>(</code>)(如<code>if,
 for catch</code>等)。</p>
</li>
<li>分隔任何保留字与其前面的右大括号(<code>}</code>)(如<code>else,
 catch</code>)。</li>
<li><p>在任何左大括号前(<code>{</code>)，两个例外：</p>
<pre><code>*   `@SomeAnnotation({a, b})`(不使用空&amp;#26684;)。
</code></pre><ul>
<li><code>String[][] x = foo;</code>(大括号间没有空&#26684;，见下面的Note)。</li>
</ul>
</li>
<li><p>在任何二元或三元运算符的两侧。这也适用于以下“类运算符”符号：</p>
<pre><code>*   类型界限中的&amp;amp;(`&amp;lt;T extends Foo &amp;amp; Bar&amp;gt;`)。
</code></pre><ul>
<li>catch块中的管道符号(<code>catch (FooException | BarException e</code>)。</li>
<li><code>foreach</code>语句中的分号。</li>
</ul>
</li>
<li>在<code>, : ;</code>及右括号(<code>)</code>)后</li>
<li>如果在一条语句后做注释，则双斜杠(//)两边都要空&#26684;。这里可以允许多个空&#26684;，但没有必要。</li>
<li>类型和变量之间：List&nbsp;list。</li>
<li><p>数组初始化中，大括号内的空&#26684;是可选的，即<code>new int[] {5, 6}</code>和<code>new
 int[] { 5, 6 }</code>都是可以的。</p>
<blockquote>
<blockquote>
<p>Note：这个规则并不要求或禁止一行的开关或结尾需要额外的空&#26684;，只对内部空&#26684;做要求。</p>
</blockquote>
</blockquote>
<p>####<br>4.6.3 水平对齐：不做要求</p>
<p><strong>术语说明</strong>：水平对齐指的是通过增加可变数量的空&#26684;来使某一行的字符与上一行的相应字符对齐。</p>
<p>这是允许的(而且在不少地方可以看到这样的代码)，但Google编程风&#26684;对此不做要求。即使对于已经使用水平对齐的代码，我们也不需要去保持这种风&#26684;。</p>
<p>以下示例先展示未对齐的代码，然后是对齐的代码：</p>
<div class="highlight" style="color:rgb(51,51,51); font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px; line-height:18px"><br><pre style="padding:8.5px; font-family:Menlo,Monaco,'Courier New',monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word"><code>&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,170,170)&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot; style=&quot;color:rgb(76,131,23)&quot;&gt;// this is fine&lt;/span&gt;
&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot; style=&quot;color:rgb(76,131,23)&quot;&gt;// this too&lt;/span&gt;

&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,170,170)&quot;&gt;int&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c1&quot; style=&quot;color:rgb(76,131,23)&quot;&gt;// permitted, but future edits&lt;/span&gt;
&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot; style=&quot;color:rgb(76,131,23)&quot;&gt;// may leave it unaligned&lt;/span&gt;</code></pre><br></div><br>&gt; &gt; Tip：对齐可增加代码可读性，但它为日后的维护带来问题。考虑未来某个时候，我们需要修改一堆对齐的代码中的一行。 这可能导致原本很漂亮的对齐代码变得错位。很可能它会提示你调整周围代码的空白来使这一堆代码重新水平对齐(比如程序员想保持这种水平对齐的风&#26684;)， 这就会让你做许多的无用功，增加了reviewer的工作并且可能导致更多的合并冲突。<br><br>###<br>4.7 用小括号来限定组：推荐<br><br>除非作者和reviewer都认为去掉小括号也不会使代码被误解，或是去掉小括号能让代码更易于阅读，否则我们不应该去掉小括号。 我们没有理由假设读者能记住整个Java运算符优先级表。<br><br>###<br>4.8 具体结构<br><br>####<br>4.8.1 枚举类<br><br>枚举常量间用逗号隔开，换行可选。<br><br>没有方法和文档的枚举类可写成数组初始化的&#26684;式：<br><br><div class="highlight" style="color:rgb(51,51,51); font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px; line-height:18px"><br><pre style="padding:8.5px; font-family:Menlo,Monaco,'Courier New',monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word"><code>&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Suit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLUBS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEARTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPADES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DIAMONDS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;</code></pre><br></div>

<p>由于枚举类也是一个类，因此所有适用于其它类的&#26684;式规则也适用于枚举类。</p>
<p>####<br>4.8.2 变量声明</p>
<p>#####<br>4.8.2.1 每次只声明一个变量</p>
<p>不要使用组合声明，比如<code>int a, b;</code>。</p>
<p>#####<br>4.8.2.2 需要时才声明，并尽快进行初始化</p>
<p>不要在一个代码块的开头把局部变量一次性都声明了(这是c语言的做法)，而是在第一次需要使用它时才声明。 局部变量在声明时最好就进行初始化，或者声明后尽快进行初始化。</p>
<p>####<br>4.8.3 数组</p>
<p>#####<br>4.8.3.1 数组初始化：可写成块状结构</p>
<p>数组初始化可以写成块状结构，比如，下面的写法都是OK的：</p>
<div class="highlight" style="color:rgb(51,51,51); font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px; line-height:18px"><br><pre style="padding:8.5px; font-family:Menlo,Monaco,'Courier New',monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word"><code>&lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,170,170)&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,170,170)&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,170,170)&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,170,170)&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;</code></pre><br></div>

<p>#####<br>4.8.3.2 非C风&#26684;的数组声明</p>
<p>中括号是类型的一部分：<code>String[] args</code>， 而非<code>String
 args[]</code>。</p>
<p>####<br>4.8.4 switch语句</p>
<p><strong>术语说明</strong>：switch块的大括号内是一个或多个语句组。每个语句组包含一个或多个switch标签(<code>case
 FOO:</code>或<code>default:</code>)，后面跟着一条或多条语句。</p>
<p>#####<br>4.8.4.1 缩进</p>
<p>与其它块状结构一致，switch块中的内容缩进为2个空&#26684;。</p>
<p>每个switch标签后新起一行，再缩进2个空&#26684;，写下一条或多条语句。</p>
<p>#####<br>4.8.4.2 Fall-through：注释</p>
<p>在一个switch块内，每个语句组要么通过<code>break, continue, return</code>或抛出异常来终止，要么通过一条注释来说明程序将继续执行到下一个语句组，<br> 任何能表达这个意思的注释都是OK的(典型的是用<code>// fall through</code>)。这个特殊的注释并不需要在最后一个语句组(一般是<code>default</code>)中出现。示例：</p>
<div class="highlight" style="color:rgb(51,51,51); font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px; line-height:18px"><br><pre style="padding:8.5px; font-family:Menlo,Monaco,'Courier New',monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word"><code>&lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prepareOneOrTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot; style=&quot;color:rgb(76,131,23)&quot;&gt;// fall through&lt;/span&gt;
  &lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handleOneTwoOrThree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handleLargeNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;</code></pre><br></div>

<p>#####<br>4.8.4.3 default的情况要写出来</p>
<p>每个switch语句都包含一个<code>default</code>语句组，即使它什么代码也不包含。</p>
<p>####<br>4.8.5 注解(Annotations)</p>
<p>注解紧跟在文档块后面，应用于类、方法和构造函数，一个注解独占一行。这些换行不属于自动换行(第4.5节，自动换行)，因此缩进级别不变。例如：</p>
<div class="highlight" style="color:rgb(51,51,51); font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px; line-height:18px"><br><pre style="padding:8.5px; font-family:Menlo,Monaco,'Courier New',monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word"><code>&lt;span class=&quot;nd&quot; style=&quot;color:rgb(136,136,136)&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;nd&quot; style=&quot;color:rgb(136,136,136)&quot;&gt;@Nullable&lt;/span&gt;
&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color:rgb(0,170,0)&quot;&gt;getNameIfPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;</code></pre><br></div>

<p><strong>例外</strong>：单个的注解可以和签名的第一行出现在同一行。例如：</p>
<div class="highlight" style="color:rgb(51,51,51); font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px; line-height:18px"><br><pre style="padding:8.5px; font-family:Menlo,Monaco,'Courier New',monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word"><code>&lt;span class=&quot;nd&quot; style=&quot;color:rgb(136,136,136)&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,170,170)&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;</code></pre><br></div>

<p>应用于字段的注解紧随文档块出现，应用于字段的多个注解允许与字段出现在同一行。例如：</p>
<div class="highlight" style="color:rgb(51,51,51); font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px; line-height:18px"><br><pre style="padding:8.5px; font-family:Menlo,Monaco,'Courier New',monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word"><code>&lt;span class=&quot;nd&quot; style=&quot;color:rgb(136,136,136)&quot;&gt;@Partial&lt;/span&gt; &lt;span class=&quot;nd&quot; style=&quot;color:rgb(136,136,136)&quot;&gt;@Mock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;</code></pre><br></div>

<p>参数和局部变量注解没有特定规则。</p>
<p>####<br>4.8.6 注释</p>
<p>#####<br>4.8.6.1 块注释风&#26684;</p>
<p>块注释与其周围的代码在同一缩进级别。它们可以是<code>/* ... */</code>风&#26684;，也可以是<code>//
 ...</code>风&#26684;。对于多行的<code>/* ... */</code>注释，后续行必须从<code>*</code>开始，<br> 并且与前一行的<code>*</code>对齐。以下示例注释都是OK的。</p>
<div class="highlight" style="color:rgb(51,51,51); font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px; line-height:18px"><br><pre style="padding:8.5px; font-family:Menlo,Monaco,'Courier New',monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word"><code>&lt;span class=&quot;cm&quot; style=&quot;color:rgb(76,131,23)&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot; style=&quot;color:rgb(76,131,23)&quot;&gt; * This is          // And so           /* Or you can&lt;/span&gt;
&lt;span class=&quot;cm&quot; style=&quot;color:rgb(76,131,23)&quot;&gt; * okay.            // is this.          * even do this. */&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;*/&lt;/span&gt;</code></pre><br></div>

<p>注释不要封闭在由星号或其它字符绘制的框架里。</p>
<blockquote>
<blockquote>
<p>Tip：在写多行注释时，如果你希望在必要时能重新换行(即注释像段落风&#26684;一样)，那么使用<code>/* ... */</code>。</p>
</blockquote>
</blockquote>
<p>####<br>4.8.7 Modifiers</p>
<p>类和成员的modifiers如果存在，则按Java语言规范中推荐的顺序出现。</p>
<div class="highlight" style="color:rgb(51,51,51); font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px; line-height:18px"><br><pre style="padding:8.5px; font-family:Menlo,Monaco,'Courier New',monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word"><code>&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;transient&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;strictfp&lt;/span&gt;</code></pre><br></div>

<p>##<br><a target="_blank" id="Naming" style="color:rgb(0,136,204)">命名约定</a></p>
<p>###<br>5.1 对所有标识符都通用的规则</p>
<p>标识符只能使用ASCII字母和数字，因此每个有效的标识符名称都能匹配正则表达式<code>\w&amp;#43;</code>。</p>
<p>在Google其它编程语言风&#26684;中使用的特殊前缀或后缀，如<code>name_</code>,&nbsp;<code>mName</code>,&nbsp;<code>s_name</code>和<code>kName</code>，在Java编程风&#26684;中都不再使用。</p>
<p>###<br>5.2 标识符类型的规则</p>
<p>####<br>5.2.1 包名</p>
<p>包名全部小写，连续的单词只是简单地连接起来，不使用下划线。</p>
<p>####<br>5.2.2 类名</p>
<p>类名都以<code>UpperCamelCase</code>风&#26684;编写。</p>
<p>类名通常是名词或名词短语，接口名称有时可能是形容词或形容词短语。现在还没有特定的规则或行之有效的约定来命名注解类型。</p>
<p>测试类的命名以它要测试的类的名称开始，以<code>Test</code>结束。例如，<code>HashTest</code>或<code>HashIntegrationTest</code>。</p>
<p>####<br>5.2.3 方法名</p>
<p>方法名都以<code>lowerCamelCase</code>风&#26684;编写。</p>
<p>方法名通常是动词或动词短语。</p>
<p>下划线可能出现在JUnit测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：<code>test&amp;lt;MethodUnderTest&amp;gt;_&amp;lt;state&amp;gt;</code>，例如<code>testPop_emptyStack</code>。<br> 并不存在唯一正确的方式来命名测试方法。</p>
<p>####<br>5.2.4 常量名</p>
<p>常量名命名模式为<code>CONSTANT_CASE</code>，全部字母大写，用下划线分隔单词。那，到底什么算是一个常量？</p>
<p>每个常量都是一个静态final字段，但不是所有静态final字段都是常量。在决定一个字段是否是一个常量时， 考虑它是否真的感觉像是一个常量。例如，如果任何一个该实例的观测状态是可变的，则它几乎肯定不会是一个常量。 只是永远不<code>打算</code>改变对象一般是不够的，它要真的一直不变才能将它示为常量。</p>
<div class="highlight" style="color:rgb(51,51,51); font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px; line-height:18px"><br><pre style="padding:8.5px; font-family:Menlo,Monaco,'Courier New',monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word"><code>&lt;span class=&quot;c1&quot; style=&quot;color:rgb(76,131,23)&quot;&gt;// Constants&lt;/span&gt;
&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,170,170)&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NUMBER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(0,153,153)&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImmutableList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAMES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImmutableList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(30,144,255)&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(170,85,0)&quot;&gt;&amp;quot;Ed&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot; style=&quot;color:rgb(170,85,0)&quot;&gt;&amp;quot;Ann&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Joiner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMMA_JOINER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(30,144,255)&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot; style=&quot;color:rgb(170,85,0)&quot;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot; style=&quot;color:rgb(76,131,23)&quot;&gt;// because Joiner is immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeMutableType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EMPTY_ARRAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeEnum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENUM_CONSTANT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot; style=&quot;color:rgb(76,131,23)&quot;&gt;// Not constants&lt;/span&gt;
&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonFinal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot; style=&quot;color:rgb(170,85,0)&quot;&gt;&amp;quot;non-final&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonStatic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot; style=&quot;color:rgb(170,85,0)&quot;&gt;&amp;quot;non-static&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutableCollection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImmutableSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeMutableType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutableElements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImmutableSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(30,144,255)&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(30,144,255)&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(30,144,255)&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonEmptyArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(170,85,0)&quot;&gt;&amp;quot;these&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot; style=&quot;color:rgb(170,85,0)&quot;&gt;&amp;quot;can&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot; style=&quot;color:rgb(170,85,0)&quot;&gt;&amp;quot;change&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;</code></pre><br></div>

<p>这些名字通常是名词或名词短语。</p>
<p>####<br>5.2.5 非常量字段名</p>
<p>非常量字段名以<code>lowerCamelCase</code>风&#26684;编写。</p>
<p>这些名字通常是名词或名词短语。</p>
<p>####<br>5.2.6 参数名</p>
<p>参数名以<code>lowerCamelCase</code>风&#26684;编写。</p>
<p>参数应该避免用单个字符命名。</p>
<p>####<br>5.2.7 局部变量名</p>
<p>局部变量名以<code>lowerCamelCase</code>风&#26684;编写，比起其它类型的名称，局部变量名可以有更为宽松的缩写。</p>
<p>虽然缩写更宽松，但还是要避免用单字符进行命名，除了临时变量和循环变量。</p>
<p>即使局部变量是final和不可改变的，也不应该把它示为常量，自然也不能用常量的规则去命名它。</p>
<p>####<br>5.2.8 类型变量名</p>
<p>类型变量可用以下两种风&#26684;之一进行命名：</p>
</li>
</ol>
<ul>
<li>单个的大写字母，后面可以跟一个数字(如：E, T, X, T2)。</li>
<li><p>以类命名方式(5.2.2节)，后面加个大写的T(如：RequestT, FooBarT)。</p>
<p>###<br>5.3 驼峰式命名法(CamelCase)</p>
<p><a href="http://zh.wikipedia.org/wiki/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB" target="_blank" rel="noopener">驼峰式命名法</a>分大驼峰式命名法(<code>UpperCamelCase</code>)和小驼峰式命名法(<code>lowerCamelCase</code>)。<br> 有时，我们有不只一种合理的方式将一个英语词组转换成驼峰形式，如缩略语或不寻常的结构(例如&quot;IPv6&quot;或&quot;iOS&quot;)。Google指定了以下的转换方案。</p>
<p>名字从<code>散文形式</code>(prose form)开始:</p>
</li>
</ul>
<ol>
<li>把短语转换为纯ASCII码，并且移除任何单引号。例如：&quot;Müller’s algorithm&quot;将变成&quot;Muellers algorithm&quot;。</li>
<li><p>把这个结果切分成单词，在空&#26684;或其它标点符号(通常是连字符)处分割开。</p>
<pre><code>*   推荐：如果某个单词已经有了常用的驼峰表示形式，按它的组成将它分割开(如&amp;quot;AdWords&amp;quot;将分割成&amp;quot;ad words&amp;quot;)。 需要注意的是&amp;quot;iOS&amp;quot;并不是一个真正的驼峰表示形式，因此该推荐对它并不适用。
</code></pre></li>
<li><p>现在将所有字母都小写(包括缩写)，然后将单词的第一个字母大写：</p>
<pre><code>*   每个单词的第一个字母都大写，来得到大驼峰式命名。
</code></pre><ul>
<li>除了第一个单词，每个单词的第一个字母都大写，来得到小驼峰式命名。</li>
</ul>
</li>
<li><p>最后将所有的单词连接起来得到一个标识符。</p>
<p>示例：</p>
<pre style="padding:8.5px; font-family:Menlo,Monaco,'Courier New',monospace; color:rgb(51,51,51); margin-top:0px; margin-bottom:9px; line-height:18px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word">`Prose form                Correct               Incorrect
------------------------------------------------------------------
&quot;XML HTTP request&quot;        XmlHttpRequest        XMLHTTPRequest
&quot;new customer ID&quot;         newCustomerId         newCustomerID
&quot;inner stopwatch&quot;         innerStopwatch        innerStopWatch
&quot;supports IPv6 on iOS?&quot;   supportsIpv6OnIos     supportsIPv6OnIOS
&quot;YouTube importer&quot;        YouTubeImporter
                          YoutubeImporter*
`</pre>

<p>加星号处表示可以，但不推荐。</p>
<blockquote>
<blockquote>
<p>Note：在英语中，某些带有连字符的单词形式不唯一。例如：&quot;nonempty&quot;和&quot;non-empty&quot;都是正确的，因此方法名<code>checkNonempty</code>和<code>checkNonEmpty</code>也都是正确的。</p>
</blockquote>
</blockquote>
<p>##<br><a target="_blank" id="Practice" style="color:rgb(0,136,204)">编程实践</a></p>
<p>###<br>6.1 @Override：能用则用</p>
<p>只要是合法的，就把<code>@Override</code>注解给用上。</p>
<p>###<br>6.2 捕获的异常：不能忽视</p>
<p>除了下面的例子，对捕获的异常不做响应是极少正确的。(典型的响应方式是打印日志，或者如果它被认为是不可能的，则把它当作一个<code>AssertionError</code>重新抛出。)</p>
<p>如果它确实是不需要在catch块中做任何响应，需要做注释加以说明(如下面的例子)。</p>
<div class="highlight" style="color:rgb(51,51,51); font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px; line-height:18px"><br><pre style="padding:8.5px; font-family:Menlo,Monaco,'Courier New',monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word"><code>&lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,170,170)&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(30,144,255)&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color:rgb(0,170,0)&quot;&gt;handleNumericResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NumberFormatException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot; style=&quot;color:rgb(76,131,23)&quot;&gt;// it&#39;s not numeric; that&#39;s fine, just continue&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color:rgb(0,170,0)&quot;&gt;handleTextResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;</code></pre><br></div>

<p><strong>例外</strong>：在测试中，如果一个捕获的异常被命名为<code>expected</code>，则它可以被不加注释地忽略。下面是一种非常常见的情形，用以确保所测试的方法会抛出一个期望中的异常，<br> 因此在这里就没有必要加注释。</p>
<div class="highlight" style="color:rgb(51,51,51); font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px; line-height:18px"><br><pre style="padding:8.5px; font-family:Menlo,Monaco,'Courier New',monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word"><code>&lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;emptyStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(30,144,255)&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoSuchElementException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;</code></pre><br></div>

<p>###<br>6.3 静态成员：使用类进行调用</p>
<p>使用类名调用静态的类成员，而不是具体某个对象或表达式。</p>
<div class="highlight" style="color:rgb(51,51,51); font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px; line-height:18px"><br><pre style="padding:8.5px; font-family:Menlo,Monaco,'Courier New',monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word"><code>&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aFoo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(30,144,255)&quot;&gt;aStaticMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot; style=&quot;color:rgb(76,131,23)&quot;&gt;// good&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;aFoo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(30,144,255)&quot;&gt;aStaticMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot; style=&quot;color:rgb(76,131,23)&quot;&gt;// bad&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;somethingThatYieldsAFoo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(30,144,255)&quot;&gt;aStaticMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot; style=&quot;color:rgb(76,131,23)&quot;&gt;// very bad&lt;/span&gt;</code></pre><br></div>

<p>###<br>6.4 Finalizers: 禁用</p>
<p>极少会去重载<code>Object.finalize</code>。</p>
<blockquote>
<blockquote>
<p>Tip：不要使用finalize。如果你非要使用它，请先仔细阅读和理解<a href="http://books.google.com/books?isbn=8131726592" target="_blank" rel="noopener">Effective Java</a>&nbsp;第7条款：“Avoid Finalizers”，然后不要使用它。</p>
</blockquote>
</blockquote>
<p>##<br><a target="_blank" id="Javadoc" style="color:rgb(0,136,204)">Javadoc</a></p>
<p>###<br>7.1 &#26684;式</p>
<p>####<br>7.1.1 一般形式</p>
<p>Javadoc块的基本&#26684;式如下所示：</p>
<div class="highlight" style="color:rgb(51,51,51); font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px; line-height:18px"><br><pre style="padding:8.5px; font-family:Menlo,Monaco,'Courier New',monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word"><code>&lt;span class=&quot;cm&quot; style=&quot;color:rgb(76,131,23)&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot; style=&quot;color:rgb(76,131,23)&quot;&gt; * Multiple lines of Javadoc text are written here,&lt;/span&gt;
&lt;span class=&quot;cm&quot; style=&quot;color:rgb(76,131,23)&quot;&gt; * wrapped normally...&lt;/span&gt;
&lt;span class=&quot;cm&quot; style=&quot;color:rgb(76,131,23)&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot; style=&quot;color:rgb(0,0,170)&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,170,170)&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color:rgb(0,170,0)&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;</code></pre><br></div>

<p>或者是以下单行形式：</p>
<p><div class="highlight" style="color:rgb(51,51,51); font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px; line-height:18px"><br><pre style="padding:8.5px; font-family:Menlo,Monaco,'Courier New',monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word">`<span class="cm" style="color:rgb(76,131,23)">/*<em> An especially short bit of Javadoc. </em>/</span></pre></div></p>
</li>
</ol>
<p></p>
<p>基本&#26684;式总是OK的。当整个Javadoc块能容纳于一行时(且没有Javadoc标记@XXX)，可以使用单行形式。</p>
<p>####<br>7.1.2 段落</p>
<p>空行(即，只包含最左侧星号的行)会出现在段落之间和Javadoc标记(@XXX)之前(如果有的话)。 除了第一个段落，每个段落第一个单词前都有标签<code>&amp;lt;p&amp;gt;</code>，并且它和第一个单词间没有空&#26684;。</p>
<p>####<br>7.1.3 Javadoc标记</p>
<p>标准的Javadoc标记按以下顺序出现：<code>@param</code>,&nbsp;<code>@return</code>,&nbsp;<code>@throws</code>,&nbsp;<code>@deprecated</code>,<br> 前面这4种标记如果出现，描述都不能为空。 当描述无法在一行中容纳，连续行需要至少再缩进4个空&#26684;。</p>
<p>###<br>7.2 摘要片段</p>
<p>每个类或成员的Javadoc以一个简短的摘要片段开始。这个片段是非常重要的，在某些情况下，它是唯一出现的文本，比如在类和方法索引中。</p>
<p>这只是一个小片段，可以是一个名词短语或动词短语，但不是一个完整的句子。它不会以<code>A {@code Foo} is a...</code>或<code>This
 method returns...</code>开头, 它也不会是一个完整的祈使句，如<code>Save the record...</code>。然而，由于开头大写及被加了标点，它看起来就像是个完整的句子。</p>
<blockquote>
<blockquote>
<p>Tip：一个常见的错误是把简单的Javadoc写成<code>/** @return the customer ID */</code>，这是不正确的。它应该写成`/**</p>
<p> Returns the customer ID. */`。</p>
</blockquote>
</blockquote>
<p>###<br>7.3 哪里需要使用Javadoc</p>
<p>至少在每个public类及它的每个public和protected成员处使用Javadoc，以下是一些例外：</p>
<p>####<br>7.3.1 例外：不言自明的方法</p>
<p>对于简单明显的方法如<code>getFoo</code>，Javadoc是可选的(即，是可以不写的)。这种情况下除了写“Returns the foo”，确实也没有什么&#20540;得写了。</p>
<p>单元测试类中的测试方法可能是不言自明的最常见例子了，我们通常可以从这些方法的描述性命名中知道它是干什么的，因此不需要额外的文档说明。</p>
<blockquote>
<blockquote>
<p>Tip：如果有一些相关信息是需要读者了解的，那么以上的例外不应作为忽视这些信息的理由。例如，对于方法名<code>getCanonicalName</code>，</p>
<p> 就不应该忽视文档说明，因为读者很可能不知道词语<code>canonical name</code>指的是什么。</p>
</blockquote>
</blockquote>
<p>####<br>7.3.2 例外：重载</p>
<p>如果一个方法重载了超类中的方法，那么Javadoc并非必需的。</p>
<p>####<br>7.3.3 可选的Javadoc</p>
<p>对于包外不可见的类和方法，如有需要，也是要使用Javadoc的。如果一个注释是用来定义一个类，方法，字段的整体目的或行为， 那么这个注释应该写成Javadoc，这样更统一更友好。</p>
<p>##<br><a target="_blank" id="End" style="color:rgb(0,136,204)">后记</a></p>
<p>本文档翻译自<a href="http://google-styleguide.googlecode.com/svn/trunk/javaguide.html" target="_blank" rel="noopener">Google Java Style</a>， 译者<a href="http://weibo.com/hawstein" target="_blank" rel="noopener">@Hawstein</a>。</p>
<pre><code>&lt;div&gt;
    作者：zh08070005 发表于2014/2/10 11:51:27 [原文链接](http://blog.csdn.net/kennethyo/article/details/19033951)
&lt;/div&gt;
&lt;div&gt;
阅读：582 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/19033951#comments)
&lt;/div&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
